
c:/Users/karaw/Documents/aquarealtime/resdev/software/testProject/target/2.0.1/electron/testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002364  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082380  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d4  20000000  08082384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000dc  200001d8  200001d8  000301d8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08082558  08082558  00022558  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082580  08082580  00022580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a2ec5  00000000  00000000  00022584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d1fc  00000000  00000000  000c5449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001738  00000000  00000000  000d2645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003a90  00000000  00000000  000d3d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b9ad  00000000  00000000  000d780d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d449  00000000  00000000  000f31ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a80a1  00000000  00000000  00110603  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003e3c  00000000  00000000  001b86a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000126fe  00000000  00000000  001bc4e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 808001c:	b508      	push	{r3, lr}
 808001e:	4b02      	ldr	r3, [pc, #8]	; (8080028 <link_dynalib_end+0xc>)
 8080020:	681b      	ldr	r3, [r3, #0]
 8080022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080024:	9301      	str	r3, [sp, #4]
 8080026:	bd08      	pop	{r3, pc}
 8080028:	0806002c 	.word	0x0806002c

0808002c <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 808002c:	b508      	push	{r3, lr}
 808002e:	4b02      	ldr	r3, [pc, #8]	; (8080038 <localtime_r+0xc>)
 8080030:	681b      	ldr	r3, [r3, #0]
 8080032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080034:	9301      	str	r3, [sp, #4]
 8080036:	bd08      	pop	{r3, pc}
 8080038:	0806002c 	.word	0x0806002c

0808003c <mktime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
 808003c:	b508      	push	{r3, lr}
 808003e:	4b02      	ldr	r3, [pc, #8]	; (8080048 <mktime+0xc>)
 8080040:	681b      	ldr	r3, [r3, #0]
 8080042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8080044:	9301      	str	r3, [sp, #4]
 8080046:	bd08      	pop	{r3, pc}
 8080048:	0806002c 	.word	0x0806002c

0808004c <strftime>:
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 808004c:	b508      	push	{r3, lr}
 808004e:	4b02      	ldr	r3, [pc, #8]	; (8080058 <strftime+0xc>)
 8080050:	681b      	ldr	r3, [r3, #0]
 8080052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080054:	9301      	str	r3, [sp, #4]
 8080056:	bd08      	pop	{r3, pc}
 8080058:	0806002c 	.word	0x0806002c

0808005c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808005c:	4809      	ldr	r0, [pc, #36]	; (8080084 <module_user_pre_init+0x28>)
 808005e:	490a      	ldr	r1, [pc, #40]	; (8080088 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080060:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080062:	4288      	cmp	r0, r1
 8080064:	d005      	beq.n	8080072 <module_user_pre_init+0x16>
 8080066:	4a09      	ldr	r2, [pc, #36]	; (808008c <module_user_pre_init+0x30>)
 8080068:	4282      	cmp	r2, r0
 808006a:	d002      	beq.n	8080072 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f001 f901 	bl	8081274 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080072:	4807      	ldr	r0, [pc, #28]	; (8080090 <module_user_pre_init+0x34>)
 8080074:	4a07      	ldr	r2, [pc, #28]	; (8080094 <module_user_pre_init+0x38>)
 8080076:	2100      	movs	r1, #0
 8080078:	1a12      	subs	r2, r2, r0
 808007a:	f001 f909 	bl	8081290 <memset>
    return &link_heap_start;
}
 808007e:	4806      	ldr	r0, [pc, #24]	; (8080098 <module_user_pre_init+0x3c>)
 8080080:	bd08      	pop	{r3, pc}
 8080082:	bf00      	nop
 8080084:	20000000 	.word	0x20000000
 8080088:	08082384 	.word	0x08082384
 808008c:	200001d4 	.word	0x200001d4
 8080090:	200001d8 	.word	0x200001d8
 8080094:	200002b4 	.word	0x200002b4
 8080098:	200002b4 	.word	0x200002b4

0808009c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808009c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808009e:	f000 fdeb 	bl	8080c78 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800a2:	2500      	movs	r5, #0
 80800a4:	4e05      	ldr	r6, [pc, #20]	; (80800bc <module_user_init+0x20>)
 80800a6:	4c06      	ldr	r4, [pc, #24]	; (80800c0 <module_user_init+0x24>)
 80800a8:	1ba4      	subs	r4, r4, r6
 80800aa:	08a4      	lsrs	r4, r4, #2
 80800ac:	42a5      	cmp	r5, r4
 80800ae:	d100      	bne.n	80800b2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800b0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800b2:	f856 3b04 	ldr.w	r3, [r6], #4
 80800b6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800b8:	3501      	adds	r5, #1
 80800ba:	e7f7      	b.n	80800ac <module_user_init+0x10>
 80800bc:	08082360 	.word	0x08082360
 80800c0:	0808237c 	.word	0x0808237c

080800c4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800c4:	f000 b827 	b.w	8080116 <setup>

080800c8 <module_user_loop>:
}

void module_user_loop() {
 80800c8:	b508      	push	{r3, lr}
    loop();
 80800ca:	f000 f82d 	bl	8080128 <loop>
    _post_loop();
}
 80800ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800d2:	f000 bd93 	b.w	8080bfc <_post_loop>

080800d6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800d6:	f000 ba5d 	b.w	8080594 <malloc>

080800da <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800da:	f000 ba63 	b.w	80805a4 <free>

080800de <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800de:	7800      	ldrb	r0, [r0, #0]
 80800e0:	fab0 f080 	clz	r0, r0
 80800e4:	0940      	lsrs	r0, r0, #5
 80800e6:	4770      	bx	lr

080800e8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e8:	2301      	movs	r3, #1
 80800ea:	7003      	strb	r3, [r0, #0]
 80800ec:	4770      	bx	lr

080800ee <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80800ee:	b40e      	push	{r1, r2, r3}
 80800f0:	b503      	push	{r0, r1, lr}
 80800f2:	ab03      	add	r3, sp, #12
 80800f4:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80800f8:	2101      	movs	r1, #1
        va_start(args, format);
 80800fa:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80800fc:	f000 fbb6 	bl	808086c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080100:	b002      	add	sp, #8
 8080102:	f85d eb04 	ldr.w	lr, [sp], #4
 8080106:	b003      	add	sp, #12
 8080108:	4770      	bx	lr

0808010a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808010a:	2300      	movs	r3, #0
 808010c:	6840      	ldr	r0, [r0, #4]
 808010e:	461a      	mov	r2, r3
 8080110:	4619      	mov	r1, r3
 8080112:	f000 b9f7 	b.w	8080504 <network_off>

08080116 <setup>:
// #define CELL_CONNECT_SECONDS 90 // time to attempt to connect to cellular
// #define CLOUD_CONNECT_SECONDS 60 // time to attempt to connect cloud
// #define CLOUD_WAIT 30

// setup() runs once, when the device is first turned on.
void setup() {
 8080116:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080118:	f000 fe8c 	bl	8080e34 <_Z16_fetch_usbserialv>

}
 808011c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
 8080120:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080124:	f000 be7a 	b.w	8080e1c <_ZN9USBSerial5beginEl>

08080128 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 8080128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct tm tm1;
  struct tm tm2;
  time_t t1, t2;

  size_t a =  sizeof(struct tm);
  memset(&tm1, 0, a);
 808012c:	2424      	movs	r4, #36	; 0x24
void loop() {
 808012e:	b0af      	sub	sp, #188	; 0xbc
  String s = "02/01/21,02/10/21,60";
 8080130:	496f      	ldr	r1, [pc, #444]	; (80802f0 <loop+0x1c8>)
 8080132:	a804      	add	r0, sp, #16
 8080134:	f000 fae6 	bl	8080704 <_ZN6StringC1EPKc>
  Serial.printlnf("size of string is %d",sizeof(s));
 8080138:	f000 fe7c 	bl	8080e34 <_Z16_fetch_usbserialv>
 808013c:	2210      	movs	r2, #16
 808013e:	496d      	ldr	r1, [pc, #436]	; (80802f4 <loop+0x1cc>)
 8080140:	f7ff ffd5 	bl	80800ee <_ZN5Print8printlnfEPKcz>
  String s1 = s.substring(0,8);
 8080144:	a904      	add	r1, sp, #16
 8080146:	a808      	add	r0, sp, #32
 8080148:	2308      	movs	r3, #8
 808014a:	2200      	movs	r2, #0
 808014c:	f000 fb10 	bl	8080770 <_ZNK6String9substringEjj>
  String s2 = s.substring(9,17);
 8080150:	a904      	add	r1, sp, #16
 8080152:	a80c      	add	r0, sp, #48	; 0x30
 8080154:	2311      	movs	r3, #17
 8080156:	2209      	movs	r2, #9
 8080158:	f000 fb0a 	bl	8080770 <_ZNK6String9substringEjj>
  String s3 = s.substring(18,20);
 808015c:	2314      	movs	r3, #20
 808015e:	2212      	movs	r2, #18
 8080160:	a904      	add	r1, sp, #16
 8080162:	a810      	add	r0, sp, #64	; 0x40
 8080164:	f000 fb04 	bl	8080770 <_ZNK6String9substringEjj>
  Serial.println(s1);
 8080168:	f000 fe64 	bl	8080e34 <_Z16_fetch_usbserialv>
 808016c:	9908      	ldr	r1, [sp, #32]
 808016e:	f000 fb56 	bl	808081e <_ZN5Print7printlnEPKc>
  Serial.println(s2);
 8080172:	f000 fe5f 	bl	8080e34 <_Z16_fetch_usbserialv>
 8080176:	990c      	ldr	r1, [sp, #48]	; 0x30
 8080178:	f000 fb51 	bl	808081e <_ZN5Print7printlnEPKc>
  Serial.println(s3);
 808017c:	f000 fe5a 	bl	8080e34 <_Z16_fetch_usbserialv>
 8080180:	9910      	ldr	r1, [sp, #64]	; 0x40
 8080182:	f000 fb4c 	bl	808081e <_ZN5Print7printlnEPKc>
  memset(&tm1, 0, a);
 8080186:	4622      	mov	r2, r4
 8080188:	2100      	movs	r1, #0
 808018a:	a81c      	add	r0, sp, #112	; 0x70
 808018c:	f001 f880 	bl	8081290 <memset>
  memset(&tm2,0, a);
 8080190:	4622      	mov	r2, r4

  strptime(s1,"%m/%d/%y",&tm1);
 8080192:	4c59      	ldr	r4, [pc, #356]	; (80802f8 <loop+0x1d0>)
  memset(&tm2,0, a);
 8080194:	2100      	movs	r1, #0
 8080196:	a825      	add	r0, sp, #148	; 0x94
 8080198:	f001 f87a 	bl	8081290 <memset>
  strptime(s1,"%m/%d/%y",&tm1);
 808019c:	4621      	mov	r1, r4
 808019e:	aa1c      	add	r2, sp, #112	; 0x70
 80801a0:	9808      	ldr	r0, [sp, #32]
 80801a2:	f001 fc75 	bl	8081a90 <strptime>
  strptime(s2,"%m/%d/%y",&tm2);
 80801a6:	aa25      	add	r2, sp, #148	; 0x94
 80801a8:	4621      	mov	r1, r4
 80801aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80801ac:	f001 fc70 	bl	8081a90 <strptime>
  
  t1 = mktime(&tm1);  //sec
 80801b0:	a81c      	add	r0, sp, #112	; 0x70
 80801b2:	f7ff ff43 	bl	808003c <mktime>
 80801b6:	4606      	mov	r6, r0
  t2 = mktime(&tm2); //sec
 80801b8:	a825      	add	r0, sp, #148	; 0x94
 80801ba:	f7ff ff3f 	bl	808003c <mktime>

  uint32_t startDateUnix = (uint32_t) t1;
  uint32_t endDateUnix = (uint32_t) t2;

  char*ptr;
  long mP = strtol(s3,&ptr,10);
 80801be:	a903      	add	r1, sp, #12
  t2 = mktime(&tm2); //sec
 80801c0:	4605      	mov	r5, r0
  long mP = strtol(s3,&ptr,10);
 80801c2:	220a      	movs	r2, #10
 80801c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80801c6:	f001 fced 	bl	8081ba4 <strtol>
 80801ca:	4604      	mov	r4, r0
  Serial.printlnf("measurement period = %ld",mP);
 80801cc:	f000 fe32 	bl	8080e34 <_Z16_fetch_usbserialv>
 80801d0:	4622      	mov	r2, r4
 80801d2:	494a      	ldr	r1, [pc, #296]	; (80802fc <loop+0x1d4>)
 80801d4:	f7ff ff8b 	bl	80800ee <_ZN5Print8printlnfEPKcz>

  int epoch = endDateUnix - startDateUnix; // calc diff between start and end date (seconds)
  int timeFromNow =  Time.now() - endDateUnix; // calc time now to end date (seconds)
 80801d8:	f000 fc93 	bl	8080b02 <_ZN9TimeClass3nowEv>
  int numRecordsSkip = timeFromNow / 60 / mP; // calc number of records to jump sec -> min / measurement period
 80801dc:	233c      	movs	r3, #60	; 0x3c
  int timeFromNow =  Time.now() - endDateUnix; // calc time now to end date (seconds)
 80801de:	1b47      	subs	r7, r0, r5
  int epoch = endDateUnix - startDateUnix; // calc diff between start and end date (seconds)
 80801e0:	eba5 0906 	sub.w	r9, r5, r6
  int numRecordsSkip = timeFromNow / 60 / mP; // calc number of records to jump sec -> min / measurement period
 80801e4:	fb97 f8f3 	sdiv	r8, r7, r3
  int numRecordsPublish = epoch / 60 / mP; // calc total number of records to publish sec -> min / measurement period
 80801e8:	fb99 f3f3 	sdiv	r3, r9, r3
  int numRecordsSkip = timeFromNow / 60 / mP; // calc number of records to jump sec -> min / measurement period
 80801ec:	fb98 f8f4 	sdiv	r8, r8, r4
  int numRecordsPublish = epoch / 60 / mP; // calc total number of records to publish sec -> min / measurement period
 80801f0:	fb93 f4f4 	sdiv	r4, r3, r4
  Serial.println("startDate: "+Time.timeStr(startDateUnix));
 80801f4:	f000 fe1e 	bl	8080e34 <_Z16_fetch_usbserialv>
 80801f8:	f04f 0b00 	mov.w	fp, #0
 80801fc:	4682      	mov	sl, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80801fe:	4940      	ldr	r1, [pc, #256]	; (8080300 <loop+0x1d8>)
 8080200:	a818      	add	r0, sp, #96	; 0x60
 8080202:	f000 fa7f 	bl	8080704 <_ZN6StringC1EPKc>
 8080206:	4632      	mov	r2, r6
 8080208:	465b      	mov	r3, fp
 808020a:	a814      	add	r0, sp, #80	; 0x50
 808020c:	f000 fb76 	bl	80808fc <_ZN9TimeClass7timeStrEx>
 8080210:	a914      	add	r1, sp, #80	; 0x50
 8080212:	a818      	add	r0, sp, #96	; 0x60
 8080214:	f000 faa0 	bl	8080758 <_ZplRK15StringSumHelperRK6String>
 8080218:	6801      	ldr	r1, [r0, #0]
 808021a:	4650      	mov	r0, sl
 808021c:	f000 faff 	bl	808081e <_ZN5Print7printlnEPKc>
 8080220:	a814      	add	r0, sp, #80	; 0x50
 8080222:	f000 fa25 	bl	8080670 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080226:	a818      	add	r0, sp, #96	; 0x60
 8080228:	f000 fa22 	bl	8080670 <_ZN6StringD1Ev>
  Serial.println("endDate: "+Time.timeStr(endDateUnix));
 808022c:	f000 fe02 	bl	8080e34 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080230:	4934      	ldr	r1, [pc, #208]	; (8080304 <loop+0x1dc>)
 8080232:	4682      	mov	sl, r0
 8080234:	a818      	add	r0, sp, #96	; 0x60
 8080236:	f000 fa65 	bl	8080704 <_ZN6StringC1EPKc>
 808023a:	462a      	mov	r2, r5
 808023c:	465b      	mov	r3, fp
 808023e:	a814      	add	r0, sp, #80	; 0x50
 8080240:	f000 fb5c 	bl	80808fc <_ZN9TimeClass7timeStrEx>
 8080244:	a914      	add	r1, sp, #80	; 0x50
 8080246:	a818      	add	r0, sp, #96	; 0x60
 8080248:	f000 fa86 	bl	8080758 <_ZplRK15StringSumHelperRK6String>
 808024c:	6801      	ldr	r1, [r0, #0]
 808024e:	4650      	mov	r0, sl
 8080250:	f000 fae5 	bl	808081e <_ZN5Print7printlnEPKc>
 8080254:	a814      	add	r0, sp, #80	; 0x50
 8080256:	f000 fa0b 	bl	8080670 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808025a:	a818      	add	r0, sp, #96	; 0x60
 808025c:	f000 fa08 	bl	8080670 <_ZN6StringD1Ev>
  Serial.println("time now: " + Time.format(Time.now()));
 8080260:	f000 fde8 	bl	8080e34 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080264:	4928      	ldr	r1, [pc, #160]	; (8080308 <loop+0x1e0>)
 8080266:	4682      	mov	sl, r0
 8080268:	a818      	add	r0, sp, #96	; 0x60
 808026a:	f000 fa4b 	bl	8080704 <_ZN6StringC1EPKc>
 808026e:	f000 fc48 	bl	8080b02 <_ZN9TimeClass3nowEv>
 8080272:	4926      	ldr	r1, [pc, #152]	; (808030c <loop+0x1e4>)
 8080274:	17c3      	asrs	r3, r0, #31
 8080276:	4602      	mov	r2, r0
 8080278:	f8cd b000 	str.w	fp, [sp]
 808027c:	a814      	add	r0, sp, #80	; 0x50
 808027e:	f000 fbe1 	bl	8080a44 <_ZN9TimeClass6formatExPKc>
 8080282:	a914      	add	r1, sp, #80	; 0x50
 8080284:	a818      	add	r0, sp, #96	; 0x60
 8080286:	f000 fa67 	bl	8080758 <_ZplRK15StringSumHelperRK6String>
 808028a:	6801      	ldr	r1, [r0, #0]
 808028c:	4650      	mov	r0, sl
 808028e:	f000 fac6 	bl	808081e <_ZN5Print7printlnEPKc>
 8080292:	a814      	add	r0, sp, #80	; 0x50
 8080294:	f000 f9ec 	bl	8080670 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080298:	a818      	add	r0, sp, #96	; 0x60
 808029a:	f000 f9e9 	bl	8080670 <_ZN6StringD1Ev>
  Serial.printlnf("time from end to now: %d",timeFromNow);
 808029e:	f000 fdc9 	bl	8080e34 <_Z16_fetch_usbserialv>
 80802a2:	463a      	mov	r2, r7
 80802a4:	491a      	ldr	r1, [pc, #104]	; (8080310 <loop+0x1e8>)
 80802a6:	f7ff ff22 	bl	80800ee <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("startDateUnix: %ld, endDateUnix: %ld, epoch: %d",startDateUnix,endDateUnix,epoch);
 80802aa:	f000 fdc3 	bl	8080e34 <_Z16_fetch_usbserialv>
 80802ae:	462b      	mov	r3, r5
 80802b0:	4632      	mov	r2, r6
 80802b2:	4918      	ldr	r1, [pc, #96]	; (8080314 <loop+0x1ec>)
 80802b4:	f8cd 9000 	str.w	r9, [sp]
 80802b8:	f7ff ff19 	bl	80800ee <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("number of records to skip: %d, number of records to publish: %d",numRecordsSkip,numRecordsPublish);
 80802bc:	f000 fdba 	bl	8080e34 <_Z16_fetch_usbserialv>
 80802c0:	4623      	mov	r3, r4
 80802c2:	4642      	mov	r2, r8
 80802c4:	4914      	ldr	r1, [pc, #80]	; (8080318 <loop+0x1f0>)
 80802c6:	f7ff ff12 	bl	80800ee <_ZN5Print8printlnfEPKcz>
  
  delay(60000);
 80802ca:	f64e 2060 	movw	r0, #60000	; 0xea60
 80802ce:	f000 fc33 	bl	8080b38 <delay>
  String s3 = s.substring(18,20);
 80802d2:	a810      	add	r0, sp, #64	; 0x40
 80802d4:	f000 f9cc 	bl	8080670 <_ZN6StringD1Ev>
  String s2 = s.substring(9,17);
 80802d8:	a80c      	add	r0, sp, #48	; 0x30
 80802da:	f000 f9c9 	bl	8080670 <_ZN6StringD1Ev>
  String s1 = s.substring(0,8);
 80802de:	a808      	add	r0, sp, #32
 80802e0:	f000 f9c6 	bl	8080670 <_ZN6StringD1Ev>
  String s = "02/01/21,02/10/21,60";
 80802e4:	a804      	add	r0, sp, #16
 80802e6:	f000 f9c3 	bl	8080670 <_ZN6StringD1Ev>
  
  
}
 80802ea:	b02f      	add	sp, #188	; 0xbc
 80802ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80802f0:	08081d98 	.word	0x08081d98
 80802f4:	08081dad 	.word	0x08081dad
 80802f8:	08081dc2 	.word	0x08081dc2
 80802fc:	08081dcb 	.word	0x08081dcb
 8080300:	08081de4 	.word	0x08081de4
 8080304:	08081df0 	.word	0x08081df0
 8080308:	08081dfa 	.word	0x08081dfa
 808030c:	200001f0 	.word	0x200001f0
 8080310:	08081e05 	.word	0x08081e05
 8080314:	08081e1e 	.word	0x08081e1e
 8080318:	08081e4e 	.word	0x08081e4e

0808031c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808031c:	b508      	push	{r3, lr}
 808031e:	4b02      	ldr	r3, [pc, #8]	; (8080328 <HAL_RNG_GetRandomNumber+0xc>)
 8080320:	681b      	ldr	r3, [r3, #0]
 8080322:	685b      	ldr	r3, [r3, #4]
 8080324:	9301      	str	r3, [sp, #4]
 8080326:	bd08      	pop	{r3, pc}
 8080328:	0804019c 	.word	0x0804019c

0808032c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808032c:	b508      	push	{r3, lr}
 808032e:	4b02      	ldr	r3, [pc, #8]	; (8080338 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080330:	681b      	ldr	r3, [r3, #0]
 8080332:	695b      	ldr	r3, [r3, #20]
 8080334:	9301      	str	r3, [sp, #4]
 8080336:	bd08      	pop	{r3, pc}
 8080338:	0804019c 	.word	0x0804019c

0808033c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808033c:	b508      	push	{r3, lr}
 808033e:	4b02      	ldr	r3, [pc, #8]	; (8080348 <hal_rtc_time_is_valid+0xc>)
 8080340:	681b      	ldr	r3, [r3, #0]
 8080342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080344:	9301      	str	r3, [sp, #4]
 8080346:	bd08      	pop	{r3, pc}
 8080348:	0804019c 	.word	0x0804019c

0808034c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808034c:	b508      	push	{r3, lr}
 808034e:	4b02      	ldr	r3, [pc, #8]	; (8080358 <hal_rtc_get_time+0xc>)
 8080350:	681b      	ldr	r3, [r3, #0]
 8080352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080354:	9301      	str	r3, [sp, #4]
 8080356:	bd08      	pop	{r3, pc}
 8080358:	0804019c 	.word	0x0804019c

0808035c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808035c:	b508      	push	{r3, lr}
 808035e:	4b02      	ldr	r3, [pc, #8]	; (8080368 <hal_usart_init+0xc>)
 8080360:	681b      	ldr	r3, [r3, #0]
 8080362:	699b      	ldr	r3, [r3, #24]
 8080364:	9301      	str	r3, [sp, #4]
 8080366:	bd08      	pop	{r3, pc}
 8080368:	080401c4 	.word	0x080401c4

0808036c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808036c:	b508      	push	{r3, lr}
 808036e:	4b02      	ldr	r3, [pc, #8]	; (8080378 <hal_usart_write+0xc>)
 8080370:	681b      	ldr	r3, [r3, #0]
 8080372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080374:	9301      	str	r3, [sp, #4]
 8080376:	bd08      	pop	{r3, pc}
 8080378:	080401c4 	.word	0x080401c4

0808037c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808037c:	b508      	push	{r3, lr}
 808037e:	4b02      	ldr	r3, [pc, #8]	; (8080388 <hal_usart_available+0xc>)
 8080380:	681b      	ldr	r3, [r3, #0]
 8080382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080384:	9301      	str	r3, [sp, #4]
 8080386:	bd08      	pop	{r3, pc}
 8080388:	080401c4 	.word	0x080401c4

0808038c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808038c:	b508      	push	{r3, lr}
 808038e:	4b02      	ldr	r3, [pc, #8]	; (8080398 <hal_usart_read+0xc>)
 8080390:	681b      	ldr	r3, [r3, #0]
 8080392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080394:	9301      	str	r3, [sp, #4]
 8080396:	bd08      	pop	{r3, pc}
 8080398:	080401c4 	.word	0x080401c4

0808039c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808039c:	b508      	push	{r3, lr}
 808039e:	4b02      	ldr	r3, [pc, #8]	; (80803a8 <hal_usart_peek+0xc>)
 80803a0:	681b      	ldr	r3, [r3, #0]
 80803a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80803a4:	9301      	str	r3, [sp, #4]
 80803a6:	bd08      	pop	{r3, pc}
 80803a8:	080401c4 	.word	0x080401c4

080803ac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80803ac:	b508      	push	{r3, lr}
 80803ae:	4b02      	ldr	r3, [pc, #8]	; (80803b8 <hal_usart_flush+0xc>)
 80803b0:	681b      	ldr	r3, [r3, #0]
 80803b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80803b4:	9301      	str	r3, [sp, #4]
 80803b6:	bd08      	pop	{r3, pc}
 80803b8:	080401c4 	.word	0x080401c4

080803bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80803bc:	b508      	push	{r3, lr}
 80803be:	4b02      	ldr	r3, [pc, #8]	; (80803c8 <hal_usart_available_data_for_write+0xc>)
 80803c0:	681b      	ldr	r3, [r3, #0]
 80803c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80803c4:	9301      	str	r3, [sp, #4]
 80803c6:	bd08      	pop	{r3, pc}
 80803c8:	080401c4 	.word	0x080401c4

080803cc <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80803cc:	b508      	push	{r3, lr}
 80803ce:	4b02      	ldr	r3, [pc, #8]	; (80803d8 <inet_gethostbyname+0xc>)
 80803d0:	681b      	ldr	r3, [r3, #0]
 80803d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80803d4:	9301      	str	r3, [sp, #4]
 80803d6:	bd08      	pop	{r3, pc}
 80803d8:	08060020 	.word	0x08060020

080803dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80803dc:	b508      	push	{r3, lr}
 80803de:	4b02      	ldr	r3, [pc, #8]	; (80803e8 <HAL_USB_USART_Init+0xc>)
 80803e0:	681b      	ldr	r3, [r3, #0]
 80803e2:	681b      	ldr	r3, [r3, #0]
 80803e4:	9301      	str	r3, [sp, #4]
 80803e6:	bd08      	pop	{r3, pc}
 80803e8:	0806001c 	.word	0x0806001c

080803ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80803ec:	b508      	push	{r3, lr}
 80803ee:	4b02      	ldr	r3, [pc, #8]	; (80803f8 <HAL_USB_USART_Begin+0xc>)
 80803f0:	681b      	ldr	r3, [r3, #0]
 80803f2:	685b      	ldr	r3, [r3, #4]
 80803f4:	9301      	str	r3, [sp, #4]
 80803f6:	bd08      	pop	{r3, pc}
 80803f8:	0806001c 	.word	0x0806001c

080803fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80803fc:	b508      	push	{r3, lr}
 80803fe:	4b02      	ldr	r3, [pc, #8]	; (8080408 <HAL_USB_USART_Available_Data+0xc>)
 8080400:	681b      	ldr	r3, [r3, #0]
 8080402:	691b      	ldr	r3, [r3, #16]
 8080404:	9301      	str	r3, [sp, #4]
 8080406:	bd08      	pop	{r3, pc}
 8080408:	0806001c 	.word	0x0806001c

0808040c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808040c:	b508      	push	{r3, lr}
 808040e:	4b02      	ldr	r3, [pc, #8]	; (8080418 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080410:	681b      	ldr	r3, [r3, #0]
 8080412:	695b      	ldr	r3, [r3, #20]
 8080414:	9301      	str	r3, [sp, #4]
 8080416:	bd08      	pop	{r3, pc}
 8080418:	0806001c 	.word	0x0806001c

0808041c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808041c:	b508      	push	{r3, lr}
 808041e:	4b02      	ldr	r3, [pc, #8]	; (8080428 <HAL_USB_USART_Receive_Data+0xc>)
 8080420:	681b      	ldr	r3, [r3, #0]
 8080422:	699b      	ldr	r3, [r3, #24]
 8080424:	9301      	str	r3, [sp, #4]
 8080426:	bd08      	pop	{r3, pc}
 8080428:	0806001c 	.word	0x0806001c

0808042c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808042c:	b508      	push	{r3, lr}
 808042e:	4b02      	ldr	r3, [pc, #8]	; (8080438 <HAL_USB_USART_Send_Data+0xc>)
 8080430:	681b      	ldr	r3, [r3, #0]
 8080432:	69db      	ldr	r3, [r3, #28]
 8080434:	9301      	str	r3, [sp, #4]
 8080436:	bd08      	pop	{r3, pc}
 8080438:	0806001c 	.word	0x0806001c

0808043c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808043c:	b508      	push	{r3, lr}
 808043e:	4b02      	ldr	r3, [pc, #8]	; (8080448 <HAL_USB_USART_Flush_Data+0xc>)
 8080440:	681b      	ldr	r3, [r3, #0]
 8080442:	6a1b      	ldr	r3, [r3, #32]
 8080444:	9301      	str	r3, [sp, #4]
 8080446:	bd08      	pop	{r3, pc}
 8080448:	0806001c 	.word	0x0806001c

0808044c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808044c:	b508      	push	{r3, lr}
 808044e:	4b02      	ldr	r3, [pc, #8]	; (8080458 <system_mode+0xc>)
 8080450:	681b      	ldr	r3, [r3, #0]
 8080452:	681b      	ldr	r3, [r3, #0]
 8080454:	9301      	str	r3, [sp, #4]
 8080456:	bd08      	pop	{r3, pc}
 8080458:	080401a4 	.word	0x080401a4

0808045c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808045c:	b508      	push	{r3, lr}
 808045e:	4b02      	ldr	r3, [pc, #8]	; (8080468 <set_system_mode+0xc>)
 8080460:	681b      	ldr	r3, [r3, #0]
 8080462:	685b      	ldr	r3, [r3, #4]
 8080464:	9301      	str	r3, [sp, #4]
 8080466:	bd08      	pop	{r3, pc}
 8080468:	080401a4 	.word	0x080401a4

0808046c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808046c:	b508      	push	{r3, lr}
 808046e:	4b02      	ldr	r3, [pc, #8]	; (8080478 <system_delay_ms+0xc>)
 8080470:	681b      	ldr	r3, [r3, #0]
 8080472:	695b      	ldr	r3, [r3, #20]
 8080474:	9301      	str	r3, [sp, #4]
 8080476:	bd08      	pop	{r3, pc}
 8080478:	080401a4 	.word	0x080401a4

0808047c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808047c:	b508      	push	{r3, lr}
 808047e:	4b02      	ldr	r3, [pc, #8]	; (8080488 <system_thread_get_state+0xc>)
 8080480:	681b      	ldr	r3, [r3, #0]
 8080482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080484:	9301      	str	r3, [sp, #4]
 8080486:	bd08      	pop	{r3, pc}
 8080488:	080401a4 	.word	0x080401a4

0808048c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808048c:	b508      	push	{r3, lr}
 808048e:	4b03      	ldr	r3, [pc, #12]	; (808049c <system_ctrl_set_app_request_handler+0x10>)
 8080490:	681b      	ldr	r3, [r3, #0]
 8080492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080496:	9301      	str	r3, [sp, #4]
 8080498:	bd08      	pop	{r3, pc}
 808049a:	0000      	.short	0x0000
 808049c:	080401a4 	.word	0x080401a4

080804a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80804a0:	b508      	push	{r3, lr}
 80804a2:	4b03      	ldr	r3, [pc, #12]	; (80804b0 <system_ctrl_set_result+0x10>)
 80804a4:	681b      	ldr	r3, [r3, #0]
 80804a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80804aa:	9301      	str	r3, [sp, #4]
 80804ac:	bd08      	pop	{r3, pc}
 80804ae:	0000      	.short	0x0000
 80804b0:	080401a4 	.word	0x080401a4

080804b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80804b4:	b508      	push	{r3, lr}
 80804b6:	4b02      	ldr	r3, [pc, #8]	; (80804c0 <network_connect+0xc>)
 80804b8:	681b      	ldr	r3, [r3, #0]
 80804ba:	685b      	ldr	r3, [r3, #4]
 80804bc:	9301      	str	r3, [sp, #4]
 80804be:	bd08      	pop	{r3, pc}
 80804c0:	080401c8 	.word	0x080401c8

080804c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80804c4:	b508      	push	{r3, lr}
 80804c6:	4b02      	ldr	r3, [pc, #8]	; (80804d0 <network_connecting+0xc>)
 80804c8:	681b      	ldr	r3, [r3, #0]
 80804ca:	689b      	ldr	r3, [r3, #8]
 80804cc:	9301      	str	r3, [sp, #4]
 80804ce:	bd08      	pop	{r3, pc}
 80804d0:	080401c8 	.word	0x080401c8

080804d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <network_disconnect+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	68db      	ldr	r3, [r3, #12]
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	080401c8 	.word	0x080401c8

080804e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <network_ready+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	691b      	ldr	r3, [r3, #16]
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	080401c8 	.word	0x080401c8

080804f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b02      	ldr	r3, [pc, #8]	; (8080500 <network_on+0xc>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	695b      	ldr	r3, [r3, #20]
 80804fc:	9301      	str	r3, [sp, #4]
 80804fe:	bd08      	pop	{r3, pc}
 8080500:	080401c8 	.word	0x080401c8

08080504 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b02      	ldr	r3, [pc, #8]	; (8080510 <network_off+0xc>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	699b      	ldr	r3, [r3, #24]
 808050c:	9301      	str	r3, [sp, #4]
 808050e:	bd08      	pop	{r3, pc}
 8080510:	080401c8 	.word	0x080401c8

08080514 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080514:	b508      	push	{r3, lr}
 8080516:	4b02      	ldr	r3, [pc, #8]	; (8080520 <network_listen+0xc>)
 8080518:	681b      	ldr	r3, [r3, #0]
 808051a:	69db      	ldr	r3, [r3, #28]
 808051c:	9301      	str	r3, [sp, #4]
 808051e:	bd08      	pop	{r3, pc}
 8080520:	080401c8 	.word	0x080401c8

08080524 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080524:	b508      	push	{r3, lr}
 8080526:	4b02      	ldr	r3, [pc, #8]	; (8080530 <network_listening+0xc>)
 8080528:	681b      	ldr	r3, [r3, #0]
 808052a:	6a1b      	ldr	r3, [r3, #32]
 808052c:	9301      	str	r3, [sp, #4]
 808052e:	bd08      	pop	{r3, pc}
 8080530:	080401c8 	.word	0x080401c8

08080534 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080534:	b508      	push	{r3, lr}
 8080536:	4b02      	ldr	r3, [pc, #8]	; (8080540 <network_set_listen_timeout+0xc>)
 8080538:	681b      	ldr	r3, [r3, #0]
 808053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808053c:	9301      	str	r3, [sp, #4]
 808053e:	bd08      	pop	{r3, pc}
 8080540:	080401c8 	.word	0x080401c8

08080544 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080544:	b508      	push	{r3, lr}
 8080546:	4b02      	ldr	r3, [pc, #8]	; (8080550 <network_get_listen_timeout+0xc>)
 8080548:	681b      	ldr	r3, [r3, #0]
 808054a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808054c:	9301      	str	r3, [sp, #4]
 808054e:	bd08      	pop	{r3, pc}
 8080550:	080401c8 	.word	0x080401c8

08080554 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080554:	b508      	push	{r3, lr}
 8080556:	4b02      	ldr	r3, [pc, #8]	; (8080560 <spark_process+0xc>)
 8080558:	681b      	ldr	r3, [r3, #0]
 808055a:	689b      	ldr	r3, [r3, #8]
 808055c:	9301      	str	r3, [sp, #4]
 808055e:	bd08      	pop	{r3, pc}
 8080560:	080401cc 	.word	0x080401cc

08080564 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080564:	b508      	push	{r3, lr}
 8080566:	4b02      	ldr	r3, [pc, #8]	; (8080570 <spark_cloud_flag_connected+0xc>)
 8080568:	681b      	ldr	r3, [r3, #0]
 808056a:	695b      	ldr	r3, [r3, #20]
 808056c:	9301      	str	r3, [sp, #4]
 808056e:	bd08      	pop	{r3, pc}
 8080570:	080401cc 	.word	0x080401cc

08080574 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080574:	b508      	push	{r3, lr}
 8080576:	4b02      	ldr	r3, [pc, #8]	; (8080580 <spark_sync_time_pending+0xc>)
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808057c:	9301      	str	r3, [sp, #4]
 808057e:	bd08      	pop	{r3, pc}
 8080580:	080401cc 	.word	0x080401cc

08080584 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080584:	b508      	push	{r3, lr}
 8080586:	4b02      	ldr	r3, [pc, #8]	; (8080590 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080588:	681b      	ldr	r3, [r3, #0]
 808058a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808058c:	9301      	str	r3, [sp, #4]
 808058e:	bd08      	pop	{r3, pc}
 8080590:	080401cc 	.word	0x080401cc

08080594 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080594:	b508      	push	{r3, lr}
 8080596:	4b02      	ldr	r3, [pc, #8]	; (80805a0 <malloc+0xc>)
 8080598:	681b      	ldr	r3, [r3, #0]
 808059a:	681b      	ldr	r3, [r3, #0]
 808059c:	9301      	str	r3, [sp, #4]
 808059e:	bd08      	pop	{r3, pc}
 80805a0:	080401a0 	.word	0x080401a0

080805a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80805a4:	b508      	push	{r3, lr}
 80805a6:	4b02      	ldr	r3, [pc, #8]	; (80805b0 <free+0xc>)
 80805a8:	681b      	ldr	r3, [r3, #0]
 80805aa:	685b      	ldr	r3, [r3, #4]
 80805ac:	9301      	str	r3, [sp, #4]
 80805ae:	bd08      	pop	{r3, pc}
 80805b0:	080401a0 	.word	0x080401a0

080805b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80805b4:	b508      	push	{r3, lr}
 80805b6:	4b02      	ldr	r3, [pc, #8]	; (80805c0 <realloc+0xc>)
 80805b8:	681b      	ldr	r3, [r3, #0]
 80805ba:	689b      	ldr	r3, [r3, #8]
 80805bc:	9301      	str	r3, [sp, #4]
 80805be:	bd08      	pop	{r3, pc}
 80805c0:	080401a0 	.word	0x080401a0

080805c4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80805c4:	b508      	push	{r3, lr}
 80805c6:	4b02      	ldr	r3, [pc, #8]	; (80805d0 <siprintf+0xc>)
 80805c8:	681b      	ldr	r3, [r3, #0]
 80805ca:	691b      	ldr	r3, [r3, #16]
 80805cc:	9301      	str	r3, [sp, #4]
 80805ce:	bd08      	pop	{r3, pc}
 80805d0:	080401a0 	.word	0x080401a0

080805d4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80805d4:	b508      	push	{r3, lr}
 80805d6:	4b02      	ldr	r3, [pc, #8]	; (80805e0 <snprintf+0xc>)
 80805d8:	681b      	ldr	r3, [r3, #0]
 80805da:	69db      	ldr	r3, [r3, #28]
 80805dc:	9301      	str	r3, [sp, #4]
 80805de:	bd08      	pop	{r3, pc}
 80805e0:	080401a0 	.word	0x080401a0

080805e4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80805e4:	b508      	push	{r3, lr}
 80805e6:	4b02      	ldr	r3, [pc, #8]	; (80805f0 <vsnprintf+0xc>)
 80805e8:	681b      	ldr	r3, [r3, #0]
 80805ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80805ec:	9301      	str	r3, [sp, #4]
 80805ee:	bd08      	pop	{r3, pc}
 80805f0:	080401a0 	.word	0x080401a0

080805f4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80805f4:	b508      	push	{r3, lr}
 80805f6:	4b02      	ldr	r3, [pc, #8]	; (8080600 <__errno+0xc>)
 80805f8:	681b      	ldr	r3, [r3, #0]
 80805fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80805fc:	9301      	str	r3, [sp, #4]
 80805fe:	bd08      	pop	{r3, pc}
 8080600:	080401a0 	.word	0x080401a0

08080604 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8080604:	b508      	push	{r3, lr}
 8080606:	4b02      	ldr	r3, [pc, #8]	; (8080610 <newlib_impure_ptr_callback+0xc>)
 8080608:	681b      	ldr	r3, [r3, #0]
 808060a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808060c:	9301      	str	r3, [sp, #4]
 808060e:	bd08      	pop	{r3, pc}
 8080610:	080401a0 	.word	0x080401a0

08080614 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8080614:	b510      	push	{r4, lr}
 8080616:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080618:	6800      	ldr	r0, [r0, #0]
 808061a:	b118      	cbz	r0, 8080624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808061c:	f7ff ffc2 	bl	80805a4 <free>
            wakeupSource_ = nullptr;
 8080620:	2300      	movs	r3, #0
 8080622:	6023      	str	r3, [r4, #0]
        }
    }
 8080624:	bd10      	pop	{r4, pc}

08080626 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080626:	b510      	push	{r4, lr}
 8080628:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 808062a:	f7ff fff3 	bl	8080614 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 808062e:	4620      	mov	r0, r4
 8080630:	bd10      	pop	{r4, pc}
	...

08080634 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080634:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8080636:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8080638:	b510      	push	{r4, lr}
 808063a:	4b08      	ldr	r3, [pc, #32]	; (808065c <_GLOBAL__sub_I_System+0x28>)
 808063c:	4c08      	ldr	r4, [pc, #32]	; (8080660 <_GLOBAL__sub_I_System+0x2c>)
 808063e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080640:	4b08      	ldr	r3, [pc, #32]	; (8080664 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8080642:	6020      	str	r0, [r4, #0]
 8080644:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8080646:	71a0      	strb	r0, [r4, #6]
 8080648:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808064a:	f7ff ff07 	bl	808045c <set_system_mode>
SystemClass System;
 808064e:	4620      	mov	r0, r4
 8080650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8080654:	4a04      	ldr	r2, [pc, #16]	; (8080668 <_GLOBAL__sub_I_System+0x34>)
 8080656:	4905      	ldr	r1, [pc, #20]	; (808066c <_GLOBAL__sub_I_System+0x38>)
 8080658:	f000 bdb6 	b.w	80811c8 <__aeabi_atexit>
 808065c:	200001e8 	.word	0x200001e8
 8080660:	200001dc 	.word	0x200001dc
 8080664:	ffff0000 	.word	0xffff0000
 8080668:	200001d8 	.word	0x200001d8
 808066c:	08080627 	.word	0x08080627

08080670 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080670:	b510      	push	{r4, lr}
 8080672:	4604      	mov	r4, r0
{
	free(buffer);
 8080674:	6800      	ldr	r0, [r0, #0]
 8080676:	f7ff ff95 	bl	80805a4 <free>
}
 808067a:	4620      	mov	r0, r4
 808067c:	bd10      	pop	{r4, pc}

0808067e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808067e:	b510      	push	{r4, lr}
 8080680:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8080682:	6800      	ldr	r0, [r0, #0]
 8080684:	b108      	cbz	r0, 808068a <_ZN6String10invalidateEv+0xc>
 8080686:	f7ff ff8d 	bl	80805a4 <free>
	buffer = NULL;
 808068a:	2300      	movs	r3, #0
	capacity = len = 0;
 808068c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8080690:	6023      	str	r3, [r4, #0]
}
 8080692:	bd10      	pop	{r4, pc}

08080694 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080694:	b538      	push	{r3, r4, r5, lr}
 8080696:	4604      	mov	r4, r0
 8080698:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808069a:	6800      	ldr	r0, [r0, #0]
 808069c:	3101      	adds	r1, #1
 808069e:	f7ff ff89 	bl	80805b4 <realloc>
	if (newbuffer) {
 80806a2:	b110      	cbz	r0, 80806aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80806a4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80806a8:	2001      	movs	r0, #1
	}
	return 0;
}
 80806aa:	bd38      	pop	{r3, r4, r5, pc}

080806ac <_ZN6String7reserveEj>:
{
 80806ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80806ae:	6803      	ldr	r3, [r0, #0]
{
 80806b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80806b2:	b123      	cbz	r3, 80806be <_ZN6String7reserveEj+0x12>
 80806b4:	6843      	ldr	r3, [r0, #4]
 80806b6:	428b      	cmp	r3, r1
 80806b8:	d301      	bcc.n	80806be <_ZN6String7reserveEj+0x12>
 80806ba:	2001      	movs	r0, #1
}
 80806bc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80806be:	4620      	mov	r0, r4
 80806c0:	f7ff ffe8 	bl	8080694 <_ZN6String12changeBufferEj>
 80806c4:	2800      	cmp	r0, #0
 80806c6:	d0f9      	beq.n	80806bc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80806c8:	68a3      	ldr	r3, [r4, #8]
 80806ca:	2b00      	cmp	r3, #0
 80806cc:	d1f5      	bne.n	80806ba <_ZN6String7reserveEj+0xe>
 80806ce:	6822      	ldr	r2, [r4, #0]
 80806d0:	7013      	strb	r3, [r2, #0]
 80806d2:	e7f2      	b.n	80806ba <_ZN6String7reserveEj+0xe>

080806d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80806d4:	b570      	push	{r4, r5, r6, lr}
 80806d6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80806d8:	4611      	mov	r1, r2
{
 80806da:	4604      	mov	r4, r0
 80806dc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80806de:	f7ff ffe5 	bl	80806ac <_ZN6String7reserveEj>
 80806e2:	b920      	cbnz	r0, 80806ee <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80806e4:	4620      	mov	r0, r4
 80806e6:	f7ff ffca 	bl	808067e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80806ea:	4620      	mov	r0, r4
 80806ec:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80806ee:	462a      	mov	r2, r5
 80806f0:	4631      	mov	r1, r6
 80806f2:	6820      	ldr	r0, [r4, #0]
	len = length;
 80806f4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80806f6:	f000 fdbd 	bl	8081274 <memcpy>
	buffer[len] = 0;
 80806fa:	2100      	movs	r1, #0
 80806fc:	6822      	ldr	r2, [r4, #0]
 80806fe:	68a3      	ldr	r3, [r4, #8]
 8080700:	54d1      	strb	r1, [r2, r3]
	return *this;
 8080702:	e7f2      	b.n	80806ea <_ZN6String4copyEPKcj+0x16>

08080704 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8080704:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8080706:	2300      	movs	r3, #0
String::String(const char *cstr)
 8080708:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808070a:	460d      	mov	r5, r1
	capacity = 0;
 808070c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080710:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080712:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8080714:	b139      	cbz	r1, 8080726 <_ZN6StringC1EPKc+0x22>
 8080716:	4608      	mov	r0, r1
 8080718:	f000 fdf8 	bl	808130c <strlen>
 808071c:	4629      	mov	r1, r5
 808071e:	4602      	mov	r2, r0
 8080720:	4620      	mov	r0, r4
 8080722:	f7ff ffd7 	bl	80806d4 <_ZN6String4copyEPKcj>
}
 8080726:	4620      	mov	r0, r4
 8080728:	bd38      	pop	{r3, r4, r5, pc}

0808072a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808072a:	b570      	push	{r4, r5, r6, lr}
 808072c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808072e:	460e      	mov	r6, r1
 8080730:	b909      	cbnz	r1, 8080736 <_ZN6String6concatEPKcj+0xc>
 8080732:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8080734:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8080736:	b16a      	cbz	r2, 8080754 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8080738:	6884      	ldr	r4, [r0, #8]
 808073a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808073c:	4621      	mov	r1, r4
 808073e:	f7ff ffb5 	bl	80806ac <_ZN6String7reserveEj>
 8080742:	2800      	cmp	r0, #0
 8080744:	d0f5      	beq.n	8080732 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8080746:	6828      	ldr	r0, [r5, #0]
 8080748:	68ab      	ldr	r3, [r5, #8]
 808074a:	4631      	mov	r1, r6
 808074c:	4418      	add	r0, r3
 808074e:	f000 fdd5 	bl	80812fc <strcpy>
	len = newlen;
 8080752:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8080754:	2001      	movs	r0, #1
 8080756:	e7ed      	b.n	8080734 <_ZN6String6concatEPKcj+0xa>

08080758 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080758:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808075a:	688a      	ldr	r2, [r1, #8]
 808075c:	6809      	ldr	r1, [r1, #0]
{
 808075e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080760:	f7ff ffe3 	bl	808072a <_ZN6String6concatEPKcj>
 8080764:	b910      	cbnz	r0, 808076c <_ZplRK15StringSumHelperRK6String+0x14>
 8080766:	4620      	mov	r0, r4
 8080768:	f7ff ff89 	bl	808067e <_ZN6String10invalidateEv>
	return a;
}
 808076c:	4620      	mov	r0, r4
 808076e:	bd10      	pop	{r4, pc}

08080770 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8080770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080772:	461d      	mov	r5, r3
	if (left > right) {
 8080774:	429a      	cmp	r2, r3
 8080776:	bf88      	it	hi
 8080778:	4613      	movhi	r3, r2
{
 808077a:	460f      	mov	r7, r1
 808077c:	4614      	mov	r4, r2
	if (left > right) {
 808077e:	bf88      	it	hi
 8080780:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8080782:	490b      	ldr	r1, [pc, #44]	; (80807b0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8080784:	bf88      	it	hi
 8080786:	461d      	movhi	r5, r3
{
 8080788:	4606      	mov	r6, r0
	String out;
 808078a:	f7ff ffbb 	bl	8080704 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808078e:	68ba      	ldr	r2, [r7, #8]
 8080790:	42a2      	cmp	r2, r4
 8080792:	d30a      	bcc.n	80807aa <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8080794:	6839      	ldr	r1, [r7, #0]
 8080796:	42aa      	cmp	r2, r5
 8080798:	bf94      	ite	ls
 808079a:	ebc4 0202 	rsbls	r2, r4, r2
 808079e:	ebc4 0205 	rsbhi	r2, r4, r5
 80807a2:	4630      	mov	r0, r6
 80807a4:	4421      	add	r1, r4
 80807a6:	f7ff ff95 	bl	80806d4 <_ZN6String4copyEPKcj>
	return out;
}
 80807aa:	4630      	mov	r0, r6
 80807ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80807ae:	bf00      	nop
 80807b0:	08081fb7 	.word	0x08081fb7

080807b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80807b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80807b6:	4606      	mov	r6, r0
 80807b8:	460d      	mov	r5, r1
  size_t n = 0;
 80807ba:	2400      	movs	r4, #0
 80807bc:	188f      	adds	r7, r1, r2
  while (size--) {
 80807be:	42bd      	cmp	r5, r7
 80807c0:	d00c      	beq.n	80807dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80807c2:	6833      	ldr	r3, [r6, #0]
 80807c4:	4630      	mov	r0, r6
 80807c6:	689b      	ldr	r3, [r3, #8]
 80807c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80807cc:	4798      	blx	r3
     if (chunk>=0)
 80807ce:	1e03      	subs	r3, r0, #0
 80807d0:	db01      	blt.n	80807d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80807d2:	441c      	add	r4, r3
  while (size--) {
 80807d4:	e7f3      	b.n	80807be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80807d6:	2c00      	cmp	r4, #0
 80807d8:	bf08      	it	eq
 80807da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80807dc:	4620      	mov	r0, r4
 80807de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080807e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80807e0:	b570      	push	{r4, r5, r6, lr}
 80807e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80807e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80807e6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80807e8:	b149      	cbz	r1, 80807fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80807ea:	f000 fd8f 	bl	808130c <strlen>
 80807ee:	682b      	ldr	r3, [r5, #0]
 80807f0:	4602      	mov	r2, r0
 80807f2:	4621      	mov	r1, r4
 80807f4:	4628      	mov	r0, r5
    }
 80807f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80807fa:	68db      	ldr	r3, [r3, #12]
 80807fc:	4718      	bx	r3
    }
 80807fe:	bd70      	pop	{r4, r5, r6, pc}

08080800 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080800:	6803      	ldr	r3, [r0, #0]
 8080802:	689b      	ldr	r3, [r3, #8]
 8080804:	4718      	bx	r3

08080806 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080806:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080808:	210d      	movs	r1, #13
{
 808080a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808080c:	f7ff fff8 	bl	8080800 <_ZN5Print5printEc>
  n += print('\n');
 8080810:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080812:	4604      	mov	r4, r0
  n += print('\n');
 8080814:	4628      	mov	r0, r5
 8080816:	f7ff fff3 	bl	8080800 <_ZN5Print5printEc>
  return n;
}
 808081a:	4420      	add	r0, r4
 808081c:	bd38      	pop	{r3, r4, r5, pc}

0808081e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808081e:	b538      	push	{r3, r4, r5, lr}
 8080820:	4605      	mov	r5, r0
  return write(str);
 8080822:	f7ff ffdd 	bl	80807e0 <_ZN5Print5writeEPKc>
 8080826:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8080828:	4628      	mov	r0, r5
 808082a:	f7ff ffec 	bl	8080806 <_ZN5Print7printlnEv>
  return n;
}
 808082e:	4420      	add	r0, r4
 8080830:	bd38      	pop	{r3, r4, r5, pc}

08080832 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080832:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080834:	2a01      	cmp	r2, #1
 8080836:	bf98      	it	ls
 8080838:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808083a:	b530      	push	{r4, r5, lr}
 808083c:	b08b      	sub	sp, #44	; 0x2c
 808083e:	460c      	mov	r4, r1
  *str = '\0';
 8080840:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080844:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080846:	4625      	mov	r5, r4
 8080848:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808084c:	fb04 5312 	mls	r3, r4, r2, r5
 8080850:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080852:	2b09      	cmp	r3, #9
 8080854:	bf94      	ite	ls
 8080856:	3330      	addls	r3, #48	; 0x30
 8080858:	3337      	addhi	r3, #55	; 0x37
 808085a:	b2db      	uxtb	r3, r3
  } while(n);
 808085c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808085e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080862:	d9f0      	bls.n	8080846 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080864:	f7ff ffbc 	bl	80807e0 <_ZN5Print5writeEPKc>
}
 8080868:	b00b      	add	sp, #44	; 0x2c
 808086a:	bd30      	pop	{r4, r5, pc}

0808086c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080870:	b086      	sub	sp, #24
 8080872:	af00      	add	r7, sp, #0
 8080874:	4605      	mov	r5, r0
 8080876:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8080878:	1d38      	adds	r0, r7, #4
 808087a:	2114      	movs	r1, #20
{
 808087c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808087e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8080880:	f7ff feb0 	bl	80805e4 <vsnprintf>

    if (n<bufsize)
 8080884:	2813      	cmp	r0, #19
 8080886:	d80e      	bhi.n	80808a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8080888:	4628      	mov	r0, r5
 808088a:	1d39      	adds	r1, r7, #4
 808088c:	f7ff ffa8 	bl	80807e0 <_ZN5Print5writeEPKc>
 8080890:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8080892:	b11e      	cbz	r6, 808089c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8080894:	4628      	mov	r0, r5
 8080896:	f7ff ffb6 	bl	8080806 <_ZN5Print7printlnEv>
 808089a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808089c:	4620      	mov	r0, r4
 808089e:	3718      	adds	r7, #24
 80808a0:	46bd      	mov	sp, r7
 80808a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80808a6:	f100 0308 	add.w	r3, r0, #8
 80808aa:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80808ae:	46e8      	mov	r8, sp
        char bigger[n+1];
 80808b0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80808b4:	4622      	mov	r2, r4
 80808b6:	1c41      	adds	r1, r0, #1
 80808b8:	683b      	ldr	r3, [r7, #0]
 80808ba:	4668      	mov	r0, sp
 80808bc:	f7ff fe92 	bl	80805e4 <vsnprintf>
  return write(str);
 80808c0:	4669      	mov	r1, sp
 80808c2:	4628      	mov	r0, r5
 80808c4:	f7ff ff8c 	bl	80807e0 <_ZN5Print5writeEPKc>
 80808c8:	4604      	mov	r4, r0
 80808ca:	46c5      	mov	sp, r8
 80808cc:	e7e1      	b.n	8080892 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

080808d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80808d0:	4b01      	ldr	r3, [pc, #4]	; (80808d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80808d2:	4a02      	ldr	r2, [pc, #8]	; (80808dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80808d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80808d6:	4770      	bx	lr
 80808d8:	200001ec 	.word	0x200001ec
 80808dc:	08081e8e 	.word	0x08081e8e

080808e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80808e0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80808e2:	2000      	movs	r0, #0
 80808e4:	f7ff fe46 	bl	8080574 <spark_sync_time_pending>
 80808e8:	b128      	cbz	r0, 80808f6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80808ea:	f7ff fe3b 	bl	8080564 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80808ee:	f080 0001 	eor.w	r0, r0, #1
 80808f2:	b2c0      	uxtb	r0, r0
    }
 80808f4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80808f6:	2001      	movs	r0, #1
 80808f8:	e7fc      	b.n	80808f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080808fc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80808fc:	b530      	push	{r4, r5, lr}
 80808fe:	4604      	mov	r4, r0
    t += time_zone_cache;
 8080900:	4818      	ldr	r0, [pc, #96]	; (8080964 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8080902:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8080904:	e9d0 1000 	ldrd	r1, r0, [r0]
 8080908:	1852      	adds	r2, r2, r1
 808090a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808090e:	4816      	ldr	r0, [pc, #88]	; (8080968 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8080910:	2500      	movs	r5, #0
    t += dst_current_cache;
 8080912:	e9d0 1000 	ldrd	r1, r0, [r0]
 8080916:	1852      	adds	r2, r2, r1
 8080918:	eb40 0303 	adc.w	r3, r0, r3
 808091c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8080920:	2224      	movs	r2, #36	; 0x24
 8080922:	2100      	movs	r1, #0
 8080924:	eb0d 0002 	add.w	r0, sp, r2
 8080928:	f000 fcb2 	bl	8081290 <memset>
    localtime_r(&t, &calendar_time);
 808092c:	a909      	add	r1, sp, #36	; 0x24
 808092e:	4668      	mov	r0, sp
 8080930:	f7ff fb7c 	bl	808002c <localtime_r>
    char ascstr[26] = {};
 8080934:	2216      	movs	r2, #22
 8080936:	4629      	mov	r1, r5
 8080938:	a803      	add	r0, sp, #12
 808093a:	9502      	str	r5, [sp, #8]
 808093c:	f000 fca8 	bl	8081290 <memset>
    asctime_r(&calendar_time, ascstr);
 8080940:	a902      	add	r1, sp, #8
 8080942:	a809      	add	r0, sp, #36	; 0x24
 8080944:	f000 fc62 	bl	808120c <asctime_r>
    int len = strlen(ascstr);
 8080948:	a802      	add	r0, sp, #8
 808094a:	f000 fcdf 	bl	808130c <strlen>
    ascstr[len-1] = 0; // remove final newline
 808094e:	ab12      	add	r3, sp, #72	; 0x48
 8080950:	4418      	add	r0, r3
 8080952:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8080956:	a902      	add	r1, sp, #8
 8080958:	4620      	mov	r0, r4
 808095a:	f7ff fed3 	bl	8080704 <_ZN6StringC1EPKc>
}
 808095e:	4620      	mov	r0, r4
 8080960:	b013      	add	sp, #76	; 0x4c
 8080962:	bd30      	pop	{r4, r5, pc}
 8080964:	20000200 	.word	0x20000200
 8080968:	200001f8 	.word	0x200001f8

0808096c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080970:	b0a5      	sub	sp, #148	; 0x94
 8080972:	4607      	mov	r7, r0
 8080974:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8080976:	a814      	add	r0, sp, #80	; 0x50
{
 8080978:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808097a:	223f      	movs	r2, #63	; 0x3f
{
 808097c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808097e:	f000 fccd 	bl	808131c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8080982:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8080984:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8080986:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808098a:	f000 fcbf 	bl	808130c <strlen>
 808098e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8080990:	bb5d      	cbnz	r5, 80809ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 8080992:	492a      	ldr	r1, [pc, #168]	; (8080a3c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8080994:	a803      	add	r0, sp, #12
 8080996:	f000 fcb1 	bl	80812fc <strcpy>
{
 808099a:	2500      	movs	r5, #0
 808099c:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808099e:	f104 3bff 	add.w	fp, r4, #4294967295
 80809a2:	45ab      	cmp	fp, r5
 80809a4:	d936      	bls.n	8080a14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80809a6:	46b1      	mov	r9, r6
 80809a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80809ac:	f105 0a01 	add.w	sl, r5, #1
 80809b0:	2b25      	cmp	r3, #37	; 0x25
 80809b2:	d117      	bne.n	80809e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80809b4:	7873      	ldrb	r3, [r6, #1]
 80809b6:	2b7a      	cmp	r3, #122	; 0x7a
 80809b8:	d114      	bne.n	80809e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80809ba:	a803      	add	r0, sp, #12
 80809bc:	f000 fca6 	bl	808130c <strlen>
 80809c0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80809c2:	ab14      	add	r3, sp, #80	; 0x50
 80809c4:	1828      	adds	r0, r5, r0
 80809c6:	4418      	add	r0, r3
 80809c8:	ebab 0205 	sub.w	r2, fp, r5
 80809cc:	1cb1      	adds	r1, r6, #2
 80809ce:	f000 fc51 	bl	8081274 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80809d2:	4622      	mov	r2, r4
 80809d4:	a903      	add	r1, sp, #12
 80809d6:	4630      	mov	r0, r6
 80809d8:	f000 fc4c 	bl	8081274 <memcpy>
            len = strlen(format_str);
 80809dc:	a814      	add	r0, sp, #80	; 0x50
 80809de:	f000 fc95 	bl	808130c <strlen>
 80809e2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80809e4:	464e      	mov	r6, r9
 80809e6:	4655      	mov	r5, sl
 80809e8:	e7d9      	b.n	808099e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80809ea:	213c      	movs	r1, #60	; 0x3c
 80809ec:	fb95 f3f1 	sdiv	r3, r5, r1
 80809f0:	2b00      	cmp	r3, #0
 80809f2:	bfb8      	it	lt
 80809f4:	425b      	neglt	r3, r3
 80809f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80809fa:	fb01 3312 	mls	r3, r1, r2, r3
 80809fe:	9300      	str	r3, [sp, #0]
 8080a00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8080a04:	2110      	movs	r1, #16
 8080a06:	fb95 f3f3 	sdiv	r3, r5, r3
 8080a0a:	4a0d      	ldr	r2, [pc, #52]	; (8080a40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 8080a0c:	a803      	add	r0, sp, #12
 8080a0e:	f7ff fde1 	bl	80805d4 <snprintf>
 8080a12:	e7c2      	b.n	808099a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8080a14:	2100      	movs	r1, #0
 8080a16:	222e      	movs	r2, #46	; 0x2e
 8080a18:	a808      	add	r0, sp, #32
 8080a1a:	9107      	str	r1, [sp, #28]
 8080a1c:	f000 fc38 	bl	8081290 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8080a20:	4643      	mov	r3, r8
 8080a22:	aa14      	add	r2, sp, #80	; 0x50
 8080a24:	2132      	movs	r1, #50	; 0x32
 8080a26:	a807      	add	r0, sp, #28
 8080a28:	f7ff fb10 	bl	808004c <strftime>
    return String(buf);
 8080a2c:	4638      	mov	r0, r7
 8080a2e:	a907      	add	r1, sp, #28
 8080a30:	f7ff fe68 	bl	8080704 <_ZN6StringC1EPKc>
}
 8080a34:	4638      	mov	r0, r7
 8080a36:	b025      	add	sp, #148	; 0x94
 8080a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080a3c:	08081e92 	.word	0x08081e92
 8080a40:	08081e94 	.word	0x08081e94

08080a44 <_ZN9TimeClass6formatExPKc>:
{
 8080a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080a46:	b08d      	sub	sp, #52	; 0x34
 8080a48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8080a4a:	4604      	mov	r4, r0
 8080a4c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8080a50:	b915      	cbnz	r5, 8080a58 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8080a52:	4b19      	ldr	r3, [pc, #100]	; (8080ab8 <_ZN9TimeClass6formatExPKc+0x74>)
 8080a54:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8080a56:	b12d      	cbz	r5, 8080a64 <_ZN9TimeClass6formatExPKc+0x20>
 8080a58:	4b18      	ldr	r3, [pc, #96]	; (8080abc <_ZN9TimeClass6formatExPKc+0x78>)
 8080a5a:	4628      	mov	r0, r5
 8080a5c:	6819      	ldr	r1, [r3, #0]
 8080a5e:	f000 fc43 	bl	80812e8 <strcmp>
 8080a62:	b938      	cbnz	r0, 8080a74 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8080a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8080a68:	4620      	mov	r0, r4
 8080a6a:	f7ff ff47 	bl	80808fc <_ZN9TimeClass7timeStrEx>
}
 8080a6e:	4620      	mov	r0, r4
 8080a70:	b00d      	add	sp, #52	; 0x34
 8080a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8080a74:	9900      	ldr	r1, [sp, #0]
 8080a76:	4e12      	ldr	r6, [pc, #72]	; (8080ac0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8080a78:	4f12      	ldr	r7, [pc, #72]	; (8080ac4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8080a7a:	e9d6 3200 	ldrd	r3, r2, [r6]
 8080a7e:	185b      	adds	r3, r3, r1
 8080a80:	9901      	ldr	r1, [sp, #4]
 8080a82:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8080a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8080a8a:	181b      	adds	r3, r3, r0
 8080a8c:	eb41 0202 	adc.w	r2, r1, r2
 8080a90:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8080a94:	2100      	movs	r1, #0
 8080a96:	2224      	movs	r2, #36	; 0x24
 8080a98:	a803      	add	r0, sp, #12
 8080a9a:	f000 fbf9 	bl	8081290 <memset>
    localtime_r(&t, &calendar_time);
 8080a9e:	a903      	add	r1, sp, #12
 8080aa0:	4668      	mov	r0, sp
 8080aa2:	f7ff fac3 	bl	808002c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8080aa6:	6832      	ldr	r2, [r6, #0]
 8080aa8:	683b      	ldr	r3, [r7, #0]
 8080aaa:	4620      	mov	r0, r4
 8080aac:	4413      	add	r3, r2
 8080aae:	a903      	add	r1, sp, #12
 8080ab0:	462a      	mov	r2, r5
 8080ab2:	f7ff ff5b 	bl	808096c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8080ab6:	e7da      	b.n	8080a6e <_ZN9TimeClass6formatExPKc+0x2a>
 8080ab8:	200001f4 	.word	0x200001f4
 8080abc:	20000000 	.word	0x20000000
 8080ac0:	20000200 	.word	0x20000200
 8080ac4:	200001f8 	.word	0x200001f8

08080ac8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8080ac8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8080aca:	2000      	movs	r0, #0
 8080acc:	f7ff fc36 	bl	808033c <hal_rtc_time_is_valid>
    if (rtcstate)
 8080ad0:	4604      	mov	r4, r0
 8080ad2:	b9a0      	cbnz	r0, 8080afe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8080ad4:	f7ff fcba 	bl	808044c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8080ad8:	2801      	cmp	r0, #1
 8080ada:	d110      	bne.n	8080afe <_ZN9TimeClass7isValidEv+0x36>
 8080adc:	4620      	mov	r0, r4
 8080ade:	f7ff fccd 	bl	808047c <system_thread_get_state>
 8080ae2:	b960      	cbnz	r0, 8080afe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8080ae4:	f7ff fefc 	bl	80808e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080ae8:	b910      	cbnz	r0, 8080af0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8080aea:	f7ff fd33 	bl	8080554 <spark_process>
        while (_while() && !_condition()) {
 8080aee:	e7f9      	b.n	8080ae4 <_ZN9TimeClass7isValidEv+0x1c>
 8080af0:	f7ff fef6 	bl	80808e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8080af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8080af8:	2000      	movs	r0, #0
 8080afa:	f7ff bc1f 	b.w	808033c <hal_rtc_time_is_valid>
}
 8080afe:	4620      	mov	r0, r4
 8080b00:	bd10      	pop	{r4, pc}

08080b02 <_ZN9TimeClass3nowEv>:
{
 8080b02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8080b04:	f7ff ffe0 	bl	8080ac8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8080b08:	2210      	movs	r2, #16
 8080b0a:	2100      	movs	r1, #0
 8080b0c:	4668      	mov	r0, sp
 8080b0e:	f000 fbbf 	bl	8081290 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8080b12:	2100      	movs	r1, #0
 8080b14:	4668      	mov	r0, sp
 8080b16:	f7ff fc19 	bl	808034c <hal_rtc_get_time>
}
 8080b1a:	9800      	ldr	r0, [sp, #0]
 8080b1c:	b005      	add	sp, #20
 8080b1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080b24:	4b02      	ldr	r3, [pc, #8]	; (8080b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080b26:	681a      	ldr	r2, [r3, #0]
 8080b28:	4b02      	ldr	r3, [pc, #8]	; (8080b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080b2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080b2c:	4770      	bx	lr
 8080b2e:	bf00      	nop
 8080b30:	20000000 	.word	0x20000000
 8080b34:	200001f4 	.word	0x200001f4

08080b38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080b38:	2100      	movs	r1, #0
 8080b3a:	f7ff bc97 	b.w	808046c <system_delay_ms>

08080b3e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080b3e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080b40:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080b42:	4604      	mov	r4, r0
      if (_M_manager)
 8080b44:	b113      	cbz	r3, 8080b4c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080b46:	2203      	movs	r2, #3
 8080b48:	4601      	mov	r1, r0
 8080b4a:	4798      	blx	r3
    }
 8080b4c:	4620      	mov	r0, r4
 8080b4e:	bd10      	pop	{r4, pc}

08080b50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080b50:	b510      	push	{r4, lr}
 8080b52:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080b54:	f7ff fff3 	bl	8080b3e <_ZNSt14_Function_baseD1Ev>
 8080b58:	4620      	mov	r0, r4
 8080b5a:	bd10      	pop	{r4, pc}

08080b5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080b5c:	2300      	movs	r3, #0
 8080b5e:	4803      	ldr	r0, [pc, #12]	; (8080b6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080b60:	4a03      	ldr	r2, [pc, #12]	; (8080b70 <_GLOBAL__sub_I_RGB+0x14>)
 8080b62:	4904      	ldr	r1, [pc, #16]	; (8080b74 <_GLOBAL__sub_I_RGB+0x18>)
 8080b64:	6083      	str	r3, [r0, #8]
 8080b66:	f000 bb2f 	b.w	80811c8 <__aeabi_atexit>
 8080b6a:	bf00      	nop
 8080b6c:	20000208 	.word	0x20000208
 8080b70:	200001d8 	.word	0x200001d8
 8080b74:	08080b51 	.word	0x08080b51

08080b78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080b78:	4b01      	ldr	r3, [pc, #4]	; (8080b80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080b7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080b7c:	4770      	bx	lr
 8080b7e:	bf00      	nop
 8080b80:	20000004 	.word	0x20000004

08080b84 <serialEventRun>:
{
 8080b84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080b86:	4b17      	ldr	r3, [pc, #92]	; (8080be4 <serialEventRun+0x60>)
 8080b88:	b143      	cbz	r3, 8080b9c <serialEventRun+0x18>
 8080b8a:	f000 f953 	bl	8080e34 <_Z16_fetch_usbserialv>
 8080b8e:	6803      	ldr	r3, [r0, #0]
 8080b90:	691b      	ldr	r3, [r3, #16]
 8080b92:	4798      	blx	r3
 8080b94:	2800      	cmp	r0, #0
 8080b96:	dd01      	ble.n	8080b9c <serialEventRun+0x18>
        serialEvent();
 8080b98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080b9c:	4b12      	ldr	r3, [pc, #72]	; (8080be8 <serialEventRun+0x64>)
 8080b9e:	b143      	cbz	r3, 8080bb2 <serialEventRun+0x2e>
 8080ba0:	f000 fa56 	bl	8081050 <_Z22__fetch_global_Serial1v>
 8080ba4:	6803      	ldr	r3, [r0, #0]
 8080ba6:	691b      	ldr	r3, [r3, #16]
 8080ba8:	4798      	blx	r3
 8080baa:	2800      	cmp	r0, #0
 8080bac:	dd01      	ble.n	8080bb2 <serialEventRun+0x2e>
        serialEvent1();
 8080bae:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080bb2:	4b0e      	ldr	r3, [pc, #56]	; (8080bec <serialEventRun+0x68>)
 8080bb4:	b10b      	cbz	r3, 8080bba <serialEventRun+0x36>
 8080bb6:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080bba:	4b0d      	ldr	r3, [pc, #52]	; (8080bf0 <serialEventRun+0x6c>)
 8080bbc:	b10b      	cbz	r3, 8080bc2 <serialEventRun+0x3e>
 8080bbe:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080bc2:	4b0c      	ldr	r3, [pc, #48]	; (8080bf4 <serialEventRun+0x70>)
 8080bc4:	b10b      	cbz	r3, 8080bca <serialEventRun+0x46>
 8080bc6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080bca:	4b0b      	ldr	r3, [pc, #44]	; (8080bf8 <serialEventRun+0x74>)
 8080bcc:	b143      	cbz	r3, 8080be0 <serialEventRun+0x5c>
 8080bce:	f000 f961 	bl	8080e94 <_Z17_fetch_usbserial1v>
 8080bd2:	6803      	ldr	r3, [r0, #0]
 8080bd4:	691b      	ldr	r3, [r3, #16]
 8080bd6:	4798      	blx	r3
 8080bd8:	2800      	cmp	r0, #0
 8080bda:	dd01      	ble.n	8080be0 <serialEventRun+0x5c>
        usbSerialEvent1();
 8080bdc:	f3af 8000 	nop.w
}
 8080be0:	bd08      	pop	{r3, pc}
 8080be2:	bf00      	nop
	...

08080bfc <_post_loop>:
{
 8080bfc:	b508      	push	{r3, lr}
	serialEventRun();
 8080bfe:	f7ff ffc1 	bl	8080b84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080c02:	f7ff fb93 	bl	808032c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080c06:	4b01      	ldr	r3, [pc, #4]	; (8080c0c <_post_loop+0x10>)
 8080c08:	6018      	str	r0, [r3, #0]
}
 8080c0a:	bd08      	pop	{r3, pc}
 8080c0c:	200002a8 	.word	0x200002a8

08080c10 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080c10:	4802      	ldr	r0, [pc, #8]	; (8080c1c <_Z33system_initialize_user_backup_ramv+0xc>)
 8080c12:	4a03      	ldr	r2, [pc, #12]	; (8080c20 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080c14:	4903      	ldr	r1, [pc, #12]	; (8080c24 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080c16:	1a12      	subs	r2, r2, r0
 8080c18:	f000 bb2c 	b.w	8081274 <memcpy>
 8080c1c:	40024000 	.word	0x40024000
 8080c20:	40024004 	.word	0x40024004
 8080c24:	08082380 	.word	0x08082380

08080c28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080c28:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080c2a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080c2c:	461a      	mov	r2, r3
 8080c2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080c32:	9300      	str	r3, [sp, #0]
 8080c34:	f7ff fc34 	bl	80804a0 <system_ctrl_set_result>
}
 8080c38:	b003      	add	sp, #12
 8080c3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080c40 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080c40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080c42:	8843      	ldrh	r3, [r0, #2]
 8080c44:	2b0a      	cmp	r3, #10
 8080c46:	d008      	beq.n	8080c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080c48:	2b50      	cmp	r3, #80	; 0x50
 8080c4a:	d10b      	bne.n	8080c64 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080c4c:	4b09      	ldr	r3, [pc, #36]	; (8080c74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080c4e:	681b      	ldr	r3, [r3, #0]
 8080c50:	b14b      	cbz	r3, 8080c66 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080c52:	b003      	add	sp, #12
 8080c54:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080c58:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080c5a:	f7ff ffe5 	bl	8080c28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080c5e:	b003      	add	sp, #12
 8080c60:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080c64:	2300      	movs	r3, #0
 8080c66:	461a      	mov	r2, r3
 8080c68:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080c6c:	9300      	str	r3, [sp, #0]
 8080c6e:	f7ff fc17 	bl	80804a0 <system_ctrl_set_result>
}
 8080c72:	e7f4      	b.n	8080c5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080c74:	2000021c 	.word	0x2000021c

08080c78 <module_user_init_hook>:
{
 8080c78:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080c7a:	4c12      	ldr	r4, [pc, #72]	; (8080cc4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8080c7c:	2100      	movs	r1, #0
 8080c7e:	4812      	ldr	r0, [pc, #72]	; (8080cc8 <module_user_init_hook+0x50>)
 8080c80:	f7ff fcc0 	bl	8080604 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080c84:	4d11      	ldr	r5, [pc, #68]	; (8080ccc <module_user_init_hook+0x54>)
 8080c86:	6823      	ldr	r3, [r4, #0]
 8080c88:	42ab      	cmp	r3, r5
 8080c8a:	bf0c      	ite	eq
 8080c8c:	2201      	moveq	r2, #1
 8080c8e:	2200      	movne	r2, #0
 8080c90:	4b0f      	ldr	r3, [pc, #60]	; (8080cd0 <module_user_init_hook+0x58>)
 8080c92:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080c94:	d002      	beq.n	8080c9c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8080c96:	f7ff ffbb 	bl	8080c10 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080c9a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080c9c:	f7ff fb3e 	bl	808031c <HAL_RNG_GetRandomNumber>
 8080ca0:	4604      	mov	r4, r0
    srand(seed);
 8080ca2:	f000 fafd 	bl	80812a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080ca6:	4b0b      	ldr	r3, [pc, #44]	; (8080cd4 <module_user_init_hook+0x5c>)
 8080ca8:	b113      	cbz	r3, 8080cb0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8080caa:	4620      	mov	r0, r4
 8080cac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080cb0:	2100      	movs	r1, #0
 8080cb2:	4808      	ldr	r0, [pc, #32]	; (8080cd4 <module_user_init_hook+0x5c>)
 8080cb4:	f7ff fc66 	bl	8080584 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080cbc:	2100      	movs	r1, #0
 8080cbe:	4806      	ldr	r0, [pc, #24]	; (8080cd8 <module_user_init_hook+0x60>)
 8080cc0:	f7ff bbe4 	b.w	808048c <system_ctrl_set_app_request_handler>
 8080cc4:	40024000 	.word	0x40024000
 8080cc8:	08080b79 	.word	0x08080b79
 8080ccc:	9a271c1e 	.word	0x9a271c1e
 8080cd0:	20000218 	.word	0x20000218
 8080cd4:	00000000 	.word	0x00000000
 8080cd8:	08080c41 	.word	0x08080c41

08080cdc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080cdc:	4770      	bx	lr

08080cde <_ZN9IPAddressD0Ev>:
 8080cde:	b510      	push	{r4, lr}
 8080ce0:	4604      	mov	r4, r0
 8080ce2:	2108      	movs	r1, #8
 8080ce4:	f000 fa75 	bl	80811d2 <_ZdlPvj>
 8080ce8:	4620      	mov	r0, r4
 8080cea:	bd10      	pop	{r4, pc}

08080cec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080cee:	460e      	mov	r6, r1
 8080cf0:	2400      	movs	r4, #0
 8080cf2:	f100 0708 	add.w	r7, r0, #8
 8080cf6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8080cf8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8080cfc:	220a      	movs	r2, #10
 8080cfe:	4630      	mov	r0, r6
 8080d00:	f7ff fd97 	bl	8080832 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080d04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080d06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8080d08:	d101      	bne.n	8080d0e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8080d0a:	4620      	mov	r0, r4
 8080d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8080d0e:	2c00      	cmp	r4, #0
 8080d10:	d0f2      	beq.n	8080cf8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080d12:	212e      	movs	r1, #46	; 0x2e
 8080d14:	4630      	mov	r0, r6
 8080d16:	f7ff fd73 	bl	8080800 <_ZN5Print5printEc>
 8080d1a:	4404      	add	r4, r0
 8080d1c:	e7ec      	b.n	8080cf8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08080d20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8080d20:	4a02      	ldr	r2, [pc, #8]	; (8080d2c <_ZN9IPAddressC1Ev+0xc>)
 8080d22:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080d24:	2200      	movs	r2, #0
 8080d26:	6042      	str	r2, [r0, #4]
}
 8080d28:	4770      	bx	lr
 8080d2a:	bf00      	nop
 8080d2c:	08081ec4 	.word	0x08081ec4

08080d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8080d30:	4a02      	ldr	r2, [pc, #8]	; (8080d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080d32:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8080d34:	680a      	ldr	r2, [r1, #0]
 8080d36:	6042      	str	r2, [r0, #4]
}
 8080d38:	4770      	bx	lr
 8080d3a:	bf00      	nop
 8080d3c:	08081ec4 	.word	0x08081ec4

08080d40 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8080d40:	4a01      	ldr	r2, [pc, #4]	; (8080d48 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8080d42:	e9c0 2100 	strd	r2, r1, [r0]
}
 8080d46:	4770      	bx	lr
 8080d48:	08081ec4 	.word	0x08081ec4

08080d4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8080d4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080d4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080d52:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8080d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080d5a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8080d5e:	6044      	str	r4, [r0, #4]
}
 8080d60:	bd10      	pop	{r4, pc}
	...

08080d64 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080d66:	4d04      	ldr	r5, [pc, #16]	; (8080d78 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080d68:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080d6a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080d6e:	9500      	str	r5, [sp, #0]
 8080d70:	f7ff ffec 	bl	8080d4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080d74:	b003      	add	sp, #12
 8080d76:	bd30      	pop	{r4, r5, pc}
 8080d78:	08081ec4 	.word	0x08081ec4

08080d7c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080d7c:	7441      	strb	r1, [r0, #17]
}
 8080d7e:	4770      	bx	lr

08080d80 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080d80:	4770      	bx	lr

08080d82 <_ZN9USBSerial4readEv>:
{
 8080d82:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8080d84:	2100      	movs	r1, #0
 8080d86:	7c00      	ldrb	r0, [r0, #16]
 8080d88:	f7ff fb48 	bl	808041c <HAL_USB_USART_Receive_Data>
}
 8080d8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080d90:	bd08      	pop	{r3, pc}

08080d92 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8080d92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8080d94:	2101      	movs	r1, #1
 8080d96:	7c00      	ldrb	r0, [r0, #16]
 8080d98:	f7ff fb40 	bl	808041c <HAL_USB_USART_Receive_Data>
}
 8080d9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080da0:	bd08      	pop	{r3, pc}

08080da2 <_ZN9USBSerial17availableForWriteEv>:
{
 8080da2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8080da4:	7c00      	ldrb	r0, [r0, #16]
 8080da6:	f7ff fb31 	bl	808040c <HAL_USB_USART_Available_Data_For_Write>
}
 8080daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080dae:	bd08      	pop	{r3, pc}

08080db0 <_ZN9USBSerial9availableEv>:
{
 8080db0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8080db2:	7c00      	ldrb	r0, [r0, #16]
 8080db4:	f7ff fb22 	bl	80803fc <HAL_USB_USART_Available_Data>
}
 8080db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080dbc:	bd08      	pop	{r3, pc}

08080dbe <_ZN9USBSerial5writeEh>:
{
 8080dbe:	b538      	push	{r3, r4, r5, lr}
 8080dc0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080dc2:	7c00      	ldrb	r0, [r0, #16]
{
 8080dc4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080dc6:	f7ff fb21 	bl	808040c <HAL_USB_USART_Available_Data_For_Write>
 8080dca:	2800      	cmp	r0, #0
 8080dcc:	dc01      	bgt.n	8080dd2 <_ZN9USBSerial5writeEh+0x14>
 8080dce:	7c60      	ldrb	r0, [r4, #17]
 8080dd0:	b128      	cbz	r0, 8080dde <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8080dd2:	4629      	mov	r1, r5
 8080dd4:	7c20      	ldrb	r0, [r4, #16]
 8080dd6:	f7ff fb29 	bl	808042c <HAL_USB_USART_Send_Data>
 8080dda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8080dde:	bd38      	pop	{r3, r4, r5, pc}

08080de0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8080de0:	7c00      	ldrb	r0, [r0, #16]
 8080de2:	f7ff bb2b 	b.w	808043c <HAL_USB_USART_Flush_Data>

08080de6 <_ZN9USBSerialD0Ev>:
 8080de6:	b510      	push	{r4, lr}
 8080de8:	4604      	mov	r4, r0
 8080dea:	2114      	movs	r1, #20
 8080dec:	f000 f9f1 	bl	80811d2 <_ZdlPvj>
 8080df0:	4620      	mov	r0, r4
 8080df2:	bd10      	pop	{r4, pc}

08080df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080df4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dfa:	4604      	mov	r4, r0
 8080dfc:	4608      	mov	r0, r1
 8080dfe:	2100      	movs	r1, #0
 8080e00:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8080e04:	4b04      	ldr	r3, [pc, #16]	; (8080e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8080e06:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080e08:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8080e0a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8080e0c:	4611      	mov	r1, r2
  _blocking = true;
 8080e0e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8080e10:	f7ff fae4 	bl	80803dc <HAL_USB_USART_Init>
}
 8080e14:	4620      	mov	r0, r4
 8080e16:	bd10      	pop	{r4, pc}
 8080e18:	08081ed8 	.word	0x08081ed8

08080e1c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8080e1c:	2200      	movs	r2, #0
 8080e1e:	7c00      	ldrb	r0, [r0, #16]
 8080e20:	f7ff bae4 	b.w	80803ec <HAL_USB_USART_Begin>

08080e24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080e24:	b510      	push	{r4, lr}
 8080e26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080e28:	2214      	movs	r2, #20
 8080e2a:	2100      	movs	r1, #0
 8080e2c:	f000 fa30 	bl	8081290 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080e30:	4620      	mov	r0, r4
 8080e32:	bd10      	pop	{r4, pc}

08080e34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080e34:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e36:	4d0f      	ldr	r5, [pc, #60]	; (8080e74 <_Z16_fetch_usbserialv+0x40>)
{
 8080e38:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080e3a:	a801      	add	r0, sp, #4
 8080e3c:	f7ff fff2 	bl	8080e24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e40:	7829      	ldrb	r1, [r5, #0]
 8080e42:	f3bf 8f5b 	dmb	ish
 8080e46:	f011 0401 	ands.w	r4, r1, #1
 8080e4a:	d110      	bne.n	8080e6e <_Z16_fetch_usbserialv+0x3a>
 8080e4c:	4628      	mov	r0, r5
 8080e4e:	f7ff f946 	bl	80800de <__cxa_guard_acquire>
 8080e52:	b160      	cbz	r0, 8080e6e <_Z16_fetch_usbserialv+0x3a>
 8080e54:	4621      	mov	r1, r4
 8080e56:	aa01      	add	r2, sp, #4
 8080e58:	4807      	ldr	r0, [pc, #28]	; (8080e78 <_Z16_fetch_usbserialv+0x44>)
 8080e5a:	f7ff ffcb 	bl	8080df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080e5e:	4628      	mov	r0, r5
 8080e60:	f7ff f942 	bl	80800e8 <__cxa_guard_release>
 8080e64:	4a05      	ldr	r2, [pc, #20]	; (8080e7c <_Z16_fetch_usbserialv+0x48>)
 8080e66:	4906      	ldr	r1, [pc, #24]	; (8080e80 <_Z16_fetch_usbserialv+0x4c>)
 8080e68:	4803      	ldr	r0, [pc, #12]	; (8080e78 <_Z16_fetch_usbserialv+0x44>)
 8080e6a:	f000 f9ad 	bl	80811c8 <__aeabi_atexit>
	return _usbserial;
}
 8080e6e:	4802      	ldr	r0, [pc, #8]	; (8080e78 <_Z16_fetch_usbserialv+0x44>)
 8080e70:	b007      	add	sp, #28
 8080e72:	bd30      	pop	{r4, r5, pc}
 8080e74:	20000220 	.word	0x20000220
 8080e78:	20000228 	.word	0x20000228
 8080e7c:	200001d8 	.word	0x200001d8
 8080e80:	08080d81 	.word	0x08080d81

08080e84 <_Z23acquireUSBSerial1Bufferv>:
 8080e84:	b510      	push	{r4, lr}
 8080e86:	4604      	mov	r4, r0
 8080e88:	2214      	movs	r2, #20
 8080e8a:	2100      	movs	r1, #0
 8080e8c:	f000 fa00 	bl	8081290 <memset>
 8080e90:	4620      	mov	r0, r4
 8080e92:	bd10      	pop	{r4, pc}

08080e94 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8080e94:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e96:	4c0f      	ldr	r4, [pc, #60]	; (8080ed4 <_Z17_fetch_usbserial1v+0x40>)
{
 8080e98:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080e9a:	a801      	add	r0, sp, #4
 8080e9c:	f7ff fff2 	bl	8080e84 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080ea0:	7823      	ldrb	r3, [r4, #0]
 8080ea2:	f3bf 8f5b 	dmb	ish
 8080ea6:	07db      	lsls	r3, r3, #31
 8080ea8:	d410      	bmi.n	8080ecc <_Z17_fetch_usbserial1v+0x38>
 8080eaa:	4620      	mov	r0, r4
 8080eac:	f7ff f917 	bl	80800de <__cxa_guard_acquire>
 8080eb0:	b160      	cbz	r0, 8080ecc <_Z17_fetch_usbserial1v+0x38>
 8080eb2:	2101      	movs	r1, #1
 8080eb4:	aa01      	add	r2, sp, #4
 8080eb6:	4808      	ldr	r0, [pc, #32]	; (8080ed8 <_Z17_fetch_usbserial1v+0x44>)
 8080eb8:	f7ff ff9c 	bl	8080df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080ebc:	4620      	mov	r0, r4
 8080ebe:	f7ff f913 	bl	80800e8 <__cxa_guard_release>
 8080ec2:	4a06      	ldr	r2, [pc, #24]	; (8080edc <_Z17_fetch_usbserial1v+0x48>)
 8080ec4:	4906      	ldr	r1, [pc, #24]	; (8080ee0 <_Z17_fetch_usbserial1v+0x4c>)
 8080ec6:	4804      	ldr	r0, [pc, #16]	; (8080ed8 <_Z17_fetch_usbserial1v+0x44>)
 8080ec8:	f000 f97e 	bl	80811c8 <__aeabi_atexit>
  return _usbserial1;
}
 8080ecc:	4802      	ldr	r0, [pc, #8]	; (8080ed8 <_Z17_fetch_usbserial1v+0x44>)
 8080ece:	b006      	add	sp, #24
 8080ed0:	bd10      	pop	{r4, pc}
 8080ed2:	bf00      	nop
 8080ed4:	20000224 	.word	0x20000224
 8080ed8:	2000023c 	.word	0x2000023c
 8080edc:	200001d8 	.word	0x200001d8
 8080ee0:	08080d81 	.word	0x08080d81

08080ee4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080ee4:	2200      	movs	r2, #0
 8080ee6:	6840      	ldr	r0, [r0, #4]
 8080ee8:	4611      	mov	r1, r2
 8080eea:	f7ff bafb 	b.w	80804e4 <network_ready>

08080eee <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080eee:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8080ef0:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8080ef2:	b085      	sub	sp, #20
 8080ef4:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080ef6:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8080ef8:	460f      	mov	r7, r1
 8080efa:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8080efc:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080efe:	f000 fa05 	bl	808130c <strlen>
 8080f02:	687b      	ldr	r3, [r7, #4]
 8080f04:	b281      	uxth	r1, r0
 8080f06:	9600      	str	r6, [sp, #0]
 8080f08:	4628      	mov	r0, r5
 8080f0a:	aa03      	add	r2, sp, #12
 8080f0c:	f7ff fa5e 	bl	80803cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080f10:	b130      	cbz	r0, 8080f20 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8080f12:	4631      	mov	r1, r6
 8080f14:	4620      	mov	r0, r4
 8080f16:	f7ff ff13 	bl	8080d40 <_ZN9IPAddressC1Em>
    }
 8080f1a:	4620      	mov	r0, r4
 8080f1c:	b005      	add	sp, #20
 8080f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080f20:	4620      	mov	r0, r4
 8080f22:	a903      	add	r1, sp, #12
 8080f24:	f7ff ff04 	bl	8080d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8080f28:	e7f7      	b.n	8080f1a <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08080f2a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8080f2a:	2200      	movs	r2, #0
 8080f2c:	6840      	ldr	r0, [r0, #4]
 8080f2e:	4611      	mov	r1, r2
 8080f30:	f7ff baf8 	b.w	8080524 <network_listening>

08080f34 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8080f34:	2200      	movs	r2, #0
 8080f36:	6840      	ldr	r0, [r0, #4]
 8080f38:	4611      	mov	r1, r2
 8080f3a:	f7ff bb03 	b.w	8080544 <network_get_listen_timeout>

08080f3e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8080f3e:	2200      	movs	r2, #0
 8080f40:	6840      	ldr	r0, [r0, #4]
 8080f42:	f7ff baf7 	b.w	8080534 <network_set_listen_timeout>

08080f46 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8080f46:	2200      	movs	r2, #0
 8080f48:	6840      	ldr	r0, [r0, #4]
 8080f4a:	f081 0101 	eor.w	r1, r1, #1
 8080f4e:	f7ff bae1 	b.w	8080514 <network_listen>

08080f52 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8080f52:	2300      	movs	r3, #0
 8080f54:	6840      	ldr	r0, [r0, #4]
 8080f56:	461a      	mov	r2, r3
 8080f58:	4619      	mov	r1, r3
 8080f5a:	f7ff bacb 	b.w	80804f4 <network_on>

08080f5e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8080f5e:	2200      	movs	r2, #0
 8080f60:	6840      	ldr	r0, [r0, #4]
 8080f62:	4611      	mov	r1, r2
 8080f64:	f7ff baae 	b.w	80804c4 <network_connecting>

08080f68 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080f68:	2200      	movs	r2, #0
 8080f6a:	2102      	movs	r1, #2
 8080f6c:	6840      	ldr	r0, [r0, #4]
 8080f6e:	f7ff bab1 	b.w	80804d4 <network_disconnect>

08080f72 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8080f72:	2300      	movs	r3, #0
 8080f74:	6840      	ldr	r0, [r0, #4]
 8080f76:	461a      	mov	r2, r3
 8080f78:	f7ff ba9c 	b.w	80804b4 <network_connect>

08080f7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080f7c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080f7e:	2428      	movs	r4, #40	; 0x28
 8080f80:	4b07      	ldr	r3, [pc, #28]	; (8080fa0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8080f82:	4622      	mov	r2, r4
 8080f84:	4618      	mov	r0, r3
 8080f86:	2100      	movs	r1, #0
 8080f88:	f000 f982 	bl	8081290 <memset>
        cid = -1;
 8080f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8080f90:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080f92:	2204      	movs	r2, #4
 8080f94:	4b03      	ldr	r3, [pc, #12]	; (8080fa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8080f96:	8004      	strh	r4, [r0, #0]
 8080f98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080f9a:	4a03      	ldr	r2, [pc, #12]	; (8080fa8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8080f9c:	601a      	str	r2, [r3, #0]
 8080f9e:	bd10      	pop	{r4, pc}
 8080fa0:	20000258 	.word	0x20000258
 8080fa4:	20000250 	.word	0x20000250
 8080fa8:	08081f08 	.word	0x08081f08

08080fac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080fac:	4770      	bx	lr

08080fae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080fae:	7441      	strb	r1, [r0, #17]
}
 8080fb0:	4770      	bx	lr

08080fb2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8080fb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8080fb4:	7c00      	ldrb	r0, [r0, #16]
 8080fb6:	f7ff fa01 	bl	80803bc <hal_usart_available_data_for_write>
}
 8080fba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080fbe:	bd08      	pop	{r3, pc}

08080fc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8080fc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8080fc2:	7c00      	ldrb	r0, [r0, #16]
 8080fc4:	f7ff f9da 	bl	808037c <hal_usart_available>
}
 8080fc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8080fcc:	bd08      	pop	{r3, pc}

08080fce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8080fce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8080fd0:	7c00      	ldrb	r0, [r0, #16]
 8080fd2:	f7ff f9e3 	bl	808039c <hal_usart_peek>
}
 8080fd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080fda:	bd08      	pop	{r3, pc}

08080fdc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8080fdc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8080fde:	7c00      	ldrb	r0, [r0, #16]
 8080fe0:	f7ff f9d4 	bl	808038c <hal_usart_read>
}
 8080fe4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8080fe8:	bd08      	pop	{r3, pc}

08080fea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8080fea:	7c00      	ldrb	r0, [r0, #16]
 8080fec:	f7ff b9de 	b.w	80803ac <hal_usart_flush>

08080ff0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8080ff0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080ff2:	7c46      	ldrb	r6, [r0, #17]
{
 8080ff4:	4604      	mov	r4, r0
 8080ff6:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8080ff8:	b12e      	cbz	r6, 8081006 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8080ffa:	4629      	mov	r1, r5
 8080ffc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8080ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8081002:	f7ff b9b3 	b.w	808036c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8081006:	7c00      	ldrb	r0, [r0, #16]
 8081008:	f7ff f9d8 	bl	80803bc <hal_usart_available_data_for_write>
 808100c:	2800      	cmp	r0, #0
 808100e:	dcf4      	bgt.n	8080ffa <_ZN11USARTSerial5writeEh+0xa>
}
 8081010:	4630      	mov	r0, r6
 8081012:	bd70      	pop	{r4, r5, r6, pc}

08081014 <_ZN11USARTSerialD0Ev>:
 8081014:	b510      	push	{r4, lr}
 8081016:	4604      	mov	r4, r0
 8081018:	2114      	movs	r1, #20
 808101a:	f000 f8da 	bl	80811d2 <_ZdlPvj>
 808101e:	4620      	mov	r0, r4
 8081020:	bd10      	pop	{r4, pc}
	...

08081024 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8081024:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8081028:	b510      	push	{r4, lr}
 808102a:	4604      	mov	r4, r0
 808102c:	4608      	mov	r0, r1
 808102e:	4611      	mov	r1, r2
 8081030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081034:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8081038:	4a04      	ldr	r2, [pc, #16]	; (808104c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808103a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808103c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808103e:	2201      	movs	r2, #1
 8081040:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8081042:	461a      	mov	r2, r3
 8081044:	f7ff f98a 	bl	808035c <hal_usart_init>
}
 8081048:	4620      	mov	r0, r4
 808104a:	bd10      	pop	{r4, pc}
 808104c:	08081f3c 	.word	0x08081f3c

08081050 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 8081052:	4c1a      	ldr	r4, [pc, #104]	; (80810bc <_Z22__fetch_global_Serial1v+0x6c>)
 8081054:	6826      	ldr	r6, [r4, #0]
 8081056:	b94e      	cbnz	r6, 808106c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 8081058:	2084      	movs	r0, #132	; 0x84
 808105a:	f7ff f83c 	bl	80800d6 <_Znwj>
 808105e:	4605      	mov	r5, r0
 8081060:	b118      	cbz	r0, 808106a <_Z22__fetch_global_Serial1v+0x1a>
 8081062:	2284      	movs	r2, #132	; 0x84
 8081064:	4631      	mov	r1, r6
 8081066:	f000 f913 	bl	8081290 <memset>
 808106a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 808106c:	4d14      	ldr	r5, [pc, #80]	; (80810c0 <_Z22__fetch_global_Serial1v+0x70>)
 808106e:	682f      	ldr	r7, [r5, #0]
 8081070:	b94f      	cbnz	r7, 8081086 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 8081072:	2084      	movs	r0, #132	; 0x84
 8081074:	f7ff f82f 	bl	80800d6 <_Znwj>
 8081078:	4606      	mov	r6, r0
 808107a:	b118      	cbz	r0, 8081084 <_Z22__fetch_global_Serial1v+0x34>
 808107c:	2284      	movs	r2, #132	; 0x84
 808107e:	4639      	mov	r1, r7
 8081080:	f000 f906 	bl	8081290 <memset>
 8081084:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 8081086:	4f0f      	ldr	r7, [pc, #60]	; (80810c4 <_Z22__fetch_global_Serial1v+0x74>)
 8081088:	7839      	ldrb	r1, [r7, #0]
 808108a:	f3bf 8f5b 	dmb	ish
 808108e:	f011 0601 	ands.w	r6, r1, #1
 8081092:	d111      	bne.n	80810b8 <_Z22__fetch_global_Serial1v+0x68>
 8081094:	4638      	mov	r0, r7
 8081096:	f7ff f822 	bl	80800de <__cxa_guard_acquire>
 808109a:	b168      	cbz	r0, 80810b8 <_Z22__fetch_global_Serial1v+0x68>
 808109c:	4631      	mov	r1, r6
 808109e:	6822      	ldr	r2, [r4, #0]
 80810a0:	682b      	ldr	r3, [r5, #0]
 80810a2:	4809      	ldr	r0, [pc, #36]	; (80810c8 <_Z22__fetch_global_Serial1v+0x78>)
 80810a4:	f7ff ffbe 	bl	8081024 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80810a8:	4638      	mov	r0, r7
 80810aa:	f7ff f81d 	bl	80800e8 <__cxa_guard_release>
 80810ae:	4a07      	ldr	r2, [pc, #28]	; (80810cc <_Z22__fetch_global_Serial1v+0x7c>)
 80810b0:	4907      	ldr	r1, [pc, #28]	; (80810d0 <_Z22__fetch_global_Serial1v+0x80>)
 80810b2:	4805      	ldr	r0, [pc, #20]	; (80810c8 <_Z22__fetch_global_Serial1v+0x78>)
 80810b4:	f000 f888 	bl	80811c8 <__aeabi_atexit>
#endif
	return serial1;
}
 80810b8:	4803      	ldr	r0, [pc, #12]	; (80810c8 <_Z22__fetch_global_Serial1v+0x78>)
 80810ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80810bc:	20000284 	.word	0x20000284
 80810c0:	20000288 	.word	0x20000288
 80810c4:	20000280 	.word	0x20000280
 80810c8:	2000028c 	.word	0x2000028c
 80810cc:	200001d8 	.word	0x200001d8
 80810d0:	08080fad 	.word	0x08080fad

080810d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80810d4:	2300      	movs	r3, #0
 80810d6:	6840      	ldr	r0, [r0, #4]
 80810d8:	461a      	mov	r2, r3
 80810da:	f7ff b9eb 	b.w	80804b4 <network_connect>

080810de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80810de:	2200      	movs	r2, #0
 80810e0:	2102      	movs	r1, #2
 80810e2:	6840      	ldr	r0, [r0, #4]
 80810e4:	f7ff b9f6 	b.w	80804d4 <network_disconnect>

080810e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80810e8:	2200      	movs	r2, #0
 80810ea:	6840      	ldr	r0, [r0, #4]
 80810ec:	4611      	mov	r1, r2
 80810ee:	f7ff b9e9 	b.w	80804c4 <network_connecting>

080810f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80810f2:	2200      	movs	r2, #0
 80810f4:	6840      	ldr	r0, [r0, #4]
 80810f6:	4611      	mov	r1, r2
 80810f8:	f7ff b9f4 	b.w	80804e4 <network_ready>

080810fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80810fc:	2300      	movs	r3, #0
 80810fe:	6840      	ldr	r0, [r0, #4]
 8081100:	461a      	mov	r2, r3
 8081102:	4619      	mov	r1, r3
 8081104:	f7ff b9f6 	b.w	80804f4 <network_on>

08081108 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081108:	2300      	movs	r3, #0
 808110a:	6840      	ldr	r0, [r0, #4]
 808110c:	461a      	mov	r2, r3
 808110e:	4619      	mov	r1, r3
 8081110:	f7ff b9f8 	b.w	8080504 <network_off>

08081114 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081114:	2200      	movs	r2, #0
 8081116:	6840      	ldr	r0, [r0, #4]
 8081118:	f081 0101 	eor.w	r1, r1, #1
 808111c:	f7ff b9fa 	b.w	8080514 <network_listen>

08081120 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081120:	2200      	movs	r2, #0
 8081122:	6840      	ldr	r0, [r0, #4]
 8081124:	f7ff ba06 	b.w	8080534 <network_set_listen_timeout>

08081128 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081128:	2200      	movs	r2, #0
 808112a:	6840      	ldr	r0, [r0, #4]
 808112c:	4611      	mov	r1, r2
 808112e:	f7ff ba09 	b.w	8080544 <network_get_listen_timeout>

08081132 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8081132:	2200      	movs	r2, #0
 8081134:	6840      	ldr	r0, [r0, #4]
 8081136:	4611      	mov	r1, r2
 8081138:	f7ff b9f4 	b.w	8080524 <network_listening>

0808113c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808113c:	b570      	push	{r4, r5, r6, lr}
 808113e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081140:	2600      	movs	r6, #0
 8081142:	b086      	sub	sp, #24
 8081144:	4604      	mov	r4, r0
    IPAddress addr;
 8081146:	a804      	add	r0, sp, #16
 8081148:	f7ff fdea 	bl	8080d20 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808114c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808114e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081150:	f000 f8dc 	bl	808130c <strlen>
 8081154:	4b0a      	ldr	r3, [pc, #40]	; (8081180 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8081156:	9600      	str	r6, [sp, #0]
 8081158:	b281      	uxth	r1, r0
 808115a:	685b      	ldr	r3, [r3, #4]
 808115c:	4628      	mov	r0, r5
 808115e:	aa03      	add	r2, sp, #12
 8081160:	f7ff f934 	bl	80803cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081164:	b130      	cbz	r0, 8081174 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081166:	4631      	mov	r1, r6
 8081168:	4620      	mov	r0, r4
 808116a:	f7ff fde9 	bl	8080d40 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808116e:	4620      	mov	r0, r4
 8081170:	b006      	add	sp, #24
 8081172:	bd70      	pop	{r4, r5, r6, pc}
 8081174:	4620      	mov	r0, r4
 8081176:	a903      	add	r1, sp, #12
 8081178:	f7ff fdda 	bl	8080d30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808117c:	e7f7      	b.n	808116e <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808117e:	bf00      	nop
 8081180:	20000250 	.word	0x20000250

08081184 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081184:	4b02      	ldr	r3, [pc, #8]	; (8081190 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081186:	4a03      	ldr	r2, [pc, #12]	; (8081194 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081188:	601a      	str	r2, [r3, #0]
 808118a:	2200      	movs	r2, #0
 808118c:	605a      	str	r2, [r3, #4]

} // spark
 808118e:	4770      	bx	lr
 8081190:	200002a0 	.word	0x200002a0
 8081194:	08081f6c 	.word	0x08081f6c

08081198 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081198:	2300      	movs	r3, #0
 808119a:	b513      	push	{r0, r1, r4, lr}
 808119c:	4c07      	ldr	r4, [pc, #28]	; (80811bc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808119e:	461a      	mov	r2, r3
 80811a0:	4619      	mov	r1, r3
 80811a2:	4620      	mov	r0, r4
 80811a4:	9300      	str	r3, [sp, #0]
 80811a6:	f7ff fddd 	bl	8080d64 <_ZN9IPAddressC1Ehhhh>
 80811aa:	4620      	mov	r0, r4
 80811ac:	4a04      	ldr	r2, [pc, #16]	; (80811c0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80811ae:	4905      	ldr	r1, [pc, #20]	; (80811c4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80811b0:	b002      	add	sp, #8
 80811b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80811b6:	f000 b807 	b.w	80811c8 <__aeabi_atexit>
 80811ba:	bf00      	nop
 80811bc:	200002ac 	.word	0x200002ac
 80811c0:	200001d8 	.word	0x200001d8
 80811c4:	08080cdd 	.word	0x08080cdd

080811c8 <__aeabi_atexit>:
 80811c8:	460b      	mov	r3, r1
 80811ca:	4601      	mov	r1, r0
 80811cc:	4618      	mov	r0, r3
 80811ce:	f000 b843 	b.w	8081258 <__cxa_atexit>

080811d2 <_ZdlPvj>:
 80811d2:	f7fe bf82 	b.w	80800da <_ZdlPv>
	...

080811d8 <__aeabi_uldivmod>:
 80811d8:	b953      	cbnz	r3, 80811f0 <__aeabi_uldivmod+0x18>
 80811da:	b94a      	cbnz	r2, 80811f0 <__aeabi_uldivmod+0x18>
 80811dc:	2900      	cmp	r1, #0
 80811de:	bf08      	it	eq
 80811e0:	2800      	cmpeq	r0, #0
 80811e2:	bf1c      	itt	ne
 80811e4:	f04f 31ff 	movne.w	r1, #4294967295
 80811e8:	f04f 30ff 	movne.w	r0, #4294967295
 80811ec:	f000 b80c 	b.w	8081208 <__aeabi_idiv0>
 80811f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80811f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80811f8:	f7fe ff10 	bl	808001c <__udivmoddi4>
 80811fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8081200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8081204:	b004      	add	sp, #16
 8081206:	4770      	bx	lr

08081208 <__aeabi_idiv0>:
 8081208:	4770      	bx	lr
 808120a:	bf00      	nop

0808120c <asctime_r>:
 808120c:	b510      	push	{r4, lr}
 808120e:	460c      	mov	r4, r1
 8081210:	6941      	ldr	r1, [r0, #20]
 8081212:	b086      	sub	sp, #24
 8081214:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8081218:	6903      	ldr	r3, [r0, #16]
 808121a:	6982      	ldr	r2, [r0, #24]
 808121c:	9104      	str	r1, [sp, #16]
 808121e:	6801      	ldr	r1, [r0, #0]
 8081220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8081224:	9103      	str	r1, [sp, #12]
 8081226:	6841      	ldr	r1, [r0, #4]
 8081228:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808122c:	9102      	str	r1, [sp, #8]
 808122e:	6881      	ldr	r1, [r0, #8]
 8081230:	9101      	str	r1, [sp, #4]
 8081232:	68c1      	ldr	r1, [r0, #12]
 8081234:	4620      	mov	r0, r4
 8081236:	9100      	str	r1, [sp, #0]
 8081238:	4904      	ldr	r1, [pc, #16]	; (808124c <asctime_r+0x40>)
 808123a:	440b      	add	r3, r1
 808123c:	4904      	ldr	r1, [pc, #16]	; (8081250 <asctime_r+0x44>)
 808123e:	440a      	add	r2, r1
 8081240:	4904      	ldr	r1, [pc, #16]	; (8081254 <asctime_r+0x48>)
 8081242:	f7ff f9bf 	bl	80805c4 <siprintf>
 8081246:	4620      	mov	r0, r4
 8081248:	b006      	add	sp, #24
 808124a:	bd10      	pop	{r4, pc}
 808124c:	08081fcd 	.word	0x08081fcd
 8081250:	08081fb8 	.word	0x08081fb8
 8081254:	08081f98 	.word	0x08081f98

08081258 <__cxa_atexit>:
 8081258:	b510      	push	{r4, lr}
 808125a:	4604      	mov	r4, r0
 808125c:	4804      	ldr	r0, [pc, #16]	; (8081270 <__cxa_atexit+0x18>)
 808125e:	4613      	mov	r3, r2
 8081260:	b120      	cbz	r0, 808126c <__cxa_atexit+0x14>
 8081262:	460a      	mov	r2, r1
 8081264:	2002      	movs	r0, #2
 8081266:	4621      	mov	r1, r4
 8081268:	f3af 8000 	nop.w
 808126c:	bd10      	pop	{r4, pc}
 808126e:	bf00      	nop
 8081270:	00000000 	.word	0x00000000

08081274 <memcpy>:
 8081274:	440a      	add	r2, r1
 8081276:	4291      	cmp	r1, r2
 8081278:	f100 33ff 	add.w	r3, r0, #4294967295
 808127c:	d100      	bne.n	8081280 <memcpy+0xc>
 808127e:	4770      	bx	lr
 8081280:	b510      	push	{r4, lr}
 8081282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081286:	4291      	cmp	r1, r2
 8081288:	f803 4f01 	strb.w	r4, [r3, #1]!
 808128c:	d1f9      	bne.n	8081282 <memcpy+0xe>
 808128e:	bd10      	pop	{r4, pc}

08081290 <memset>:
 8081290:	4603      	mov	r3, r0
 8081292:	4402      	add	r2, r0
 8081294:	4293      	cmp	r3, r2
 8081296:	d100      	bne.n	808129a <memset+0xa>
 8081298:	4770      	bx	lr
 808129a:	f803 1b01 	strb.w	r1, [r3], #1
 808129e:	e7f9      	b.n	8081294 <memset+0x4>

080812a0 <srand>:
 80812a0:	b538      	push	{r3, r4, r5, lr}
 80812a2:	4b0d      	ldr	r3, [pc, #52]	; (80812d8 <srand+0x38>)
 80812a4:	4604      	mov	r4, r0
 80812a6:	681d      	ldr	r5, [r3, #0]
 80812a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80812aa:	b97b      	cbnz	r3, 80812cc <srand+0x2c>
 80812ac:	2018      	movs	r0, #24
 80812ae:	f7ff f971 	bl	8080594 <malloc>
 80812b2:	4a0a      	ldr	r2, [pc, #40]	; (80812dc <srand+0x3c>)
 80812b4:	4b0a      	ldr	r3, [pc, #40]	; (80812e0 <srand+0x40>)
 80812b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80812b8:	e9c0 2300 	strd	r2, r3, [r0]
 80812bc:	4b09      	ldr	r3, [pc, #36]	; (80812e4 <srand+0x44>)
 80812be:	2201      	movs	r2, #1
 80812c0:	6083      	str	r3, [r0, #8]
 80812c2:	230b      	movs	r3, #11
 80812c4:	8183      	strh	r3, [r0, #12]
 80812c6:	2300      	movs	r3, #0
 80812c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80812cc:	2200      	movs	r2, #0
 80812ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80812d0:	611c      	str	r4, [r3, #16]
 80812d2:	615a      	str	r2, [r3, #20]
 80812d4:	bd38      	pop	{r3, r4, r5, pc}
 80812d6:	bf00      	nop
 80812d8:	20000004 	.word	0x20000004
 80812dc:	abcd330e 	.word	0xabcd330e
 80812e0:	e66d1234 	.word	0xe66d1234
 80812e4:	0005deec 	.word	0x0005deec

080812e8 <strcmp>:
 80812e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80812ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80812f0:	2a01      	cmp	r2, #1
 80812f2:	bf28      	it	cs
 80812f4:	429a      	cmpcs	r2, r3
 80812f6:	d0f7      	beq.n	80812e8 <strcmp>
 80812f8:	1ad0      	subs	r0, r2, r3
 80812fa:	4770      	bx	lr

080812fc <strcpy>:
 80812fc:	4603      	mov	r3, r0
 80812fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8081302:	f803 2b01 	strb.w	r2, [r3], #1
 8081306:	2a00      	cmp	r2, #0
 8081308:	d1f9      	bne.n	80812fe <strcpy+0x2>
 808130a:	4770      	bx	lr

0808130c <strlen>:
 808130c:	4603      	mov	r3, r0
 808130e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081312:	2a00      	cmp	r2, #0
 8081314:	d1fb      	bne.n	808130e <strlen+0x2>
 8081316:	1a18      	subs	r0, r3, r0
 8081318:	3801      	subs	r0, #1
 808131a:	4770      	bx	lr

0808131c <strncpy>:
 808131c:	4603      	mov	r3, r0
 808131e:	b510      	push	{r4, lr}
 8081320:	3901      	subs	r1, #1
 8081322:	b132      	cbz	r2, 8081332 <strncpy+0x16>
 8081324:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8081328:	3a01      	subs	r2, #1
 808132a:	f803 4b01 	strb.w	r4, [r3], #1
 808132e:	2c00      	cmp	r4, #0
 8081330:	d1f7      	bne.n	8081322 <strncpy+0x6>
 8081332:	2100      	movs	r1, #0
 8081334:	441a      	add	r2, r3
 8081336:	4293      	cmp	r3, r2
 8081338:	d100      	bne.n	808133c <strncpy+0x20>
 808133a:	bd10      	pop	{r4, pc}
 808133c:	f803 1b01 	strb.w	r1, [r3], #1
 8081340:	e7f9      	b.n	8081336 <strncpy+0x1a>

08081342 <is_leap_year>:
 8081342:	0783      	lsls	r3, r0, #30
 8081344:	d10f      	bne.n	8081366 <is_leap_year+0x24>
 8081346:	2264      	movs	r2, #100	; 0x64
 8081348:	fb90 f3f2 	sdiv	r3, r0, r2
 808134c:	fb02 0313 	mls	r3, r2, r3, r0
 8081350:	b95b      	cbnz	r3, 808136a <is_leap_year+0x28>
 8081352:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8081356:	fb90 f3f2 	sdiv	r3, r0, r2
 808135a:	fb02 0013 	mls	r0, r2, r3, r0
 808135e:	fab0 f080 	clz	r0, r0
 8081362:	0940      	lsrs	r0, r0, #5
 8081364:	4770      	bx	lr
 8081366:	2000      	movs	r0, #0
 8081368:	4770      	bx	lr
 808136a:	2001      	movs	r0, #1
 808136c:	4770      	bx	lr

0808136e <first_day>:
 808136e:	b570      	push	{r4, r5, r6, lr}
 8081370:	2104      	movs	r1, #4
 8081372:	4604      	mov	r4, r0
 8081374:	f240 75b1 	movw	r5, #1969	; 0x7b1
 8081378:	2607      	movs	r6, #7
 808137a:	3c01      	subs	r4, #1
 808137c:	42ac      	cmp	r4, r5
 808137e:	dc01      	bgt.n	8081384 <first_day+0x16>
 8081380:	4608      	mov	r0, r1
 8081382:	bd70      	pop	{r4, r5, r6, pc}
 8081384:	4620      	mov	r0, r4
 8081386:	f7ff ffdc 	bl	8081342 <is_leap_year>
 808138a:	f201 116d 	addw	r1, r1, #365	; 0x16d
 808138e:	4401      	add	r1, r0
 8081390:	fb91 f0f6 	sdiv	r0, r1, r6
 8081394:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8081398:	1a09      	subs	r1, r1, r0
 808139a:	e7ee      	b.n	808137a <first_day+0xc>

0808139c <match_string>:
 808139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80813a0:	4605      	mov	r5, r0
 80813a2:	460e      	mov	r6, r1
 80813a4:	4690      	mov	r8, r2
 80813a6:	2400      	movs	r4, #0
 80813a8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80813ac:	b910      	cbnz	r0, 80813b4 <match_string+0x18>
 80813ae:	f04f 34ff 	mov.w	r4, #4294967295
 80813b2:	e00d      	b.n	80813d0 <match_string+0x34>
 80813b4:	f7ff ffaa 	bl	808130c <strlen>
 80813b8:	4643      	mov	r3, r8
 80813ba:	4607      	mov	r7, r0
 80813bc:	4602      	mov	r2, r0
 80813be:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80813c2:	6828      	ldr	r0, [r5, #0]
 80813c4:	f000 fcaa 	bl	8081d1c <strncasecmp_l>
 80813c8:	b928      	cbnz	r0, 80813d6 <match_string+0x3a>
 80813ca:	6828      	ldr	r0, [r5, #0]
 80813cc:	4438      	add	r0, r7
 80813ce:	6028      	str	r0, [r5, #0]
 80813d0:	4620      	mov	r0, r4
 80813d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80813d6:	3401      	adds	r4, #1
 80813d8:	e7e6      	b.n	80813a8 <match_string+0xc>
	...

080813dc <strptime_l>:
 80813dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80813e0:	460f      	mov	r7, r1
 80813e2:	4614      	mov	r4, r2
 80813e4:	461e      	mov	r6, r3
 80813e6:	2500      	movs	r5, #0
 80813e8:	b087      	sub	sp, #28
 80813ea:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8081734 <strptime_l+0x358>
 80813ee:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8081738 <strptime_l+0x35c>
 80813f2:	9001      	str	r0, [sp, #4]
 80813f4:	783a      	ldrb	r2, [r7, #0]
 80813f6:	bb6a      	cbnz	r2, 8081454 <strptime_l+0x78>
 80813f8:	f005 0307 	and.w	r3, r5, #7
 80813fc:	2b07      	cmp	r3, #7
 80813fe:	f040 8309 	bne.w	8081a14 <strptime_l+0x638>
 8081402:	06ea      	lsls	r2, r5, #27
 8081404:	d412      	bmi.n	808142c <strptime_l+0x50>
 8081406:	4bc5      	ldr	r3, [pc, #788]	; (808171c <strptime_l+0x340>)
 8081408:	6926      	ldr	r6, [r4, #16]
 808140a:	6960      	ldr	r0, [r4, #20]
 808140c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8081410:	68e3      	ldr	r3, [r4, #12]
 8081412:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8081416:	4419      	add	r1, r3
 8081418:	61e1      	str	r1, [r4, #28]
 808141a:	f7ff ff92 	bl	8081342 <is_leap_year>
 808141e:	b108      	cbz	r0, 8081424 <strptime_l+0x48>
 8081420:	2e01      	cmp	r6, #1
 8081422:	dc01      	bgt.n	8081428 <strptime_l+0x4c>
 8081424:	3901      	subs	r1, #1
 8081426:	61e1      	str	r1, [r4, #28]
 8081428:	f045 0510 	orr.w	r5, r5, #16
 808142c:	f005 051c 	and.w	r5, r5, #28
 8081430:	2d14      	cmp	r5, #20
 8081432:	d10d      	bne.n	8081450 <strptime_l+0x74>
 8081434:	6960      	ldr	r0, [r4, #20]
 8081436:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808143a:	f7ff ff98 	bl	808136e <first_day>
 808143e:	69e3      	ldr	r3, [r4, #28]
 8081440:	4418      	add	r0, r3
 8081442:	2307      	movs	r3, #7
 8081444:	fb90 f3f3 	sdiv	r3, r0, r3
 8081448:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808144c:	1ac0      	subs	r0, r0, r3
 808144e:	61a0      	str	r0, [r4, #24]
 8081450:	9801      	ldr	r0, [sp, #4]
 8081452:	e221      	b.n	8081898 <strptime_l+0x4bc>
 8081454:	f812 3009 	ldrb.w	r3, [r2, r9]
 8081458:	0718      	lsls	r0, r3, #28
 808145a:	d50a      	bpl.n	8081472 <strptime_l+0x96>
 808145c:	9b01      	ldr	r3, [sp, #4]
 808145e:	781a      	ldrb	r2, [r3, #0]
 8081460:	f819 2002 	ldrb.w	r2, [r9, r2]
 8081464:	0711      	lsls	r1, r2, #28
 8081466:	d401      	bmi.n	808146c <strptime_l+0x90>
 8081468:	3701      	adds	r7, #1
 808146a:	e7c3      	b.n	80813f4 <strptime_l+0x18>
 808146c:	3301      	adds	r3, #1
 808146e:	9301      	str	r3, [sp, #4]
 8081470:	e7f4      	b.n	808145c <strptime_l+0x80>
 8081472:	2a25      	cmp	r2, #37	; 0x25
 8081474:	f040 82ca 	bne.w	8081a0c <strptime_l+0x630>
 8081478:	787b      	ldrb	r3, [r7, #1]
 808147a:	2b00      	cmp	r3, #0
 808147c:	f000 82c6 	beq.w	8081a0c <strptime_l+0x630>
 8081480:	2b45      	cmp	r3, #69	; 0x45
 8081482:	f000 80bb 	beq.w	80815fc <strptime_l+0x220>
 8081486:	2b4f      	cmp	r3, #79	; 0x4f
 8081488:	f000 80b8 	beq.w	80815fc <strptime_l+0x220>
 808148c:	3701      	adds	r7, #1
 808148e:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 8081492:	b2d1      	uxtb	r1, r2
 8081494:	2954      	cmp	r1, #84	; 0x54
 8081496:	f200 82ac 	bhi.w	80819f2 <strptime_l+0x616>
 808149a:	2a54      	cmp	r2, #84	; 0x54
 808149c:	f200 82a9 	bhi.w	80819f2 <strptime_l+0x616>
 80814a0:	a101      	add	r1, pc, #4	; (adr r1, 80814a8 <strptime_l+0xcc>)
 80814a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80814a6:	bf00      	nop
 80814a8:	080819eb 	.word	0x080819eb
 80814ac:	080819f3 	.word	0x080819f3
 80814b0:	080819f3 	.word	0x080819f3
 80814b4:	080819f3 	.word	0x080819f3
 80814b8:	080819f3 	.word	0x080819f3
 80814bc:	080819f3 	.word	0x080819f3
 80814c0:	080819f3 	.word	0x080819f3
 80814c4:	080819f3 	.word	0x080819f3
 80814c8:	080819f3 	.word	0x080819f3
 80814cc:	080819f3 	.word	0x080819f3
 80814d0:	080819f3 	.word	0x080819f3
 80814d4:	080819f3 	.word	0x080819f3
 80814d8:	080819f3 	.word	0x080819f3
 80814dc:	080819f3 	.word	0x080819f3
 80814e0:	080819f3 	.word	0x080819f3
 80814e4:	080819f3 	.word	0x080819f3
 80814e8:	080819f3 	.word	0x080819f3
 80814ec:	080819f3 	.word	0x080819f3
 80814f0:	080819f3 	.word	0x080819f3
 80814f4:	080819f3 	.word	0x080819f3
 80814f8:	080819f3 	.word	0x080819f3
 80814fc:	080819f3 	.word	0x080819f3
 8081500:	080819f3 	.word	0x080819f3
 8081504:	080819f3 	.word	0x080819f3
 8081508:	080819f3 	.word	0x080819f3
 808150c:	080819f3 	.word	0x080819f3
 8081510:	080819f3 	.word	0x080819f3
 8081514:	080819f3 	.word	0x080819f3
 8081518:	0808160b 	.word	0x0808160b
 808151c:	08081629 	.word	0x08081629
 8081520:	08081647 	.word	0x08081647
 8081524:	0808168d 	.word	0x0808168d
 8081528:	080819f3 	.word	0x080819f3
 808152c:	080816bf 	.word	0x080816bf
 8081530:	080819f3 	.word	0x080819f3
 8081534:	080816e3 	.word	0x080816e3
 8081538:	080816ff 	.word	0x080816ff
 808153c:	080819f3 	.word	0x080819f3
 8081540:	080819f3 	.word	0x080819f3
 8081544:	080819f3 	.word	0x080819f3
 8081548:	0808177d 	.word	0x0808177d
 808154c:	080819f3 	.word	0x080819f3
 8081550:	080819f3 	.word	0x080819f3
 8081554:	080819f3 	.word	0x080819f3
 8081558:	080819f3 	.word	0x080819f3
 808155c:	080817dd 	.word	0x080817dd
 8081560:	0808183f 	.word	0x0808183f
 8081564:	0808185f 	.word	0x0808185f
 8081568:	0808189f 	.word	0x0808189f
 808156c:	080818dd 	.word	0x080818dd
 8081570:	0808192f 	.word	0x0808192f
 8081574:	080819a1 	.word	0x080819a1
 8081578:	080819cd 	.word	0x080819cd
 808157c:	08081469 	.word	0x08081469
 8081580:	080819f3 	.word	0x080819f3
 8081584:	080819f3 	.word	0x080819f3
 8081588:	080819f3 	.word	0x080819f3
 808158c:	080819f3 	.word	0x080819f3
 8081590:	080819f3 	.word	0x080819f3
 8081594:	080819f3 	.word	0x080819f3
 8081598:	08081623 	.word	0x08081623
 808159c:	08081641 	.word	0x08081641
 80815a0:	0808166f 	.word	0x0808166f
 80815a4:	0808169f 	.word	0x0808169f
 80815a8:	0808169f 	.word	0x0808169f
 80815ac:	080819f3 	.word	0x080819f3
 80815b0:	080819f3 	.word	0x080819f3
 80815b4:	08081641 	.word	0x08081641
 80815b8:	080819f3 	.word	0x080819f3
 80815bc:	0808173d 	.word	0x0808173d
 80815c0:	080816e3 	.word	0x080816e3
 80815c4:	080816ff 	.word	0x080816ff
 80815c8:	0808175f 	.word	0x0808175f
 80815cc:	08081797 	.word	0x08081797
 80815d0:	080819f3 	.word	0x080819f3
 80815d4:	080817a3 	.word	0x080817a3
 80815d8:	080819f3 	.word	0x080819f3
 80815dc:	080817c5 	.word	0x080817c5
 80815e0:	080817e5 	.word	0x080817e5
 80815e4:	08081857 	.word	0x08081857
 80815e8:	08081867 	.word	0x08081867
 80815ec:	080819f3 	.word	0x080819f3
 80815f0:	08081883 	.word	0x08081883
 80815f4:	08081997 	.word	0x08081997
 80815f8:	080819ab 	.word	0x080819ab
 80815fc:	78bb      	ldrb	r3, [r7, #2]
 80815fe:	1cba      	adds	r2, r7, #2
 8081600:	2b00      	cmp	r3, #0
 8081602:	f000 81f1 	beq.w	80819e8 <strptime_l+0x60c>
 8081606:	4617      	mov	r7, r2
 8081608:	e741      	b.n	808148e <strptime_l+0xb2>
 808160a:	4632      	mov	r2, r6
 808160c:	4944      	ldr	r1, [pc, #272]	; (8081720 <strptime_l+0x344>)
 808160e:	a801      	add	r0, sp, #4
 8081610:	f7ff fec4 	bl	808139c <match_string>
 8081614:	2800      	cmp	r0, #0
 8081616:	f2c0 813e 	blt.w	8081896 <strptime_l+0x4ba>
 808161a:	61a0      	str	r0, [r4, #24]
 808161c:	f045 0508 	orr.w	r5, r5, #8
 8081620:	e722      	b.n	8081468 <strptime_l+0x8c>
 8081622:	4632      	mov	r2, r6
 8081624:	493f      	ldr	r1, [pc, #252]	; (8081724 <strptime_l+0x348>)
 8081626:	e7f2      	b.n	808160e <strptime_l+0x232>
 8081628:	4632      	mov	r2, r6
 808162a:	493f      	ldr	r1, [pc, #252]	; (8081728 <strptime_l+0x34c>)
 808162c:	a801      	add	r0, sp, #4
 808162e:	f7ff feb5 	bl	808139c <match_string>
 8081632:	2800      	cmp	r0, #0
 8081634:	f2c0 812f 	blt.w	8081896 <strptime_l+0x4ba>
 8081638:	6120      	str	r0, [r4, #16]
 808163a:	f045 0502 	orr.w	r5, r5, #2
 808163e:	e713      	b.n	8081468 <strptime_l+0x8c>
 8081640:	4632      	mov	r2, r6
 8081642:	4641      	mov	r1, r8
 8081644:	e7f2      	b.n	808162c <strptime_l+0x250>
 8081646:	4633      	mov	r3, r6
 8081648:	220a      	movs	r2, #10
 808164a:	9801      	ldr	r0, [sp, #4]
 808164c:	a903      	add	r1, sp, #12
 808164e:	f000 fa9f 	bl	8081b90 <strtol_l>
 8081652:	9a03      	ldr	r2, [sp, #12]
 8081654:	9b01      	ldr	r3, [sp, #4]
 8081656:	429a      	cmp	r2, r3
 8081658:	f000 811d 	beq.w	8081896 <strptime_l+0x4ba>
 808165c:	2364      	movs	r3, #100	; 0x64
 808165e:	4358      	muls	r0, r3
 8081660:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8081664:	6160      	str	r0, [r4, #20]
 8081666:	9201      	str	r2, [sp, #4]
 8081668:	f045 0504 	orr.w	r5, r5, #4
 808166c:	e6fc      	b.n	8081468 <strptime_l+0x8c>
 808166e:	4633      	mov	r3, r6
 8081670:	4622      	mov	r2, r4
 8081672:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
 8081676:	9801      	ldr	r0, [sp, #4]
 8081678:	f7ff feb0 	bl	80813dc <strptime_l>
 808167c:	9003      	str	r0, [sp, #12]
 808167e:	2800      	cmp	r0, #0
 8081680:	f000 8109 	beq.w	8081896 <strptime_l+0x4ba>
 8081684:	9001      	str	r0, [sp, #4]
 8081686:	f045 050f 	orr.w	r5, r5, #15
 808168a:	e6ed      	b.n	8081468 <strptime_l+0x8c>
 808168c:	4633      	mov	r3, r6
 808168e:	4622      	mov	r2, r4
 8081690:	4926      	ldr	r1, [pc, #152]	; (808172c <strptime_l+0x350>)
 8081692:	9801      	ldr	r0, [sp, #4]
 8081694:	f7ff fea2 	bl	80813dc <strptime_l>
 8081698:	9003      	str	r0, [sp, #12]
 808169a:	b9f0      	cbnz	r0, 80816da <strptime_l+0x2fe>
 808169c:	e0fb      	b.n	8081896 <strptime_l+0x4ba>
 808169e:	4633      	mov	r3, r6
 80816a0:	220a      	movs	r2, #10
 80816a2:	9801      	ldr	r0, [sp, #4]
 80816a4:	a903      	add	r1, sp, #12
 80816a6:	f000 fa73 	bl	8081b90 <strtol_l>
 80816aa:	9b03      	ldr	r3, [sp, #12]
 80816ac:	9a01      	ldr	r2, [sp, #4]
 80816ae:	4293      	cmp	r3, r2
 80816b0:	f000 80f1 	beq.w	8081896 <strptime_l+0x4ba>
 80816b4:	60e0      	str	r0, [r4, #12]
 80816b6:	9301      	str	r3, [sp, #4]
 80816b8:	f045 0501 	orr.w	r5, r5, #1
 80816bc:	e6d4      	b.n	8081468 <strptime_l+0x8c>
 80816be:	4633      	mov	r3, r6
 80816c0:	4622      	mov	r2, r4
 80816c2:	491b      	ldr	r1, [pc, #108]	; (8081730 <strptime_l+0x354>)
 80816c4:	9801      	ldr	r0, [sp, #4]
 80816c6:	f7ff fe89 	bl	80813dc <strptime_l>
 80816ca:	9003      	str	r0, [sp, #12]
 80816cc:	2800      	cmp	r0, #0
 80816ce:	f000 80e2 	beq.w	8081896 <strptime_l+0x4ba>
 80816d2:	9b01      	ldr	r3, [sp, #4]
 80816d4:	4298      	cmp	r0, r3
 80816d6:	f000 80de 	beq.w	8081896 <strptime_l+0x4ba>
 80816da:	9001      	str	r0, [sp, #4]
 80816dc:	f045 0507 	orr.w	r5, r5, #7
 80816e0:	e6c2      	b.n	8081468 <strptime_l+0x8c>
 80816e2:	4633      	mov	r3, r6
 80816e4:	220a      	movs	r2, #10
 80816e6:	9801      	ldr	r0, [sp, #4]
 80816e8:	a903      	add	r1, sp, #12
 80816ea:	f000 fa51 	bl	8081b90 <strtol_l>
 80816ee:	9b03      	ldr	r3, [sp, #12]
 80816f0:	9a01      	ldr	r2, [sp, #4]
 80816f2:	4293      	cmp	r3, r2
 80816f4:	f000 80cf 	beq.w	8081896 <strptime_l+0x4ba>
 80816f8:	60a0      	str	r0, [r4, #8]
 80816fa:	9301      	str	r3, [sp, #4]
 80816fc:	e6b4      	b.n	8081468 <strptime_l+0x8c>
 80816fe:	4633      	mov	r3, r6
 8081700:	220a      	movs	r2, #10
 8081702:	9801      	ldr	r0, [sp, #4]
 8081704:	a903      	add	r1, sp, #12
 8081706:	f000 fa43 	bl	8081b90 <strtol_l>
 808170a:	9b03      	ldr	r3, [sp, #12]
 808170c:	9a01      	ldr	r2, [sp, #4]
 808170e:	4293      	cmp	r3, r2
 8081710:	f000 80c1 	beq.w	8081896 <strptime_l+0x4ba>
 8081714:	280c      	cmp	r0, #12
 8081716:	bf08      	it	eq
 8081718:	2000      	moveq	r0, #0
 808171a:	e7ed      	b.n	80816f8 <strptime_l+0x31c>
 808171c:	0808200c 	.word	0x0808200c
 8081720:	080821d4 	.word	0x080821d4
 8081724:	080821b8 	.word	0x080821b8
 8081728:	08082188 	.word	0x08082188
 808172c:	08081dc2 	.word	0x08081dc2
 8081730:	08081ff1 	.word	0x08081ff1
 8081734:	08082255 	.word	0x08082255
 8081738:	08082158 	.word	0x08082158
 808173c:	4633      	mov	r3, r6
 808173e:	220a      	movs	r2, #10
 8081740:	9801      	ldr	r0, [sp, #4]
 8081742:	a903      	add	r1, sp, #12
 8081744:	f000 fa24 	bl	8081b90 <strtol_l>
 8081748:	9b03      	ldr	r3, [sp, #12]
 808174a:	9a01      	ldr	r2, [sp, #4]
 808174c:	4293      	cmp	r3, r2
 808174e:	f000 80a2 	beq.w	8081896 <strptime_l+0x4ba>
 8081752:	3801      	subs	r0, #1
 8081754:	61e0      	str	r0, [r4, #28]
 8081756:	9301      	str	r3, [sp, #4]
 8081758:	f045 0510 	orr.w	r5, r5, #16
 808175c:	e684      	b.n	8081468 <strptime_l+0x8c>
 808175e:	4633      	mov	r3, r6
 8081760:	220a      	movs	r2, #10
 8081762:	9801      	ldr	r0, [sp, #4]
 8081764:	a903      	add	r1, sp, #12
 8081766:	f000 fa13 	bl	8081b90 <strtol_l>
 808176a:	9b03      	ldr	r3, [sp, #12]
 808176c:	9a01      	ldr	r2, [sp, #4]
 808176e:	4293      	cmp	r3, r2
 8081770:	f000 8091 	beq.w	8081896 <strptime_l+0x4ba>
 8081774:	3801      	subs	r0, #1
 8081776:	6120      	str	r0, [r4, #16]
 8081778:	9301      	str	r3, [sp, #4]
 808177a:	e75e      	b.n	808163a <strptime_l+0x25e>
 808177c:	4633      	mov	r3, r6
 808177e:	220a      	movs	r2, #10
 8081780:	9801      	ldr	r0, [sp, #4]
 8081782:	a903      	add	r1, sp, #12
 8081784:	f000 fa04 	bl	8081b90 <strtol_l>
 8081788:	9b03      	ldr	r3, [sp, #12]
 808178a:	9a01      	ldr	r2, [sp, #4]
 808178c:	4293      	cmp	r3, r2
 808178e:	f000 8082 	beq.w	8081896 <strptime_l+0x4ba>
 8081792:	6060      	str	r0, [r4, #4]
 8081794:	e7b1      	b.n	80816fa <strptime_l+0x31e>
 8081796:	9b01      	ldr	r3, [sp, #4]
 8081798:	781a      	ldrb	r2, [r3, #0]
 808179a:	2a0a      	cmp	r2, #10
 808179c:	f000 812e 	beq.w	80819fc <strptime_l+0x620>
 80817a0:	e079      	b.n	8081896 <strptime_l+0x4ba>
 80817a2:	4632      	mov	r2, r6
 80817a4:	49ac      	ldr	r1, [pc, #688]	; (8081a58 <strptime_l+0x67c>)
 80817a6:	a801      	add	r0, sp, #4
 80817a8:	f7ff fdf8 	bl	808139c <match_string>
 80817ac:	2800      	cmp	r0, #0
 80817ae:	db72      	blt.n	8081896 <strptime_l+0x4ba>
 80817b0:	68a3      	ldr	r3, [r4, #8]
 80817b2:	b92b      	cbnz	r3, 80817c0 <strptime_l+0x3e4>
 80817b4:	2801      	cmp	r0, #1
 80817b6:	f47f ae57 	bne.w	8081468 <strptime_l+0x8c>
 80817ba:	230c      	movs	r3, #12
 80817bc:	60a3      	str	r3, [r4, #8]
 80817be:	e653      	b.n	8081468 <strptime_l+0x8c>
 80817c0:	330c      	adds	r3, #12
 80817c2:	e7fb      	b.n	80817bc <strptime_l+0x3e0>
 80817c4:	4633      	mov	r3, r6
 80817c6:	4622      	mov	r2, r4
 80817c8:	f8d8 10e4 	ldr.w	r1, [r8, #228]	; 0xe4
 80817cc:	9801      	ldr	r0, [sp, #4]
 80817ce:	f7ff fe05 	bl	80813dc <strptime_l>
 80817d2:	9003      	str	r0, [sp, #12]
 80817d4:	2800      	cmp	r0, #0
 80817d6:	d05e      	beq.n	8081896 <strptime_l+0x4ba>
 80817d8:	9001      	str	r0, [sp, #4]
 80817da:	e645      	b.n	8081468 <strptime_l+0x8c>
 80817dc:	4633      	mov	r3, r6
 80817de:	4622      	mov	r2, r4
 80817e0:	499e      	ldr	r1, [pc, #632]	; (8081a5c <strptime_l+0x680>)
 80817e2:	e7f3      	b.n	80817cc <strptime_l+0x3f0>
 80817e4:	f7fe ff06 	bl	80805f4 <__errno>
 80817e8:	6805      	ldr	r5, [r0, #0]
 80817ea:	f7fe ff03 	bl	80805f4 <__errno>
 80817ee:	2300      	movs	r3, #0
 80817f0:	220a      	movs	r2, #10
 80817f2:	6003      	str	r3, [r0, #0]
 80817f4:	a903      	add	r1, sp, #12
 80817f6:	4633      	mov	r3, r6
 80817f8:	9801      	ldr	r0, [sp, #4]
 80817fa:	f000 fa73 	bl	8081ce4 <strtoll_l>
 80817fe:	4682      	mov	sl, r0
 8081800:	468b      	mov	fp, r1
 8081802:	9a03      	ldr	r2, [sp, #12]
 8081804:	9b01      	ldr	r3, [sp, #4]
 8081806:	e9cd ab04 	strd	sl, fp, [sp, #16]
 808180a:	429a      	cmp	r2, r3
 808180c:	d043      	beq.n	8081896 <strptime_l+0x4ba>
 808180e:	f7fe fef1 	bl	80805f4 <__errno>
 8081812:	6803      	ldr	r3, [r0, #0]
 8081814:	2b00      	cmp	r3, #0
 8081816:	d13e      	bne.n	8081896 <strptime_l+0x4ba>
 8081818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808181c:	455b      	cmp	r3, fp
 808181e:	bf08      	it	eq
 8081820:	4552      	cmpeq	r2, sl
 8081822:	d138      	bne.n	8081896 <strptime_l+0x4ba>
 8081824:	4621      	mov	r1, r4
 8081826:	a804      	add	r0, sp, #16
 8081828:	f7fe fc00 	bl	808002c <localtime_r>
 808182c:	4284      	cmp	r4, r0
 808182e:	d132      	bne.n	8081896 <strptime_l+0x4ba>
 8081830:	f7fe fee0 	bl	80805f4 <__errno>
 8081834:	9b03      	ldr	r3, [sp, #12]
 8081836:	6005      	str	r5, [r0, #0]
 8081838:	251f      	movs	r5, #31
 808183a:	9301      	str	r3, [sp, #4]
 808183c:	e614      	b.n	8081468 <strptime_l+0x8c>
 808183e:	4633      	mov	r3, r6
 8081840:	220a      	movs	r2, #10
 8081842:	9801      	ldr	r0, [sp, #4]
 8081844:	a903      	add	r1, sp, #12
 8081846:	f000 f9a3 	bl	8081b90 <strtol_l>
 808184a:	9b03      	ldr	r3, [sp, #12]
 808184c:	9a01      	ldr	r2, [sp, #4]
 808184e:	4293      	cmp	r3, r2
 8081850:	d021      	beq.n	8081896 <strptime_l+0x4ba>
 8081852:	6020      	str	r0, [r4, #0]
 8081854:	e751      	b.n	80816fa <strptime_l+0x31e>
 8081856:	9b01      	ldr	r3, [sp, #4]
 8081858:	781a      	ldrb	r2, [r3, #0]
 808185a:	2a09      	cmp	r2, #9
 808185c:	e79e      	b.n	808179c <strptime_l+0x3c0>
 808185e:	4633      	mov	r3, r6
 8081860:	4622      	mov	r2, r4
 8081862:	497f      	ldr	r1, [pc, #508]	; (8081a60 <strptime_l+0x684>)
 8081864:	e7b2      	b.n	80817cc <strptime_l+0x3f0>
 8081866:	4633      	mov	r3, r6
 8081868:	220a      	movs	r2, #10
 808186a:	9801      	ldr	r0, [sp, #4]
 808186c:	a903      	add	r1, sp, #12
 808186e:	f000 f98f 	bl	8081b90 <strtol_l>
 8081872:	9b03      	ldr	r3, [sp, #12]
 8081874:	9a01      	ldr	r2, [sp, #4]
 8081876:	4293      	cmp	r3, r2
 8081878:	d00d      	beq.n	8081896 <strptime_l+0x4ba>
 808187a:	3801      	subs	r0, #1
 808187c:	61a0      	str	r0, [r4, #24]
 808187e:	9301      	str	r3, [sp, #4]
 8081880:	e6cc      	b.n	808161c <strptime_l+0x240>
 8081882:	4633      	mov	r3, r6
 8081884:	220a      	movs	r2, #10
 8081886:	9801      	ldr	r0, [sp, #4]
 8081888:	a903      	add	r1, sp, #12
 808188a:	f000 f981 	bl	8081b90 <strtol_l>
 808188e:	9b03      	ldr	r3, [sp, #12]
 8081890:	9a01      	ldr	r2, [sp, #4]
 8081892:	4293      	cmp	r3, r2
 8081894:	d1f2      	bne.n	808187c <strptime_l+0x4a0>
 8081896:	2000      	movs	r0, #0
 8081898:	b007      	add	sp, #28
 808189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808189e:	4633      	mov	r3, r6
 80818a0:	220a      	movs	r2, #10
 80818a2:	9801      	ldr	r0, [sp, #4]
 80818a4:	a903      	add	r1, sp, #12
 80818a6:	f000 f973 	bl	8081b90 <strtol_l>
 80818aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80818ae:	9b01      	ldr	r3, [sp, #4]
 80818b0:	4682      	mov	sl, r0
 80818b2:	459b      	cmp	fp, r3
 80818b4:	d0ef      	beq.n	8081896 <strptime_l+0x4ba>
 80818b6:	6960      	ldr	r0, [r4, #20]
 80818b8:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80818bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80818c0:	f7ff fd55 	bl	808136e <first_day>
 80818c4:	69a3      	ldr	r3, [r4, #24]
 80818c6:	4453      	add	r3, sl
 80818c8:	1a1b      	subs	r3, r3, r0
 80818ca:	2b00      	cmp	r3, #0
 80818cc:	61e3      	str	r3, [r4, #28]
 80818ce:	da02      	bge.n	80818d6 <strptime_l+0x4fa>
 80818d0:	61a0      	str	r0, [r4, #24]
 80818d2:	2300      	movs	r3, #0
 80818d4:	61e3      	str	r3, [r4, #28]
 80818d6:	f8cd b004 	str.w	fp, [sp, #4]
 80818da:	e73d      	b.n	8081758 <strptime_l+0x37c>
 80818dc:	4633      	mov	r3, r6
 80818de:	220a      	movs	r2, #10
 80818e0:	9801      	ldr	r0, [sp, #4]
 80818e2:	a903      	add	r1, sp, #12
 80818e4:	f000 f954 	bl	8081b90 <strtol_l>
 80818e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80818ec:	9b01      	ldr	r3, [sp, #4]
 80818ee:	4682      	mov	sl, r0
 80818f0:	459b      	cmp	fp, r3
 80818f2:	d0d0      	beq.n	8081896 <strptime_l+0x4ba>
 80818f4:	6960      	ldr	r0, [r4, #20]
 80818f6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80818fa:	f7ff fd38 	bl	808136e <first_day>
 80818fe:	2307      	movs	r3, #7
 8081900:	1d82      	adds	r2, r0, #6
 8081902:	fb92 f3f3 	sdiv	r3, r2, r3
 8081906:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808190a:	1ad2      	subs	r2, r2, r3
 808190c:	2a03      	cmp	r2, #3
 808190e:	bfcc      	ite	gt
 8081910:	2300      	movgt	r3, #0
 8081912:	2307      	movle	r3, #7
 8081914:	f10a 30ff 	add.w	r0, sl, #4294967295
 8081918:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 808191c:	4403      	add	r3, r0
 808191e:	69a0      	ldr	r0, [r4, #24]
 8081920:	4403      	add	r3, r0
 8081922:	1a9b      	subs	r3, r3, r2
 8081924:	2b00      	cmp	r3, #0
 8081926:	61e3      	str	r3, [r4, #28]
 8081928:	dad5      	bge.n	80818d6 <strptime_l+0x4fa>
 808192a:	61a2      	str	r2, [r4, #24]
 808192c:	e7d1      	b.n	80818d2 <strptime_l+0x4f6>
 808192e:	4633      	mov	r3, r6
 8081930:	220a      	movs	r2, #10
 8081932:	9801      	ldr	r0, [sp, #4]
 8081934:	a903      	add	r1, sp, #12
 8081936:	f000 f92b 	bl	8081b90 <strtol_l>
 808193a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 808193e:	9b01      	ldr	r3, [sp, #4]
 8081940:	4683      	mov	fp, r0
 8081942:	459a      	cmp	sl, r3
 8081944:	d0a7      	beq.n	8081896 <strptime_l+0x4ba>
 8081946:	6960      	ldr	r0, [r4, #20]
 8081948:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808194c:	f7ff fd0f 	bl	808136e <first_day>
 8081950:	f04f 0c07 	mov.w	ip, #7
 8081954:	1d83      	adds	r3, r0, #6
 8081956:	fb93 f2fc 	sdiv	r2, r3, ip
 808195a:	69a1      	ldr	r1, [r4, #24]
 808195c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8081960:	3106      	adds	r1, #6
 8081962:	1a9b      	subs	r3, r3, r2
 8081964:	fb91 f2fc 	sdiv	r2, r1, ip
 8081968:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 808196c:	1a89      	subs	r1, r1, r2
 808196e:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 8081972:	440a      	add	r2, r1
 8081974:	1ad2      	subs	r2, r2, r3
 8081976:	2a00      	cmp	r2, #0
 8081978:	61e2      	str	r2, [r4, #28]
 808197a:	da09      	bge.n	8081990 <strptime_l+0x5b4>
 808197c:	3301      	adds	r3, #1
 808197e:	fb93 fcfc 	sdiv	ip, r3, ip
 8081982:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 8081986:	eba3 030c 	sub.w	r3, r3, ip
 808198a:	61a3      	str	r3, [r4, #24]
 808198c:	2300      	movs	r3, #0
 808198e:	61e3      	str	r3, [r4, #28]
 8081990:	f8cd a004 	str.w	sl, [sp, #4]
 8081994:	e6e0      	b.n	8081758 <strptime_l+0x37c>
 8081996:	4633      	mov	r3, r6
 8081998:	4622      	mov	r2, r4
 808199a:	f8d8 109c 	ldr.w	r1, [r8, #156]	; 0x9c
 808199e:	e678      	b.n	8081692 <strptime_l+0x2b6>
 80819a0:	4633      	mov	r3, r6
 80819a2:	4622      	mov	r2, r4
 80819a4:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
 80819a8:	e710      	b.n	80817cc <strptime_l+0x3f0>
 80819aa:	4633      	mov	r3, r6
 80819ac:	220a      	movs	r2, #10
 80819ae:	9801      	ldr	r0, [sp, #4]
 80819b0:	a903      	add	r1, sp, #12
 80819b2:	f000 f8ed 	bl	8081b90 <strtol_l>
 80819b6:	9b03      	ldr	r3, [sp, #12]
 80819b8:	9a01      	ldr	r2, [sp, #4]
 80819ba:	4293      	cmp	r3, r2
 80819bc:	f43f af6b 	beq.w	8081896 <strptime_l+0x4ba>
 80819c0:	2845      	cmp	r0, #69	; 0x45
 80819c2:	dc00      	bgt.n	80819c6 <strptime_l+0x5ea>
 80819c4:	3064      	adds	r0, #100	; 0x64
 80819c6:	6160      	str	r0, [r4, #20]
 80819c8:	9301      	str	r3, [sp, #4]
 80819ca:	e64d      	b.n	8081668 <strptime_l+0x28c>
 80819cc:	4633      	mov	r3, r6
 80819ce:	220a      	movs	r2, #10
 80819d0:	9801      	ldr	r0, [sp, #4]
 80819d2:	a903      	add	r1, sp, #12
 80819d4:	f000 f8dc 	bl	8081b90 <strtol_l>
 80819d8:	9b03      	ldr	r3, [sp, #12]
 80819da:	9a01      	ldr	r2, [sp, #4]
 80819dc:	4293      	cmp	r3, r2
 80819de:	f43f af5a 	beq.w	8081896 <strptime_l+0x4ba>
 80819e2:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 80819e6:	e7ee      	b.n	80819c6 <strptime_l+0x5ea>
 80819e8:	3701      	adds	r7, #1
 80819ea:	9b01      	ldr	r3, [sp, #4]
 80819ec:	781a      	ldrb	r2, [r3, #0]
 80819ee:	2a25      	cmp	r2, #37	; 0x25
 80819f0:	e6d4      	b.n	808179c <strptime_l+0x3c0>
 80819f2:	9a01      	ldr	r2, [sp, #4]
 80819f4:	7811      	ldrb	r1, [r2, #0]
 80819f6:	2925      	cmp	r1, #37	; 0x25
 80819f8:	d102      	bne.n	8081a00 <strptime_l+0x624>
 80819fa:	9b01      	ldr	r3, [sp, #4]
 80819fc:	3301      	adds	r3, #1
 80819fe:	e67c      	b.n	80816fa <strptime_l+0x31e>
 8081a00:	1c51      	adds	r1, r2, #1
 8081a02:	9101      	str	r1, [sp, #4]
 8081a04:	7852      	ldrb	r2, [r2, #1]
 8081a06:	429a      	cmp	r2, r3
 8081a08:	d0f7      	beq.n	80819fa <strptime_l+0x61e>
 8081a0a:	e744      	b.n	8081896 <strptime_l+0x4ba>
 8081a0c:	9b01      	ldr	r3, [sp, #4]
 8081a0e:	7819      	ldrb	r1, [r3, #0]
 8081a10:	4291      	cmp	r1, r2
 8081a12:	e6c3      	b.n	808179c <strptime_l+0x3c0>
 8081a14:	f005 0314 	and.w	r3, r5, #20
 8081a18:	2b14      	cmp	r3, #20
 8081a1a:	f47f ad07 	bne.w	808142c <strptime_l+0x50>
 8081a1e:	f015 0302 	ands.w	r3, r5, #2
 8081a22:	d103      	bne.n	8081a2c <strptime_l+0x650>
 8081a24:	69e1      	ldr	r1, [r4, #28]
 8081a26:	291e      	cmp	r1, #30
 8081a28:	dc1e      	bgt.n	8081a68 <strptime_l+0x68c>
 8081a2a:	6123      	str	r3, [r4, #16]
 8081a2c:	07eb      	lsls	r3, r5, #31
 8081a2e:	f53f acfd 	bmi.w	808142c <strptime_l+0x50>
 8081a32:	6926      	ldr	r6, [r4, #16]
 8081a34:	4b0b      	ldr	r3, [pc, #44]	; (8081a64 <strptime_l+0x688>)
 8081a36:	69e1      	ldr	r1, [r4, #28]
 8081a38:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8081a3c:	6960      	ldr	r0, [r4, #20]
 8081a3e:	1ac9      	subs	r1, r1, r3
 8081a40:	60e1      	str	r1, [r4, #12]
 8081a42:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8081a46:	f7ff fc7c 	bl	8081342 <is_leap_year>
 8081a4a:	b110      	cbz	r0, 8081a52 <strptime_l+0x676>
 8081a4c:	2e01      	cmp	r6, #1
 8081a4e:	f73f aced 	bgt.w	808142c <strptime_l+0x50>
 8081a52:	3101      	adds	r1, #1
 8081a54:	60e1      	str	r1, [r4, #12]
 8081a56:	e4e9      	b.n	808142c <strptime_l+0x50>
 8081a58:	080821fc 	.word	0x080821fc
 8081a5c:	08081ffa 	.word	0x08081ffa
 8081a60:	08082000 	.word	0x08082000
 8081a64:	0808200c 	.word	0x0808200c
 8081a68:	6960      	ldr	r0, [r4, #20]
 8081a6a:	4e08      	ldr	r6, [pc, #32]	; (8081a8c <strptime_l+0x6b0>)
 8081a6c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8081a70:	f7ff fc67 	bl	8081342 <is_leap_year>
 8081a74:	2302      	movs	r3, #2
 8081a76:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8081a7a:	4402      	add	r2, r0
 8081a7c:	4291      	cmp	r1, r2
 8081a7e:	db02      	blt.n	8081a86 <strptime_l+0x6aa>
 8081a80:	3301      	adds	r3, #1
 8081a82:	2b0c      	cmp	r3, #12
 8081a84:	d1f7      	bne.n	8081a76 <strptime_l+0x69a>
 8081a86:	3b01      	subs	r3, #1
 8081a88:	e7cf      	b.n	8081a2a <strptime_l+0x64e>
 8081a8a:	bf00      	nop
 8081a8c:	0808200c 	.word	0x0808200c

08081a90 <strptime>:
 8081a90:	4b01      	ldr	r3, [pc, #4]	; (8081a98 <strptime+0x8>)
 8081a92:	f7ff bca3 	b.w	80813dc <strptime_l>
 8081a96:	bf00      	nop
 8081a98:	20000068 	.word	0x20000068

08081a9c <_strtol_l.isra.0>:
 8081a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081aa0:	468c      	mov	ip, r1
 8081aa2:	4686      	mov	lr, r0
 8081aa4:	4e39      	ldr	r6, [pc, #228]	; (8081b8c <_strtol_l.isra.0+0xf0>)
 8081aa6:	4660      	mov	r0, ip
 8081aa8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8081aac:	5da5      	ldrb	r5, [r4, r6]
 8081aae:	f015 0508 	ands.w	r5, r5, #8
 8081ab2:	d1f8      	bne.n	8081aa6 <_strtol_l.isra.0+0xa>
 8081ab4:	2c2d      	cmp	r4, #45	; 0x2d
 8081ab6:	d133      	bne.n	8081b20 <_strtol_l.isra.0+0x84>
 8081ab8:	f04f 0801 	mov.w	r8, #1
 8081abc:	f89c 4000 	ldrb.w	r4, [ip]
 8081ac0:	f100 0c02 	add.w	ip, r0, #2
 8081ac4:	2b00      	cmp	r3, #0
 8081ac6:	d05c      	beq.n	8081b82 <_strtol_l.isra.0+0xe6>
 8081ac8:	2b10      	cmp	r3, #16
 8081aca:	d10c      	bne.n	8081ae6 <_strtol_l.isra.0+0x4a>
 8081acc:	2c30      	cmp	r4, #48	; 0x30
 8081ace:	d10a      	bne.n	8081ae6 <_strtol_l.isra.0+0x4a>
 8081ad0:	f89c 0000 	ldrb.w	r0, [ip]
 8081ad4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8081ad8:	2858      	cmp	r0, #88	; 0x58
 8081ada:	d14d      	bne.n	8081b78 <_strtol_l.isra.0+0xdc>
 8081adc:	2310      	movs	r3, #16
 8081ade:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8081ae2:	f10c 0c02 	add.w	ip, ip, #2
 8081ae6:	2600      	movs	r6, #0
 8081ae8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8081aec:	3f01      	subs	r7, #1
 8081aee:	fbb7 f9f3 	udiv	r9, r7, r3
 8081af2:	4630      	mov	r0, r6
 8081af4:	fb03 7a19 	mls	sl, r3, r9, r7
 8081af8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8081afc:	2d09      	cmp	r5, #9
 8081afe:	d818      	bhi.n	8081b32 <_strtol_l.isra.0+0x96>
 8081b00:	462c      	mov	r4, r5
 8081b02:	42a3      	cmp	r3, r4
 8081b04:	dd24      	ble.n	8081b50 <_strtol_l.isra.0+0xb4>
 8081b06:	1c75      	adds	r5, r6, #1
 8081b08:	d007      	beq.n	8081b1a <_strtol_l.isra.0+0x7e>
 8081b0a:	4581      	cmp	r9, r0
 8081b0c:	d31d      	bcc.n	8081b4a <_strtol_l.isra.0+0xae>
 8081b0e:	d101      	bne.n	8081b14 <_strtol_l.isra.0+0x78>
 8081b10:	45a2      	cmp	sl, r4
 8081b12:	db1a      	blt.n	8081b4a <_strtol_l.isra.0+0xae>
 8081b14:	2601      	movs	r6, #1
 8081b16:	fb00 4003 	mla	r0, r0, r3, r4
 8081b1a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8081b1e:	e7eb      	b.n	8081af8 <_strtol_l.isra.0+0x5c>
 8081b20:	2c2b      	cmp	r4, #43	; 0x2b
 8081b22:	bf08      	it	eq
 8081b24:	f89c 4000 	ldrbeq.w	r4, [ip]
 8081b28:	46a8      	mov	r8, r5
 8081b2a:	bf08      	it	eq
 8081b2c:	f100 0c02 	addeq.w	ip, r0, #2
 8081b30:	e7c8      	b.n	8081ac4 <_strtol_l.isra.0+0x28>
 8081b32:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8081b36:	2d19      	cmp	r5, #25
 8081b38:	d801      	bhi.n	8081b3e <_strtol_l.isra.0+0xa2>
 8081b3a:	3c37      	subs	r4, #55	; 0x37
 8081b3c:	e7e1      	b.n	8081b02 <_strtol_l.isra.0+0x66>
 8081b3e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8081b42:	2d19      	cmp	r5, #25
 8081b44:	d804      	bhi.n	8081b50 <_strtol_l.isra.0+0xb4>
 8081b46:	3c57      	subs	r4, #87	; 0x57
 8081b48:	e7db      	b.n	8081b02 <_strtol_l.isra.0+0x66>
 8081b4a:	f04f 36ff 	mov.w	r6, #4294967295
 8081b4e:	e7e4      	b.n	8081b1a <_strtol_l.isra.0+0x7e>
 8081b50:	1c73      	adds	r3, r6, #1
 8081b52:	d106      	bne.n	8081b62 <_strtol_l.isra.0+0xc6>
 8081b54:	2322      	movs	r3, #34	; 0x22
 8081b56:	4638      	mov	r0, r7
 8081b58:	f8ce 3000 	str.w	r3, [lr]
 8081b5c:	b942      	cbnz	r2, 8081b70 <_strtol_l.isra.0+0xd4>
 8081b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081b62:	f1b8 0f00 	cmp.w	r8, #0
 8081b66:	d000      	beq.n	8081b6a <_strtol_l.isra.0+0xce>
 8081b68:	4240      	negs	r0, r0
 8081b6a:	2a00      	cmp	r2, #0
 8081b6c:	d0f7      	beq.n	8081b5e <_strtol_l.isra.0+0xc2>
 8081b6e:	b10e      	cbz	r6, 8081b74 <_strtol_l.isra.0+0xd8>
 8081b70:	f10c 31ff 	add.w	r1, ip, #4294967295
 8081b74:	6011      	str	r1, [r2, #0]
 8081b76:	e7f2      	b.n	8081b5e <_strtol_l.isra.0+0xc2>
 8081b78:	2430      	movs	r4, #48	; 0x30
 8081b7a:	2b00      	cmp	r3, #0
 8081b7c:	d1b3      	bne.n	8081ae6 <_strtol_l.isra.0+0x4a>
 8081b7e:	2308      	movs	r3, #8
 8081b80:	e7b1      	b.n	8081ae6 <_strtol_l.isra.0+0x4a>
 8081b82:	2c30      	cmp	r4, #48	; 0x30
 8081b84:	d0a4      	beq.n	8081ad0 <_strtol_l.isra.0+0x34>
 8081b86:	230a      	movs	r3, #10
 8081b88:	e7ad      	b.n	8081ae6 <_strtol_l.isra.0+0x4a>
 8081b8a:	bf00      	nop
 8081b8c:	08082255 	.word	0x08082255

08081b90 <strtol_l>:
 8081b90:	4613      	mov	r3, r2
 8081b92:	460a      	mov	r2, r1
 8081b94:	4601      	mov	r1, r0
 8081b96:	4802      	ldr	r0, [pc, #8]	; (8081ba0 <strtol_l+0x10>)
 8081b98:	6800      	ldr	r0, [r0, #0]
 8081b9a:	f7ff bf7f 	b.w	8081a9c <_strtol_l.isra.0>
 8081b9e:	bf00      	nop
 8081ba0:	20000004 	.word	0x20000004

08081ba4 <strtol>:
 8081ba4:	4613      	mov	r3, r2
 8081ba6:	460a      	mov	r2, r1
 8081ba8:	4601      	mov	r1, r0
 8081baa:	4802      	ldr	r0, [pc, #8]	; (8081bb4 <strtol+0x10>)
 8081bac:	6800      	ldr	r0, [r0, #0]
 8081bae:	f7ff bf75 	b.w	8081a9c <_strtol_l.isra.0>
 8081bb2:	bf00      	nop
 8081bb4:	20000004 	.word	0x20000004

08081bb8 <_strtoll_l.isra.0>:
 8081bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081bbc:	4688      	mov	r8, r1
 8081bbe:	461f      	mov	r7, r3
 8081bc0:	460d      	mov	r5, r1
 8081bc2:	4691      	mov	r9, r2
 8081bc4:	b087      	sub	sp, #28
 8081bc6:	4a46      	ldr	r2, [pc, #280]	; (8081ce0 <_strtoll_l.isra.0+0x128>)
 8081bc8:	9005      	str	r0, [sp, #20]
 8081bca:	462b      	mov	r3, r5
 8081bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8081bd0:	5ca6      	ldrb	r6, [r4, r2]
 8081bd2:	f016 0608 	ands.w	r6, r6, #8
 8081bd6:	d1f8      	bne.n	8081bca <_strtoll_l.isra.0+0x12>
 8081bd8:	2c2d      	cmp	r4, #45	; 0x2d
 8081bda:	d147      	bne.n	8081c6c <_strtoll_l.isra.0+0xb4>
 8081bdc:	2601      	movs	r6, #1
 8081bde:	782c      	ldrb	r4, [r5, #0]
 8081be0:	1c9d      	adds	r5, r3, #2
 8081be2:	2f00      	cmp	r7, #0
 8081be4:	d077      	beq.n	8081cd6 <_strtoll_l.isra.0+0x11e>
 8081be6:	2f10      	cmp	r7, #16
 8081be8:	d109      	bne.n	8081bfe <_strtoll_l.isra.0+0x46>
 8081bea:	2c30      	cmp	r4, #48	; 0x30
 8081bec:	d107      	bne.n	8081bfe <_strtoll_l.isra.0+0x46>
 8081bee:	782b      	ldrb	r3, [r5, #0]
 8081bf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8081bf4:	2b58      	cmp	r3, #88	; 0x58
 8081bf6:	d169      	bne.n	8081ccc <_strtoll_l.isra.0+0x114>
 8081bf8:	2710      	movs	r7, #16
 8081bfa:	786c      	ldrb	r4, [r5, #1]
 8081bfc:	3502      	adds	r5, #2
 8081bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8081c02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8081c06:	1990      	adds	r0, r2, r6
 8081c08:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8081c0c:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8081c10:	463a      	mov	r2, r7
 8081c12:	465b      	mov	r3, fp
 8081c14:	e9cd 0100 	strd	r0, r1, [sp]
 8081c18:	f7ff fade 	bl	80811d8 <__aeabi_uldivmod>
 8081c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8081c20:	46ba      	mov	sl, r7
 8081c22:	4696      	mov	lr, r2
 8081c24:	2300      	movs	r3, #0
 8081c26:	2000      	movs	r0, #0
 8081c28:	2100      	movs	r1, #0
 8081c2a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8081c2e:	f1bc 0f09 	cmp.w	ip, #9
 8081c32:	d820      	bhi.n	8081c76 <_strtoll_l.isra.0+0xbe>
 8081c34:	4664      	mov	r4, ip
 8081c36:	42a7      	cmp	r7, r4
 8081c38:	dd2e      	ble.n	8081c98 <_strtoll_l.isra.0+0xe0>
 8081c3a:	1c5a      	adds	r2, r3, #1
 8081c3c:	d013      	beq.n	8081c66 <_strtoll_l.isra.0+0xae>
 8081c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8081c42:	428b      	cmp	r3, r1
 8081c44:	bf08      	it	eq
 8081c46:	4282      	cmpeq	r2, r0
 8081c48:	d323      	bcc.n	8081c92 <_strtoll_l.isra.0+0xda>
 8081c4a:	d101      	bne.n	8081c50 <_strtoll_l.isra.0+0x98>
 8081c4c:	45a6      	cmp	lr, r4
 8081c4e:	db20      	blt.n	8081c92 <_strtoll_l.isra.0+0xda>
 8081c50:	fb0a f301 	mul.w	r3, sl, r1
 8081c54:	fb00 330b 	mla	r3, r0, fp, r3
 8081c58:	fbaa 0100 	umull	r0, r1, sl, r0
 8081c5c:	4419      	add	r1, r3
 8081c5e:	2301      	movs	r3, #1
 8081c60:	1900      	adds	r0, r0, r4
 8081c62:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8081c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8081c6a:	e7de      	b.n	8081c2a <_strtoll_l.isra.0+0x72>
 8081c6c:	2c2b      	cmp	r4, #43	; 0x2b
 8081c6e:	bf04      	itt	eq
 8081c70:	782c      	ldrbeq	r4, [r5, #0]
 8081c72:	1c9d      	addeq	r5, r3, #2
 8081c74:	e7b5      	b.n	8081be2 <_strtoll_l.isra.0+0x2a>
 8081c76:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8081c7a:	f1bc 0f19 	cmp.w	ip, #25
 8081c7e:	d801      	bhi.n	8081c84 <_strtoll_l.isra.0+0xcc>
 8081c80:	3c37      	subs	r4, #55	; 0x37
 8081c82:	e7d8      	b.n	8081c36 <_strtoll_l.isra.0+0x7e>
 8081c84:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8081c88:	f1bc 0f19 	cmp.w	ip, #25
 8081c8c:	d804      	bhi.n	8081c98 <_strtoll_l.isra.0+0xe0>
 8081c8e:	3c57      	subs	r4, #87	; 0x57
 8081c90:	e7d1      	b.n	8081c36 <_strtoll_l.isra.0+0x7e>
 8081c92:	f04f 33ff 	mov.w	r3, #4294967295
 8081c96:	e7e6      	b.n	8081c66 <_strtoll_l.isra.0+0xae>
 8081c98:	1c5a      	adds	r2, r3, #1
 8081c9a:	d10a      	bne.n	8081cb2 <_strtoll_l.isra.0+0xfa>
 8081c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8081ca0:	2322      	movs	r3, #34	; 0x22
 8081ca2:	9a05      	ldr	r2, [sp, #20]
 8081ca4:	6013      	str	r3, [r2, #0]
 8081ca6:	f1b9 0f00 	cmp.w	r9, #0
 8081caa:	d10a      	bne.n	8081cc2 <_strtoll_l.isra.0+0x10a>
 8081cac:	b007      	add	sp, #28
 8081cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081cb2:	b116      	cbz	r6, 8081cba <_strtoll_l.isra.0+0x102>
 8081cb4:	4240      	negs	r0, r0
 8081cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081cba:	f1b9 0f00 	cmp.w	r9, #0
 8081cbe:	d0f5      	beq.n	8081cac <_strtoll_l.isra.0+0xf4>
 8081cc0:	b10b      	cbz	r3, 8081cc6 <_strtoll_l.isra.0+0x10e>
 8081cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8081cc6:	f8c9 8000 	str.w	r8, [r9]
 8081cca:	e7ef      	b.n	8081cac <_strtoll_l.isra.0+0xf4>
 8081ccc:	2430      	movs	r4, #48	; 0x30
 8081cce:	2f00      	cmp	r7, #0
 8081cd0:	d195      	bne.n	8081bfe <_strtoll_l.isra.0+0x46>
 8081cd2:	2708      	movs	r7, #8
 8081cd4:	e793      	b.n	8081bfe <_strtoll_l.isra.0+0x46>
 8081cd6:	2c30      	cmp	r4, #48	; 0x30
 8081cd8:	d089      	beq.n	8081bee <_strtoll_l.isra.0+0x36>
 8081cda:	270a      	movs	r7, #10
 8081cdc:	e78f      	b.n	8081bfe <_strtoll_l.isra.0+0x46>
 8081cde:	bf00      	nop
 8081ce0:	08082255 	.word	0x08082255

08081ce4 <strtoll_l>:
 8081ce4:	4613      	mov	r3, r2
 8081ce6:	460a      	mov	r2, r1
 8081ce8:	4601      	mov	r1, r0
 8081cea:	4802      	ldr	r0, [pc, #8]	; (8081cf4 <strtoll_l+0x10>)
 8081cec:	6800      	ldr	r0, [r0, #0]
 8081cee:	f7ff bf63 	b.w	8081bb8 <_strtoll_l.isra.0>
 8081cf2:	bf00      	nop
 8081cf4:	20000004 	.word	0x20000004

08081cf8 <__ascii_mbtowc>:
 8081cf8:	b082      	sub	sp, #8
 8081cfa:	b901      	cbnz	r1, 8081cfe <__ascii_mbtowc+0x6>
 8081cfc:	a901      	add	r1, sp, #4
 8081cfe:	b142      	cbz	r2, 8081d12 <__ascii_mbtowc+0x1a>
 8081d00:	b14b      	cbz	r3, 8081d16 <__ascii_mbtowc+0x1e>
 8081d02:	7813      	ldrb	r3, [r2, #0]
 8081d04:	600b      	str	r3, [r1, #0]
 8081d06:	7812      	ldrb	r2, [r2, #0]
 8081d08:	1e10      	subs	r0, r2, #0
 8081d0a:	bf18      	it	ne
 8081d0c:	2001      	movne	r0, #1
 8081d0e:	b002      	add	sp, #8
 8081d10:	4770      	bx	lr
 8081d12:	4610      	mov	r0, r2
 8081d14:	e7fb      	b.n	8081d0e <__ascii_mbtowc+0x16>
 8081d16:	f06f 0001 	mvn.w	r0, #1
 8081d1a:	e7f8      	b.n	8081d0e <__ascii_mbtowc+0x16>

08081d1c <strncasecmp_l>:
 8081d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081d20:	4605      	mov	r5, r0
 8081d22:	460f      	mov	r7, r1
 8081d24:	4698      	mov	r8, r3
 8081d26:	eb00 0902 	add.w	r9, r0, r2
 8081d2a:	454d      	cmp	r5, r9
 8081d2c:	d00f      	beq.n	8081d4e <strncasecmp_l+0x32>
 8081d2e:	4641      	mov	r1, r8
 8081d30:	f815 0b01 	ldrb.w	r0, [r5], #1
 8081d34:	f000 f80e 	bl	8081d54 <tolower_l>
 8081d38:	4641      	mov	r1, r8
 8081d3a:	4604      	mov	r4, r0
 8081d3c:	f817 0b01 	ldrb.w	r0, [r7], #1
 8081d40:	f000 f808 	bl	8081d54 <tolower_l>
 8081d44:	4606      	mov	r6, r0
 8081d46:	1a20      	subs	r0, r4, r0
 8081d48:	d102      	bne.n	8081d50 <strncasecmp_l+0x34>
 8081d4a:	2e00      	cmp	r6, #0
 8081d4c:	d1ed      	bne.n	8081d2a <strncasecmp_l+0xe>
 8081d4e:	2000      	movs	r0, #0
 8081d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081d54 <tolower_l>:
 8081d54:	4b03      	ldr	r3, [pc, #12]	; (8081d64 <tolower_l+0x10>)
 8081d56:	5cc3      	ldrb	r3, [r0, r3]
 8081d58:	f003 0303 	and.w	r3, r3, #3
 8081d5c:	2b01      	cmp	r3, #1
 8081d5e:	bf08      	it	eq
 8081d60:	3020      	addeq	r0, #32
 8081d62:	4770      	bx	lr
 8081d64:	08082255 	.word	0x08082255

08081d68 <__ascii_wctomb>:
 8081d68:	4603      	mov	r3, r0
 8081d6a:	4608      	mov	r0, r1
 8081d6c:	b141      	cbz	r1, 8081d80 <__ascii_wctomb+0x18>
 8081d6e:	2aff      	cmp	r2, #255	; 0xff
 8081d70:	d904      	bls.n	8081d7c <__ascii_wctomb+0x14>
 8081d72:	228a      	movs	r2, #138	; 0x8a
 8081d74:	f04f 30ff 	mov.w	r0, #4294967295
 8081d78:	601a      	str	r2, [r3, #0]
 8081d7a:	4770      	bx	lr
 8081d7c:	2001      	movs	r0, #1
 8081d7e:	700a      	strb	r2, [r1, #0]
 8081d80:	4770      	bx	lr

08081d82 <link_code_end>:
	...

08081d84 <dynalib_user>:
 8081d84:	005d 0808 009d 0808 00c5 0808 00c9 0808     ]...............
 8081d94:	0000 0000 3230 302f 2f31 3132 302c 2f32     ....02/01/21,02/
 8081da4:	3031 322f 2c31 3036 7300 7a69 2065 666f     10/21,60.size of
 8081db4:	7320 7274 6e69 2067 7369 2520 0064 6d25      string is %d.%m
 8081dc4:	252f 2f64 7925 6d00 6165 7573 6572 656d     /%d/%y.measureme
 8081dd4:	746e 7020 7265 6f69 2064 203d 6c25 0064     nt period = %ld.
 8081de4:	7473 7261 4474 7461 3a65 0020 6e65 4464     startDate: .endD
 8081df4:	7461 3a65 0020 6974 656d 6e20 776f 203a     ate: .time now: 
 8081e04:	7400 6d69 2065 7266 6d6f 6520 646e 7420     .time from end t
 8081e14:	206f 6f6e 3a77 2520 0064 7473 7261 4474     o now: %d.startD
 8081e24:	7461 5565 696e 3a78 2520 646c 202c 6e65     ateUnix: %ld, en
 8081e34:	4464 7461 5565 696e 3a78 2520 646c 202c     dDateUnix: %ld, 
 8081e44:	7065 636f 3a68 2520 0064 756e 626d 7265     epoch: %d.number
 8081e54:	6f20 2066 6572 6f63 6472 2073 6f74 7320      of records to s
 8081e64:	696b 3a70 2520 2c64 6e20 6d75 6562 2072     kip: %d, number 
 8081e74:	666f 7220 6365 726f 7364 7420 206f 7570     of records to pu
 8081e84:	6c62 7369 3a68 2520 0064 7061 0070 005a     blish: %d.app.Z.
 8081e94:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 8081ea4:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 8081eb4:	6373 6974 656d 0000                         sctime..

08081ebc <_ZTV9IPAddress>:
	...
 8081ec4:	0ced 0808 0cdd 0808 0cdf 0808               ............

08081ed0 <_ZTV9USBSerial>:
	...
 8081ed8:	0d81 0808 0de7 0808 0dbf 0808 07b5 0808     ................
 8081ee8:	0db1 0808 0d83 0808 0d93 0808 0de1 0808     ................
 8081ef8:	0da3 0808 0d7d 0808                         ....}...

08081f00 <_ZTVN5spark13CellularClassE>:
	...
 8081f08:	0f73 0808 0f69 0808 0f5f 0808 0ee5 0808     s...i..._.......
 8081f18:	0f53 0808 010b 0808 0f47 0808 0f3f 0808     S.......G...?...
 8081f28:	0f35 0808 0f2b 0808 0eef 0808               5...+.......

08081f34 <_ZTV11USARTSerial>:
	...
 8081f3c:	0fad 0808 1015 0808 0ff1 0808 07b5 0808     ................
 8081f4c:	0fc1 0808 0fdd 0808 0fcf 0808 0feb 0808     ................
 8081f5c:	0faf 0808 0fb3 0808                         ........

08081f64 <_ZTVN5spark12NetworkClassE>:
	...
 8081f6c:	10d5 0808 10df 0808 10e9 0808 10f3 0808     ................
 8081f7c:	10fd 0808 1109 0808 1115 0808 1121 0808     ............!...
 8081f8c:	1129 0808 1133 0808 113d 0808 2e25 7333     )...3...=...%.3s
 8081f9c:	2520 332e 2573 6433 2520 322e 3a64 2e25      %.3s%3d %.2d:%.
 8081fac:	6432 253a 322e 2064 6425 000a               2d:%.2d %d..

08081fb8 <day_name.4782>:
 8081fb8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8081fc8:	6972 6153                                    riSat

08081fcd <mon_name.4783>:
 8081fcd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8081fdd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8081fed:	4476 6365 5925 252d 2d6d 6425 2500 3a48     vDec%Y-%m-%d.%H:
 8081ffd:	4d25 2500 3a48 4d25 253a 0053 0000           %M.%H:%M:%S....

0808200c <_DAYS_BEFORE_MONTH>:
 808200c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
 808201c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
 808202c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...
 808203c:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808204c:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808205c:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808206c:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808207c:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808208c:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808209c:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80820ac:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80820bc:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80820cc:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80820dc:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80820ec:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80820fc:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808210c:	7574 6472 7961 2500 2061 6225 2520 2065     turday.%a %b %e 
 808211c:	4825 253a 3a4d 5325 2520 0059 4d41 5000     %H:%M:%S %Y.AM.P
 808212c:	004d 6125 2520 2062 6525 2520 3a48 4d25     M.%a %b %e %H:%M
 808213c:	253a 2053 5a25 2520 0059 646d 2500 3a49     :%S %Z %Y.md.%I:
 808214c:	4d25 253a 2053 7025 0000 0000               %M:%S %p....

08082158 <_C_time_locale>:
 8082158:	203c 0808 2040 0808 2044 0808 2048 0808     < ..@ ..D ..H ..
 8082168:	204c 0808 2050 0808 2054 0808 2058 0808     L ..P ..T ..X ..
 8082178:	205c 0808 2060 0808 2064 0808 2068 0808     \ ..` ..d ..h ..
 8082188:	206c 0808 2074 0808 207d 0808 2083 0808     l ..t ..} ... ..
 8082198:	204c 0808 2089 0808 208e 0808 2093 0808     L ... ... ... ..
 80821a8:	209a 0808 20a4 0808 20ac 0808 20b5 0808     . ... ... ... ..
 80821b8:	20be 0808 20c2 0808 20c6 0808 20ca 0808     . ... ... ... ..
 80821c8:	20ce 0808 20d2 0808 20d6 0808 20da 0808     . ... ... ... ..
 80821d8:	20e1 0808 20e8 0808 20f0 0808 20fa 0808     . ... ... ... ..
 80821e8:	2103 0808 210a 0808 2000 0808 1dc2 0808     .!...!... ......
 80821f8:	2113 0808 2128 0808 212b 0808 212e 0808     .!..(!..+!...!..
 8082208:	206c 0808 2074 0808 207d 0808 2083 0808     l ..t ..} ... ..
 8082218:	204c 0808 2089 0808 208e 0808 2093 0808     L ... ... ... ..
 8082228:	209a 0808 20a4 0808 20ac 0808 20b5 0808     . ... ... ... ..
 8082238:	2146 0808 2149 0808 1fb7 0808 1fb7 0808     F!..I!..........
 8082248:	1fb7 0808 1fb7 0808 1fb7 0808               ............

08082254 <_ctype_>:
 8082254:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8082264:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8082274:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8082284:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8082294:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80822a4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80822b4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80822c4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80822d4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 8082354:	4300 5000 534f 5849 2e00                     .C.POSIX...

0808235f <link_const_variable_data_end>:
	...

08082360 <link_constructors_location>:
 8082360:	08080635 	.word	0x08080635
 8082364:	080808d1 	.word	0x080808d1
 8082368:	08080b25 	.word	0x08080b25
 808236c:	08080b5d 	.word	0x08080b5d
 8082370:	08080f7d 	.word	0x08080f7d
 8082374:	08081185 	.word	0x08081185
 8082378:	08081199 	.word	0x08081199

0808237c <link_constructors_end>:
 808237c:	00000000 	.word	0x00000000
