
c:/Users/karaw/Documents/aquarealtime/resdev/software/testProject/target/2.0.1/boron/testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c94  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5cb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5c4  000d5cb4  0001e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  2003e62c  2003e62c  0002e62c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5d1c  000d5d1c  00025d1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5d44  000d5d44  00025d44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f7ab0  00000000  00000000  00025d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010ed7  00000000  00000000  0011d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026ad5  00000000  00000000  0012e6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020e0  00000000  00000000  001551a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006e10  00000000  00000000  00157284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00016527  00000000  00000000  0015e094  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bd37  00000000  00000000  001745bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105d6e  00000000  00000000  001a02f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000059b8  00000000  00000000  002a6060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc7d 	bl	d592c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc85 	bl	d5948 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c4 	.word	0x2003e5c4
   d4048:	000d5cb4 	.word	0x000d5cb4
   d404c:	2003e62c 	.word	0x2003e62c
   d4050:	2003e62c 	.word	0x2003e62c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fef1 	bl	d4e44 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5c80 	.word	0x000d5c80
   d407c:	000d5ca4 	.word	0x000d5ca4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b83d 	b.w	d40fe <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f917 	bl	d42b8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 be9b 	b.w	d4dc8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb17 	b.w	d46c4 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bb1d 	b.w	d46d4 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fb0f 	bl	d46d4 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c8:	f000 fde7 	bl	d4c9a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr

000d40d6 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40d6:	b40e      	push	{r1, r2, r3}
   d40d8:	b503      	push	{r0, r1, lr}
   d40da:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40dc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40de:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40e2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40e4:	f000 fdd9 	bl	d4c9a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40e8:	b002      	add	sp, #8
   d40ea:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ee:	b003      	add	sp, #12
   d40f0:	4770      	bx	lr

000d40f2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40f2:	2300      	movs	r3, #0
   d40f4:	6840      	ldr	r0, [r0, #4]
   d40f6:	461a      	mov	r2, r3
   d40f8:	4619      	mov	r1, r3
   d40fa:	f000 ba8b 	b.w	d4614 <network_off>

000d40fe <setup>:
#define CELL_CONNECT_SECONDS 90 // time to attempt to connect to cellular
#define CLOUD_CONNECT_SECONDS 60 // time to attempt to connect cloud
#define CLOUD_WAIT 30

// setup() runs once, when the device is first turned on.
void setup() {
   d40fe:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d4100:	f001 fa50 	bl	d55a4 <_Z16_fetch_usbserialv>

}
   d4104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   d4108:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d410c:	f001 ba3e 	b.w	d558c <_ZN9USBSerial5beginEl>

000d4110 <_Z8ULPSleepi>:
  ULPSleep(60);
}

// Sleep ULP way
int ULPSleep(int seconds)
{
   d4110:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (seconds <= 0)
   d4112:	1e05      	subs	r5, r0, #0
{
   d4114:	b08b      	sub	sp, #44	; 0x2c
  if (seconds <= 0)
   d4116:	dc05      	bgt.n	d4124 <_Z8ULPSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
   d4118:	f001 fa44 	bl	d55a4 <_Z16_fetch_usbserialv>
   d411c:	4924      	ldr	r1, [pc, #144]	; (d41b0 <_Z8ULPSleepi+0xa0>)
   d411e:	f7ff ffda 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
    seconds = 10;
   d4122:	250a      	movs	r5, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
   d4124:	f001 fa3e 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4128:	233c      	movs	r3, #60	; 0x3c
   d412a:	4922      	ldr	r1, [pc, #136]	; (d41b4 <_Z8ULPSleepi+0xa4>)
   d412c:	fbb5 f2f3 	udiv	r2, r5, r3
   d4130:	fb03 5312 	mls	r3, r3, r2, r5
   d4134:	f7ff ffcf 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4138:	ab05      	add	r3, sp, #20
   d413a:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d413c:	2301      	movs	r3, #1
   d413e:	2600      	movs	r6, #0
   d4140:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.size = sizeof(hal_sleep_config_t);
   d4144:	4f1c      	ldr	r7, [pc, #112]	; (d41b8 <_Z8ULPSleepi+0xa8>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4146:	491d      	ldr	r1, [pc, #116]	; (d41bc <_Z8ULPSleepi+0xac>)
              valid_(true) {
   d4148:	f8ad 6019 	strh.w	r6, [sp, #25]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d414c:	2302      	movs	r3, #2
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d414e:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4150:	e9cd 6607 	strd	r6, r6, [sp, #28]
              valid_(true) {
   d4154:	f88d 601b 	strb.w	r6, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
   d4158:	9705      	str	r7, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d415a:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d415e:	f001 fbd2 	bl	d5906 <_ZnwjRKSt9nothrow_t>
   d4162:	4604      	mov	r4, r0
   d4164:	b1e8      	cbz	r0, d41a2 <_Z8ULPSleepi+0x92>
   d4166:	2210      	movs	r2, #16
   d4168:	4631      	mov	r1, r6
   d416a:	f001 fbed 	bl	d5948 <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d416e:	2304      	movs	r3, #4
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
        .duration(seconds * 1000);  // Takes msec
   d4170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4174:	80a3      	strh	r3, [r4, #4]
   d4176:	4345      	muls	r5, r0
            wakeupSource->base.next = config_.wakeup_sources;
   d4178:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d417a:	6027      	str	r7, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   d417c:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d417e:	60e5      	str	r5, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4180:	9408      	str	r4, [sp, #32]
  System.sleep(config);
   d4182:	a801      	add	r0, sp, #4
   d4184:	a904      	add	r1, sp, #16
   d4186:	f000 fb49 	bl	d481c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d418a:	9801      	ldr	r0, [sp, #4]
   d418c:	b108      	cbz	r0, d4192 <_Z8ULPSleepi+0x82>
            free(wakeupSource_);
   d418e:	f000 faa1 	bl	d46d4 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4192:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
   d4194:	b140      	cbz	r0, d41a8 <_Z8ULPSleepi+0x98>
            auto next = wakeupSource->next;
   d4196:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4198:	210c      	movs	r1, #12
   d419a:	f001 fbb2 	bl	d5902 <_ZdlPvj>
            wakeupSource = next;
   d419e:	4620      	mov	r0, r4
        while (wakeupSource) {
   d41a0:	e7f8      	b.n	d4194 <_Z8ULPSleepi+0x84>
                valid_ = false;
   d41a2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   d41a6:	e7ec      	b.n	d4182 <_Z8ULPSleepi+0x72>
  return 1;
}
   d41a8:	2001      	movs	r0, #1
   d41aa:	b00b      	add	sp, #44	; 0x2c
   d41ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41ae:	bf00      	nop
   d41b0:	000d5a10 	.word	0x000d5a10
   d41b4:	000d5a45 	.word	0x000d5a45
   d41b8:	00030010 	.word	0x00030010
   d41bc:	000d5c7c 	.word	0x000d5c7c

000d41c0 <_Z13connectToCelli>:

// Connect to cellular
// Returns 1 if fail, 0 if success. Pass it seconds
int connectToCell(int timeoutSec)
{
   d41c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        network_on(*this, 0, 0, NULL);
   d41c2:	4d1a      	ldr	r5, [pc, #104]	; (d422c <_Z13connectToCelli+0x6c>)
   d41c4:	4607      	mov	r7, r0
  int secondCounter = 0;
  Serial.printf("Connecting to cellular ... ");
   d41c6:	f001 f9ed 	bl	d55a4 <_Z16_fetch_usbserialv>
   d41ca:	4919      	ldr	r1, [pc, #100]	; (d4230 <_Z13connectToCelli+0x70>)
   d41cc:	f7ff ff75 	bl	d40ba <_ZN5Print6printfEPKcz>
   d41d0:	2300      	movs	r3, #0
   d41d2:	461a      	mov	r2, r3
   d41d4:	4619      	mov	r1, r3
   d41d6:	6868      	ldr	r0, [r5, #4]
   d41d8:	f000 fa14 	bl	d4604 <network_on>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41dc:	2300      	movs	r3, #0
   d41de:	6868      	ldr	r0, [r5, #4]
   d41e0:	461a      	mov	r2, r3
   d41e2:	4619      	mov	r1, r3
   d41e4:	f000 f9ee 	bl	d45c4 <network_connect>
  int secondCounter = 0;
   d41e8:	2400      	movs	r4, #0
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d41ea:	2200      	movs	r2, #0
   d41ec:	6868      	ldr	r0, [r5, #4]
   d41ee:	4611      	mov	r1, r2
   d41f0:	f000 fa00 	bl	d45f4 <network_ready>
  Cellular.on();
  Cellular.connect();
  while (Cellular.ready() == false)
   d41f4:	4606      	mov	r6, r0
   d41f6:	b990      	cbnz	r0, d421e <_Z13connectToCelli+0x5e>
  {
    secondCounter ++;
   d41f8:	3401      	adds	r4, #1
    if (secondCounter >= timeoutSec)
   d41fa:	42bc      	cmp	r4, r7
   d41fc:	db0a      	blt.n	d4214 <_Z13connectToCelli+0x54>
    {
      Serial.printlnf("Couldn't connect to cellular.");
   d41fe:	f001 f9d1 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4202:	490c      	ldr	r1, [pc, #48]	; (d4234 <_Z13connectToCelli+0x74>)
   d4204:	f7ff ff67 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
      Cellular.off();
   d4208:	4808      	ldr	r0, [pc, #32]	; (d422c <_Z13connectToCelli+0x6c>)
   d420a:	f7ff ff72 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
   d420e:	4634      	mov	r4, r6
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
}
   d4210:	4620      	mov	r0, r4
   d4212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
   d4214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4218:	f000 fd82 	bl	d4d20 <delay>
  while (Cellular.ready() == false)
   d421c:	e7e5      	b.n	d41ea <_Z13connectToCelli+0x2a>
  Serial.printlnf("OK.");
   d421e:	f001 f9c1 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4222:	4905      	ldr	r1, [pc, #20]	; (d4238 <_Z13connectToCelli+0x78>)
   d4224:	f7ff ff57 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
  return secondCounter;
   d4228:	e7f2      	b.n	d4210 <_Z13connectToCelli+0x50>
   d422a:	bf00      	nop
   d422c:	2003e694 	.word	0x2003e694
   d4230:	000d5a6f 	.word	0x000d5a6f
   d4234:	000d5a8b 	.word	0x000d5a8b
   d4238:	000d5aa9 	.word	0x000d5aa9

000d423c <_Z14connectToCloudi>:

//
int connectToCloud(int timeoutSec)
{
   d423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d423e:	4606      	mov	r6, r0
  Serial.printf("Connecting to cloud ... ");
   d4240:	f001 f9b0 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4244:	4917      	ldr	r1, [pc, #92]	; (d42a4 <_Z14connectToCloudi+0x68>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4246:	4f18      	ldr	r7, [pc, #96]	; (d42a8 <_Z14connectToCloudi+0x6c>)
   d4248:	f7ff ff37 	bl	d40ba <_ZN5Print6printfEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d424c:	f000 fa12 	bl	d4674 <spark_cloud_flag_connect>
  int secondCounter = 0;
   d4250:	2400      	movs	r4, #0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4252:	f000 fa17 	bl	d4684 <spark_cloud_flag_connected>
  Particle.connect();
  while (Particle.connected() == false)
   d4256:	4605      	mov	r5, r0
   d4258:	b9e8      	cbnz	r0, d4296 <_Z14connectToCloudi+0x5a>
		return HAL_Timer_Get_Milli_Seconds();
   d425a:	f000 f8dd 	bl	d4418 <HAL_Timer_Get_Milli_Seconds>
  {
    secondCounter ++;
   d425e:	3401      	adds	r4, #1
		last_checkin = current_time();
   d4260:	6038      	str	r0, [r7, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4262:	f000 f9ff 	bl	d4664 <spark_process>
    Particle.process();
    if (secondCounter >= timeoutSec)
   d4266:	42b4      	cmp	r4, r6
   d4268:	db10      	blt.n	d428c <_Z14connectToCloudi+0x50>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d426a:	4c10      	ldr	r4, [pc, #64]	; (d42ac <_Z14connectToCloudi+0x70>)
    {
      Serial.printlnf("Couldn't connect to Cloud.");
   d426c:	f001 f99a 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4270:	490f      	ldr	r1, [pc, #60]	; (d42b0 <_Z14connectToCloudi+0x74>)
   d4272:	f7ff ff30 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
   d4276:	6860      	ldr	r0, [r4, #4]
   d4278:	462a      	mov	r2, r5
   d427a:	2102      	movs	r1, #2
   d427c:	f000 f9b2 	bl	d45e4 <network_disconnect>
      Cellular.disconnect();
      Cellular.off();
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff36 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
   d4286:	462c      	mov	r4, r5
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return secondCounter;
   d4288:	4620      	mov	r0, r4
   d428a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
   d428c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4290:	f000 fd46 	bl	d4d20 <delay>
  while (Particle.connected() == false)
   d4294:	e7dd      	b.n	d4252 <_Z14connectToCloudi+0x16>
  Serial.printlnf("OK.");
   d4296:	f001 f985 	bl	d55a4 <_Z16_fetch_usbserialv>
   d429a:	4906      	ldr	r1, [pc, #24]	; (d42b4 <_Z14connectToCloudi+0x78>)
   d429c:	f7ff ff1b 	bl	d40d6 <_ZN5Print8printlnfEPKcz>
  return secondCounter;
   d42a0:	e7f2      	b.n	d4288 <_Z14connectToCloudi+0x4c>
   d42a2:	bf00      	nop
   d42a4:	000d5aad 	.word	0x000d5aad
   d42a8:	2003e7ec 	.word	0x2003e7ec
   d42ac:	2003e694 	.word	0x2003e694
   d42b0:	000d5ac6 	.word	0x000d5ac6
   d42b4:	000d5aa9 	.word	0x000d5aa9

000d42b8 <loop>:
void loop() {
   d42b8:	b530      	push	{r4, r5, lr}
  delay(1000);
   d42ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void loop() {
   d42be:	b093      	sub	sp, #76	; 0x4c
  delay(1000);
   d42c0:	f000 fd2e 	bl	d4d20 <delay>
  int cellConnectTime = connectToCell(CELL_CONNECT_SECONDS);
   d42c4:	205a      	movs	r0, #90	; 0x5a
   d42c6:	f7ff ff7b 	bl	d41c0 <_Z13connectToCelli>
  if (cellConnectTime > 0)
   d42ca:	1e05      	subs	r5, r0, #0
   d42cc:	dd5f      	ble.n	d438e <loop+0xd6>
    int cloudConnectTime = connectToCloud(CLOUD_CONNECT_SECONDS);
   d42ce:	203c      	movs	r0, #60	; 0x3c
   d42d0:	f7ff ffb4 	bl	d423c <_Z14connectToCloudi>
    if (cloudConnectTime > 0)
   d42d4:	1e04      	subs	r4, r0, #0
   d42d6:	dd5a      	ble.n	d438e <loop+0xd6>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42d8:	492f      	ldr	r1, [pc, #188]	; (d4398 <loop+0xe0>)
   d42da:	a80a      	add	r0, sp, #40	; 0x28
   d42dc:	f000 fbbd 	bl	d4a5a <_ZN6StringC1EPKc>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
   d42e0:	220a      	movs	r2, #10
   d42e2:	4629      	mov	r1, r5
   d42e4:	a806      	add	r0, sp, #24
   d42e6:	f000 fbf8 	bl	d4ada <_ZN6StringC1Eih>
   d42ea:	a906      	add	r1, sp, #24
   d42ec:	a80a      	add	r0, sp, #40	; 0x28
   d42ee:	f000 fc1e 	bl	d4b2e <_ZplRK15StringSumHelperRK6String>
   d42f2:	492a      	ldr	r1, [pc, #168]	; (d439c <loop+0xe4>)
   d42f4:	f000 fc27 	bl	d4b46 <_ZplRK15StringSumHelperPKc>
   d42f8:	220a      	movs	r2, #10
   d42fa:	4621      	mov	r1, r4
   d42fc:	4605      	mov	r5, r0
   d42fe:	a80e      	add	r0, sp, #56	; 0x38
   d4300:	f000 fbeb 	bl	d4ada <_ZN6StringC1Eih>
   d4304:	a90e      	add	r1, sp, #56	; 0x38
   d4306:	4628      	mov	r0, r5
   d4308:	f000 fc11 	bl	d4b2e <_ZplRK15StringSumHelperRK6String>
   d430c:	4601      	mov	r1, r0
   d430e:	a802      	add	r0, sp, #8
   d4310:	f000 fbc6 	bl	d4aa0 <_ZN6StringC1ERKS_>
   d4314:	a80e      	add	r0, sp, #56	; 0x38
   d4316:	f000 fb55 	bl	d49c4 <_ZN6StringD1Ev>
   d431a:	a806      	add	r0, sp, #24
   d431c:	f000 fb52 	bl	d49c4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4320:	a80a      	add	r0, sp, #40	; 0x28
   d4322:	f000 fb4f 	bl	d49c4 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4326:	4b1e      	ldr	r3, [pc, #120]	; (d43a0 <loop+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4328:	9a02      	ldr	r2, [sp, #8]
   d432a:	781b      	ldrb	r3, [r3, #0]
   d432c:	f88d 3000 	strb.w	r3, [sp]
   d4330:	491c      	ldr	r1, [pc, #112]	; (d43a4 <loop+0xec>)
   d4332:	233c      	movs	r3, #60	; 0x3c
   d4334:	a80e      	add	r0, sp, #56	; 0x38
   d4336:	f000 fef1 	bl	d511c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d433a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   d433c:	b17c      	cbz	r4, d435e <loop+0xa6>
      if (--_M_use_count == 0)
   d433e:	6863      	ldr	r3, [r4, #4]
   d4340:	3b01      	subs	r3, #1
   d4342:	6063      	str	r3, [r4, #4]
   d4344:	b95b      	cbnz	r3, d435e <loop+0xa6>
          _M_dispose();
   d4346:	6823      	ldr	r3, [r4, #0]
   d4348:	4620      	mov	r0, r4
   d434a:	689b      	ldr	r3, [r3, #8]
   d434c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d434e:	68a3      	ldr	r3, [r4, #8]
   d4350:	3b01      	subs	r3, #1
   d4352:	60a3      	str	r3, [r4, #8]
   d4354:	b91b      	cbnz	r3, d435e <loop+0xa6>
            _M_destroy();
   d4356:	6823      	ldr	r3, [r4, #0]
   d4358:	4620      	mov	r0, r4
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	4798      	blx	r3
   d435e:	4d12      	ldr	r5, [pc, #72]	; (d43a8 <loop+0xf0>)
      delay(1000);
   d4360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4364:	f000 fcdc 	bl	d4d20 <delay>
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d4368:	2400      	movs	r4, #0
      Particle.disconnect();
   d436a:	a80e      	add	r0, sp, #56	; 0x38
   d436c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   d4370:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   d4374:	f000 fddd 	bl	d4f32 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d4378:	6868      	ldr	r0, [r5, #4]
   d437a:	4622      	mov	r2, r4
   d437c:	2102      	movs	r1, #2
   d437e:	f000 f931 	bl	d45e4 <network_disconnect>
      Cellular.off();
   d4382:	4628      	mov	r0, r5
   d4384:	f7ff feb5 	bl	d40f2 <_ZN5spark13CellularClass3offEv>
      String outDat = "cell: " + (String) cellConnectTime + ",  cloud: " + (String) cloudConnectTime;
   d4388:	a802      	add	r0, sp, #8
   d438a:	f000 fb1b 	bl	d49c4 <_ZN6StringD1Ev>
  ULPSleep(60);
   d438e:	203c      	movs	r0, #60	; 0x3c
   d4390:	f7ff febe 	bl	d4110 <_Z8ULPSleepi>
}
   d4394:	b013      	add	sp, #76	; 0x4c
   d4396:	bd30      	pop	{r4, r5, pc}
   d4398:	000d5ae1 	.word	0x000d5ae1
   d439c:	000d5ae8 	.word	0x000d5ae8
   d43a0:	2003e63c 	.word	0x2003e63c
   d43a4:	000d5af3 	.word	0x000d5af3
   d43a8:	2003e694 	.word	0x2003e694

000d43ac <_GLOBAL__sub_I_SystemMode>:
   d43ac:	b510      	push	{r4, lr}
        val_(val) {
   d43ae:	4b0a      	ldr	r3, [pc, #40]	; (d43d8 <_GLOBAL__sub_I_SystemMode+0x2c>)
              error_(SYSTEM_ERROR_NONE) {
   d43b0:	4c0a      	ldr	r4, [pc, #40]	; (d43dc <_GLOBAL__sub_I_SystemMode+0x30>)
   d43b2:	2201      	movs	r2, #1
   d43b4:	701a      	strb	r2, [r3, #0]
   d43b6:	2300      	movs	r3, #0
   d43b8:	6023      	str	r3, [r4, #0]
   d43ba:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d43bc:	71a3      	strb	r3, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43be:	2003      	movs	r0, #3
    SleepResult() {}
   d43c0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d43c4:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d43c6:	f000 f8bf 	bl	d4548 <set_system_mode>
SYSTEM_MODE(MANUAL);  
   d43ca:	4620      	mov	r0, r4
   d43cc:	4a04      	ldr	r2, [pc, #16]	; (d43e0 <_GLOBAL__sub_I_SystemMode+0x34>)
   d43ce:	4905      	ldr	r1, [pc, #20]	; (d43e4 <_GLOBAL__sub_I_SystemMode+0x38>)
   d43d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);  
   d43d4:	f001 ba90 	b.w	d58f8 <__aeabi_atexit>
   d43d8:	2003e63c 	.word	0x2003e63c
   d43dc:	2003e630 	.word	0x2003e630
   d43e0:	2003e62c 	.word	0x2003e62c
   d43e4:	000d40ab 	.word	0x000d40ab

000d43e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <netdb_freeaddrinfo+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	689b      	ldr	r3, [r3, #8]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030268 	.word	0x00030268

000d43f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <netdb_getaddrinfo+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030268 	.word	0x00030268

000d4408 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_RNG_GetRandomNumber+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	685b      	ldr	r3, [r3, #4]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030218 	.word	0x00030218

000d4418 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	695b      	ldr	r3, [r3, #20]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030218 	.word	0x00030218

000d4428 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <os_mutex_recursive_create+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030248 	.word	0x00030248

000d4438 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <os_mutex_recursive_destroy+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030248 	.word	0x00030248

000d4448 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <inet_inet_ntop+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030264 	.word	0x00030264

000d4458 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <hal_usart_init+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	681b      	ldr	r3, [r3, #0]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003023c 	.word	0x0003023c

000d4468 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <hal_usart_write+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	68db      	ldr	r3, [r3, #12]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003023c 	.word	0x0003023c

000d4478 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <hal_usart_available+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003023c 	.word	0x0003023c

000d4488 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <hal_usart_read+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003023c 	.word	0x0003023c

000d4498 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <hal_usart_peek+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	699b      	ldr	r3, [r3, #24]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003023c 	.word	0x0003023c

000d44a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <hal_usart_flush+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	69db      	ldr	r3, [r3, #28]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003023c 	.word	0x0003023c

000d44b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <hal_usart_available_data_for_write+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003023c 	.word	0x0003023c

000d44c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_USB_USART_Init+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	681b      	ldr	r3, [r3, #0]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003024c 	.word	0x0003024c

000d44d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_USB_USART_Begin+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	685b      	ldr	r3, [r3, #4]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003024c 	.word	0x0003024c

000d44e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_USB_USART_Available_Data+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	691b      	ldr	r3, [r3, #16]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003024c 	.word	0x0003024c

000d44f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	695b      	ldr	r3, [r3, #20]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003024c 	.word	0x0003024c

000d4508 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_USB_USART_Receive_Data+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	699b      	ldr	r3, [r3, #24]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003024c 	.word	0x0003024c

000d4518 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_USB_USART_Send_Data+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	69db      	ldr	r3, [r3, #28]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003024c 	.word	0x0003024c

000d4528 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_USB_USART_Flush_Data+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6a1b      	ldr	r3, [r3, #32]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003024c 	.word	0x0003024c

000d4538 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <log_message+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030260 	.word	0x00030260

000d4548 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <set_system_mode+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	685b      	ldr	r3, [r3, #4]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030220 	.word	0x00030220

000d4558 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <system_delay_ms+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	695b      	ldr	r3, [r3, #20]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030220 	.word	0x00030220

000d4568 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <application_thread_current+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030220 	.word	0x00030220

000d4578 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <application_thread_invoke+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030220 	.word	0x00030220

000d4588 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b03      	ldr	r3, [pc, #12]	; (d4598 <system_ctrl_set_app_request_handler+0x10>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4592:	9301      	str	r3, [sp, #4]
   d4594:	bd08      	pop	{r3, pc}
   d4596:	0000      	.short	0x0000
   d4598:	00030220 	.word	0x00030220

000d459c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b03      	ldr	r3, [pc, #12]	; (d45ac <system_ctrl_set_result+0x10>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45a6:	9301      	str	r3, [sp, #4]
   d45a8:	bd08      	pop	{r3, pc}
   d45aa:	0000      	.short	0x0000
   d45ac:	00030220 	.word	0x00030220

000d45b0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b03      	ldr	r3, [pc, #12]	; (d45c0 <system_sleep_ext+0x10>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d45ba:	9301      	str	r3, [sp, #4]
   d45bc:	bd08      	pop	{r3, pc}
   d45be:	0000      	.short	0x0000
   d45c0:	00030220 	.word	0x00030220

000d45c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <network_connect+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	685b      	ldr	r3, [r3, #4]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030240 	.word	0x00030240

000d45d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <network_connecting+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	689b      	ldr	r3, [r3, #8]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030240 	.word	0x00030240

000d45e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <network_disconnect+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030240 	.word	0x00030240

000d45f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <network_ready+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	691b      	ldr	r3, [r3, #16]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030240 	.word	0x00030240

000d4604 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_on+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	695b      	ldr	r3, [r3, #20]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <network_off+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	699b      	ldr	r3, [r3, #24]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030240 	.word	0x00030240

000d4624 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <network_listen+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	69db      	ldr	r3, [r3, #28]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030240 	.word	0x00030240

000d4634 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <network_listening+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a1b      	ldr	r3, [r3, #32]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030240 	.word	0x00030240

000d4644 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <network_set_listen_timeout+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030240 	.word	0x00030240

000d4654 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_get_listen_timeout+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <spark_process+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	689b      	ldr	r3, [r3, #8]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030244 	.word	0x00030244

000d4674 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <spark_cloud_flag_connect+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	68db      	ldr	r3, [r3, #12]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030244 	.word	0x00030244

000d4684 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <spark_cloud_flag_connected+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030244 	.word	0x00030244

000d4694 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <spark_send_event+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6a1b      	ldr	r3, [r3, #32]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030244 	.word	0x00030244

000d46a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030244 	.word	0x00030244

000d46b4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <spark_cloud_disconnect+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030244 	.word	0x00030244

000d46c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <malloc+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	681b      	ldr	r3, [r3, #0]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003021c 	.word	0x0003021c

000d46d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <free+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003021c 	.word	0x0003021c

000d46e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <realloc+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003021c 	.word	0x0003021c

000d46f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <vsnprintf+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003021c 	.word	0x0003021c

000d4704 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <abort+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003021c 	.word	0x0003021c

000d4714 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <_malloc_r+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003021c 	.word	0x0003021c

000d4724 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <newlib_impure_ptr_callback+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003021c 	.word	0x0003021c

000d4734 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4734:	2200      	movs	r2, #0
   d4736:	6840      	ldr	r0, [r0, #4]
   d4738:	4611      	mov	r1, r2
   d473a:	f7ff bf7b 	b.w	d4634 <network_listening>

000d473e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d473e:	2200      	movs	r2, #0
   d4740:	6840      	ldr	r0, [r0, #4]
   d4742:	4611      	mov	r1, r2
   d4744:	f7ff bf86 	b.w	d4654 <network_get_listen_timeout>

000d4748 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4748:	6840      	ldr	r0, [r0, #4]
   d474a:	2200      	movs	r2, #0
   d474c:	f7ff bf7a 	b.w	d4644 <network_set_listen_timeout>

000d4750 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4750:	6840      	ldr	r0, [r0, #4]
   d4752:	2200      	movs	r2, #0
   d4754:	f081 0101 	eor.w	r1, r1, #1
   d4758:	f7ff bf64 	b.w	d4624 <network_listen>

000d475c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d475c:	2300      	movs	r3, #0
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	461a      	mov	r2, r3
   d4762:	4619      	mov	r1, r3
   d4764:	f7ff bf56 	b.w	d4614 <network_off>

000d4768 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4768:	2300      	movs	r3, #0
   d476a:	6840      	ldr	r0, [r0, #4]
   d476c:	461a      	mov	r2, r3
   d476e:	4619      	mov	r1, r3
   d4770:	f7ff bf48 	b.w	d4604 <network_on>

000d4774 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4774:	2200      	movs	r2, #0
   d4776:	6840      	ldr	r0, [r0, #4]
   d4778:	4611      	mov	r1, r2
   d477a:	f7ff bf3b 	b.w	d45f4 <network_ready>

000d477e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d477e:	2200      	movs	r2, #0
   d4780:	6840      	ldr	r0, [r0, #4]
   d4782:	4611      	mov	r1, r2
   d4784:	f7ff bf26 	b.w	d45d4 <network_connecting>

000d4788 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4788:	6840      	ldr	r0, [r0, #4]
   d478a:	2200      	movs	r2, #0
   d478c:	2102      	movs	r1, #2
   d478e:	f7ff bf29 	b.w	d45e4 <network_disconnect>

000d4792 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4792:	2300      	movs	r3, #0
   d4794:	6840      	ldr	r0, [r0, #4]
   d4796:	461a      	mov	r2, r3
   d4798:	f7ff bf14 	b.w	d45c4 <network_connect>

000d479c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d479c:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d479e:	2203      	movs	r2, #3
   d47a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47a2:	4a02      	ldr	r2, [pc, #8]	; (d47ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d47a6:	4770      	bx	lr
   d47a8:	2003e640 	.word	0x2003e640
   d47ac:	000d5b08 	.word	0x000d5b08

000d47b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47b0:	b510      	push	{r4, lr}
   d47b2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47b4:	6800      	ldr	r0, [r0, #0]
   d47b6:	b118      	cbz	r0, d47c0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d47b8:	f7ff ff8c 	bl	d46d4 <free>
            wakeupSource_ = nullptr;
   d47bc:	2300      	movs	r3, #0
   d47be:	6023      	str	r3, [r4, #0]
        }
    }
   d47c0:	bd10      	pop	{r4, pc}

000d47c2 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d47c2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d47c4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d47c8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d47ca:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d47cc:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d47ce:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d47d2:	f8c0 2006 	str.w	r2, [r0, #6]
   d47d6:	889b      	ldrh	r3, [r3, #4]
   d47d8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d47da:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d47dc:	f7ff ffe8 	bl	d47b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d47e0:	682b      	ldr	r3, [r5, #0]
   d47e2:	b113      	cbz	r3, d47ea <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d47e4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d47e6:	2300      	movs	r3, #0
   d47e8:	602b      	str	r3, [r5, #0]
    }
   d47ea:	4620      	mov	r0, r4
   d47ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d47f0:	b538      	push	{r3, r4, r5, lr}
   d47f2:	460c      	mov	r4, r1
   d47f4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d47f6:	f7ff ffdb 	bl	d47b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d47fa:	b144      	cbz	r4, d480e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d47fc:	8820      	ldrh	r0, [r4, #0]
   d47fe:	f7ff ff61 	bl	d46c4 <malloc>
   d4802:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4804:	b128      	cbz	r0, d4812 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4806:	8822      	ldrh	r2, [r4, #0]
   d4808:	4621      	mov	r1, r4
   d480a:	f001 f88f 	bl	d592c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d480e:	2000      	movs	r0, #0
    }
   d4810:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d4812:	4801      	ldr	r0, [pc, #4]	; (d4818 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d4814:	e7fc      	b.n	d4810 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d4816:	bf00      	nop
   d4818:	fffffefc 	.word	0xfffffefc

000d481c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d481c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d481e:	4d2d      	ldr	r5, [pc, #180]	; (d48d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4820:	7d0b      	ldrb	r3, [r1, #20]
   d4822:	4604      	mov	r4, r0
   d4824:	b08b      	sub	sp, #44	; 0x2c
   d4826:	4608      	mov	r0, r1
   d4828:	1daf      	adds	r7, r5, #6
   d482a:	2b00      	cmp	r3, #0
   d482c:	d038      	beq.n	d48a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d482e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4830:	791b      	ldrb	r3, [r3, #4]
   d4832:	2b00      	cmp	r3, #0
   d4834:	d034      	beq.n	d48a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d4836:	2200      	movs	r2, #0
    SleepResult() {}
   d4838:	4b27      	ldr	r3, [pc, #156]	; (d48d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d483a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d483c:	a902      	add	r1, sp, #8
   d483e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4840:	9202      	str	r2, [sp, #8]
   d4842:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d4846:	f88d 200e 	strb.w	r2, [sp, #14]
   d484a:	f7ff feb1 	bl	d45b0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d484e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d4852:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d4856:	b200      	sxth	r0, r0
   d4858:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d485c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d4860:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d4862:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d4864:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4866:	4628      	mov	r0, r5
   d4868:	f7ff ffc2 	bl	d47f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d486c:	a802      	add	r0, sp, #8
   d486e:	f7ff ff9f 	bl	d47b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d4872:	2300      	movs	r3, #0
   d4874:	6023      	str	r3, [r4, #0]
   d4876:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4878:	71a3      	strb	r3, [r4, #6]
   d487a:	8123      	strh	r3, [r4, #8]
   d487c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4880:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d4882:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4886:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4888:	683b      	ldr	r3, [r7, #0]
   d488a:	f8c4 3006 	str.w	r3, [r4, #6]
   d488e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4890:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d4892:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4894:	4620      	mov	r0, r4
   d4896:	f7ff ffab 	bl	d47f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d489a:	4620      	mov	r0, r4
   d489c:	b00b      	add	sp, #44	; 0x2c
   d489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d48a0:	2600      	movs	r6, #0
   d48a2:	2320      	movs	r3, #32
   d48a4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d48a8:	4b0c      	ldr	r3, [pc, #48]	; (d48dc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d48aa:	9300      	str	r3, [sp, #0]
   d48ac:	490c      	ldr	r1, [pc, #48]	; (d48e0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d48ae:	4633      	mov	r3, r6
   d48b0:	aa02      	add	r2, sp, #8
   d48b2:	2032      	movs	r0, #50	; 0x32
   d48b4:	f7ff fe40 	bl	d4538 <log_message>
    SleepResult() {}
   d48b8:	4b07      	ldr	r3, [pc, #28]	; (d48d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d48ba:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d48bc:	a902      	add	r1, sp, #8
        error_ = error;
   d48be:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d48c2:	4804      	ldr	r0, [pc, #16]	; (d48d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d48c4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d48c6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d48ca:	f8ad 300c 	strh.w	r3, [sp, #12]
   d48ce:	f7ff ff78 	bl	d47c2 <_ZN17SystemSleepResultaSEOS_>
   d48d2:	e7cb      	b.n	d486c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d48d4:	2003e648 	.word	0x2003e648
   d48d8:	ffff0000 	.word	0xffff0000
   d48dc:	000d5b3b 	.word	0x000d5b3b
   d48e0:	000d5b34 	.word	0x000d5b34

000d48e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d48e4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d48e6:	4b09      	ldr	r3, [pc, #36]	; (d490c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d48e8:	4c09      	ldr	r4, [pc, #36]	; (d4910 <_GLOBAL__sub_I_System+0x2c>)
   d48ea:	2202      	movs	r2, #2
   d48ec:	2000      	movs	r0, #0
   d48ee:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d48f0:	4b08      	ldr	r3, [pc, #32]	; (d4914 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d48f2:	6020      	str	r0, [r4, #0]
   d48f4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d48f6:	71a0      	strb	r0, [r4, #6]
   d48f8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48fa:	f7ff fe25 	bl	d4548 <set_system_mode>
SystemClass System;
   d48fe:	4620      	mov	r0, r4
   d4900:	4a05      	ldr	r2, [pc, #20]	; (d4918 <_GLOBAL__sub_I_System+0x34>)
   d4902:	4906      	ldr	r1, [pc, #24]	; (d491c <_GLOBAL__sub_I_System+0x38>)
   d4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4908:	f000 bff6 	b.w	d58f8 <__aeabi_atexit>
   d490c:	2003e654 	.word	0x2003e654
   d4910:	2003e648 	.word	0x2003e648
   d4914:	ffff0000 	.word	0xffff0000
   d4918:	2003e62c 	.word	0x2003e62c
   d491c:	000d40ab 	.word	0x000d40ab

000d4920 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4924:	f001 f861 	bl	d59ea <strlen>
   d4928:	3801      	subs	r0, #1
   d492a:	1823      	adds	r3, r4, r0
   d492c:	4620      	mov	r0, r4
	while(i<j){
   d492e:	4283      	cmp	r3, r0
   d4930:	d906      	bls.n	d4940 <_Z11str_reversePc+0x20>
		c = *i;
   d4932:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4934:	7819      	ldrb	r1, [r3, #0]
   d4936:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d493a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d493e:	e7f6      	b.n	d492e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4940:	bd10      	pop	{r4, pc}

000d4942 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4942:	b570      	push	{r4, r5, r6, lr}
   d4944:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4946:	1e91      	subs	r1, r2, #2
   d4948:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d494a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d494c:	d822      	bhi.n	d4994 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d494e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4950:	b16d      	cbz	r5, d496e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4952:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4956:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d495a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d495c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d495e:	bf94      	ite	ls
   d4960:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4962:	3157      	addhi	r1, #87	; 0x57
   d4964:	b2c9      	uxtb	r1, r1
   d4966:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d496a:	4635      	mov	r5, r6
	while(a){
   d496c:	e7f0      	b.n	d4950 <ultoa+0xe>
   d496e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4970:	4423      	add	r3, r4
            *ptr++ = '0';
   d4972:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4974:	4293      	cmp	r3, r2
   d4976:	d902      	bls.n	d497e <ultoa+0x3c>
            *ptr++ = '0';
   d4978:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d497c:	e7fa      	b.n	d4974 <ultoa+0x32>
   d497e:	1a1a      	subs	r2, r3, r0
   d4980:	4283      	cmp	r3, r0
   d4982:	bf38      	it	cc
   d4984:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4986:	2300      	movs	r3, #0
   d4988:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d498a:	4620      	mov	r0, r4
   d498c:	f7ff ffc8 	bl	d4920 <_Z11str_reversePc>
	return buffer;
   d4990:	4620      	mov	r0, r4
}
   d4992:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4994:	2000      	movs	r0, #0
   d4996:	e7fc      	b.n	d4992 <ultoa+0x50>

000d4998 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4998:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d499a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d499c:	460c      	mov	r4, r1
   d499e:	4615      	mov	r5, r2
	if(a<0){
   d49a0:	da0e      	bge.n	d49c0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d49a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d49a6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d49aa:	bf14      	ite	ne
   d49ac:	4258      	negne	r0, r3
   d49ae:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d49b0:	2301      	movs	r3, #1
		*buffer = '-';
   d49b2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d49b4:	462a      	mov	r2, r5
   d49b6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d49b8:	f7ff ffc3 	bl	d4942 <ultoa>
	}
	return buffer;
}
   d49bc:	4620      	mov	r0, r4
   d49be:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d49c0:	2301      	movs	r3, #1
   d49c2:	e7f9      	b.n	d49b8 <itoa+0x20>

000d49c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49c4:	b510      	push	{r4, lr}
   d49c6:	4604      	mov	r4, r0
{
	free(buffer);
   d49c8:	6800      	ldr	r0, [r0, #0]
   d49ca:	f7ff fe83 	bl	d46d4 <free>
}
   d49ce:	4620      	mov	r0, r4
   d49d0:	bd10      	pop	{r4, pc}

000d49d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49d2:	b510      	push	{r4, lr}
   d49d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49d6:	6800      	ldr	r0, [r0, #0]
   d49d8:	b108      	cbz	r0, d49de <_ZN6String10invalidateEv+0xc>
   d49da:	f7ff fe7b 	bl	d46d4 <free>
	buffer = NULL;
   d49de:	2300      	movs	r3, #0
	capacity = len = 0;
   d49e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d49e4:	6023      	str	r3, [r4, #0]
}
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49e8:	b538      	push	{r3, r4, r5, lr}
   d49ea:	4604      	mov	r4, r0
   d49ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49ee:	6800      	ldr	r0, [r0, #0]
   d49f0:	3101      	adds	r1, #1
   d49f2:	f7ff fe77 	bl	d46e4 <realloc>
	if (newbuffer) {
   d49f6:	b110      	cbz	r0, d49fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49f8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d49fc:	2001      	movs	r0, #1
	}
	return 0;
}
   d49fe:	bd38      	pop	{r3, r4, r5, pc}

000d4a00 <_ZN6String7reserveEj>:
{
   d4a00:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a02:	6803      	ldr	r3, [r0, #0]
{
   d4a04:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a06:	b123      	cbz	r3, d4a12 <_ZN6String7reserveEj+0x12>
   d4a08:	6843      	ldr	r3, [r0, #4]
   d4a0a:	428b      	cmp	r3, r1
   d4a0c:	d301      	bcc.n	d4a12 <_ZN6String7reserveEj+0x12>
   d4a0e:	2001      	movs	r0, #1
}
   d4a10:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4a12:	4620      	mov	r0, r4
   d4a14:	f7ff ffe8 	bl	d49e8 <_ZN6String12changeBufferEj>
   d4a18:	2800      	cmp	r0, #0
   d4a1a:	d0f9      	beq.n	d4a10 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4a1c:	68a3      	ldr	r3, [r4, #8]
   d4a1e:	2b00      	cmp	r3, #0
   d4a20:	d1f5      	bne.n	d4a0e <_ZN6String7reserveEj+0xe>
   d4a22:	6822      	ldr	r2, [r4, #0]
   d4a24:	7013      	strb	r3, [r2, #0]
   d4a26:	e7f2      	b.n	d4a0e <_ZN6String7reserveEj+0xe>

000d4a28 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a2a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4a2c:	4611      	mov	r1, r2
   d4a2e:	9201      	str	r2, [sp, #4]
{
   d4a30:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4a32:	f7ff ffe5 	bl	d4a00 <_ZN6String7reserveEj>
   d4a36:	9a01      	ldr	r2, [sp, #4]
   d4a38:	b928      	cbnz	r0, d4a46 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f7ff ffc9 	bl	d49d2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a40:	4620      	mov	r0, r4
   d4a42:	b003      	add	sp, #12
   d4a44:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a46:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a48:	4629      	mov	r1, r5
   d4a4a:	6820      	ldr	r0, [r4, #0]
   d4a4c:	f000 ff6e 	bl	d592c <memcpy>
	buffer[len] = 0;
   d4a50:	6822      	ldr	r2, [r4, #0]
   d4a52:	68a3      	ldr	r3, [r4, #8]
   d4a54:	2100      	movs	r1, #0
   d4a56:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a58:	e7f2      	b.n	d4a40 <_ZN6String4copyEPKcj+0x18>

000d4a5a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a5a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a5c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a5e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a62:	4604      	mov	r4, r0
	len = 0;
   d4a64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a66:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a68:	b141      	cbz	r1, d4a7c <_ZN6StringC1EPKc+0x22>
   d4a6a:	4608      	mov	r0, r1
   d4a6c:	9101      	str	r1, [sp, #4]
   d4a6e:	f000 ffbc 	bl	d59ea <strlen>
   d4a72:	9901      	ldr	r1, [sp, #4]
   d4a74:	4602      	mov	r2, r0
   d4a76:	4620      	mov	r0, r4
   d4a78:	f7ff ffd6 	bl	d4a28 <_ZN6String4copyEPKcj>
}
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	b002      	add	sp, #8
   d4a80:	bd10      	pop	{r4, pc}

000d4a82 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a82:	4288      	cmp	r0, r1
{
   d4a84:	b510      	push	{r4, lr}
   d4a86:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4a88:	d005      	beq.n	d4a96 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4a8a:	680b      	ldr	r3, [r1, #0]
   d4a8c:	b12b      	cbz	r3, d4a9a <_ZN6StringaSERKS_+0x18>
   d4a8e:	688a      	ldr	r2, [r1, #8]
   d4a90:	4619      	mov	r1, r3
   d4a92:	f7ff ffc9 	bl	d4a28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4a96:	4620      	mov	r0, r4
   d4a98:	bd10      	pop	{r4, pc}
	else invalidate();
   d4a9a:	f7ff ff9a 	bl	d49d2 <_ZN6String10invalidateEv>
   d4a9e:	e7fa      	b.n	d4a96 <_ZN6StringaSERKS_+0x14>

000d4aa0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4aa0:	b510      	push	{r4, lr}
	buffer = NULL;
   d4aa2:	2300      	movs	r3, #0
String::String(const String &value)
   d4aa4:	4604      	mov	r4, r0
	capacity = 0;
   d4aa6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4aaa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4aac:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4aae:	f7ff ffe8 	bl	d4a82 <_ZN6StringaSERKS_>
}
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4ab6:	b513      	push	{r0, r1, r4, lr}
   d4ab8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4aba:	b159      	cbz	r1, d4ad4 <_ZN6StringaSEPKc+0x1e>
   d4abc:	4608      	mov	r0, r1
   d4abe:	9101      	str	r1, [sp, #4]
   d4ac0:	f000 ff93 	bl	d59ea <strlen>
   d4ac4:	9901      	ldr	r1, [sp, #4]
   d4ac6:	4602      	mov	r2, r0
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f7ff ffad 	bl	d4a28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4ace:	4620      	mov	r0, r4
   d4ad0:	b002      	add	sp, #8
   d4ad2:	bd10      	pop	{r4, pc}
	else invalidate();
   d4ad4:	f7ff ff7d 	bl	d49d2 <_ZN6String10invalidateEv>
   d4ad8:	e7f9      	b.n	d4ace <_ZN6StringaSEPKc+0x18>

000d4ada <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d4ada:	b510      	push	{r4, lr}
   d4adc:	4604      	mov	r4, r0
   d4ade:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4ae0:	2300      	movs	r3, #0
	capacity = 0;
   d4ae2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4ae6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4ae8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d4aea:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4aec:	a901      	add	r1, sp, #4
   d4aee:	f7ff ff53 	bl	d4998 <itoa>
	*this = buf;
   d4af2:	a901      	add	r1, sp, #4
   d4af4:	4620      	mov	r0, r4
   d4af6:	f7ff ffde 	bl	d4ab6 <_ZN6StringaSEPKc>
}
   d4afa:	4620      	mov	r0, r4
   d4afc:	b00a      	add	sp, #40	; 0x28
   d4afe:	bd10      	pop	{r4, pc}

000d4b00 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4b00:	b570      	push	{r4, r5, r6, lr}
   d4b02:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4b04:	460e      	mov	r6, r1
   d4b06:	b909      	cbnz	r1, d4b0c <_ZN6String6concatEPKcj+0xc>
   d4b08:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4b0a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4b0c:	b16a      	cbz	r2, d4b2a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4b0e:	6884      	ldr	r4, [r0, #8]
   d4b10:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4b12:	4621      	mov	r1, r4
   d4b14:	f7ff ff74 	bl	d4a00 <_ZN6String7reserveEj>
   d4b18:	2800      	cmp	r0, #0
   d4b1a:	d0f5      	beq.n	d4b08 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4b1c:	6828      	ldr	r0, [r5, #0]
   d4b1e:	68ab      	ldr	r3, [r5, #8]
   d4b20:	4631      	mov	r1, r6
   d4b22:	4418      	add	r0, r3
   d4b24:	f000 ff3c 	bl	d59a0 <strcpy>
	len = newlen;
   d4b28:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4b2a:	2001      	movs	r0, #1
   d4b2c:	e7ed      	b.n	d4b0a <_ZN6String6concatEPKcj+0xa>

000d4b2e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4b2e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4b30:	688a      	ldr	r2, [r1, #8]
   d4b32:	6809      	ldr	r1, [r1, #0]
{
   d4b34:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4b36:	f7ff ffe3 	bl	d4b00 <_ZN6String6concatEPKcj>
   d4b3a:	b910      	cbnz	r0, d4b42 <_ZplRK15StringSumHelperRK6String+0x14>
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f7ff ff48 	bl	d49d2 <_ZN6String10invalidateEv>
	return a;
}
   d4b42:	4620      	mov	r0, r4
   d4b44:	bd10      	pop	{r4, pc}

000d4b46 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4b46:	b513      	push	{r0, r1, r4, lr}
   d4b48:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4b4a:	b929      	cbnz	r1, d4b58 <_ZplRK15StringSumHelperPKc+0x12>
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f7ff ff40 	bl	d49d2 <_ZN6String10invalidateEv>
	return a;
}
   d4b52:	4620      	mov	r0, r4
   d4b54:	b002      	add	sp, #8
   d4b56:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4b58:	4608      	mov	r0, r1
   d4b5a:	9101      	str	r1, [sp, #4]
   d4b5c:	f000 ff45 	bl	d59ea <strlen>
   d4b60:	9901      	ldr	r1, [sp, #4]
   d4b62:	4602      	mov	r2, r0
   d4b64:	4620      	mov	r0, r4
   d4b66:	f7ff ffcb 	bl	d4b00 <_ZN6String6concatEPKcj>
   d4b6a:	2800      	cmp	r0, #0
   d4b6c:	d0ee      	beq.n	d4b4c <_ZplRK15StringSumHelperPKc+0x6>
   d4b6e:	e7f0      	b.n	d4b52 <_ZplRK15StringSumHelperPKc+0xc>

000d4b70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b70:	b510      	push	{r4, lr}
          _M_dispose();
   d4b72:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b74:	4604      	mov	r4, r0
          _M_dispose();
   d4b76:	689b      	ldr	r3, [r3, #8]
   d4b78:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b7a:	68a3      	ldr	r3, [r4, #8]
   d4b7c:	3b01      	subs	r3, #1
   d4b7e:	60a3      	str	r3, [r4, #8]
   d4b80:	b92b      	cbnz	r3, d4b8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4b82:	6823      	ldr	r3, [r4, #0]
   d4b84:	4620      	mov	r0, r4
   d4b86:	68db      	ldr	r3, [r3, #12]
    }
   d4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4b8c:	4718      	bx	r3
    }
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b90:	b510      	push	{r4, lr}
   d4b92:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b94:	6800      	ldr	r0, [r0, #0]
   d4b96:	b108      	cbz	r0, d4b9c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b98:	f7ff fc4e 	bl	d4438 <os_mutex_recursive_destroy>
    }
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	bd10      	pop	{r4, pc}

000d4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ba0:	680b      	ldr	r3, [r1, #0]
   d4ba2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ba4:	b113      	cbz	r3, d4bac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4ba6:	685a      	ldr	r2, [r3, #4]
   d4ba8:	3201      	adds	r2, #1
   d4baa:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4bac:	4770      	bx	lr

000d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4bae:	b510      	push	{r4, lr}
   d4bb0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4bb2:	6800      	ldr	r0, [r0, #0]
   d4bb4:	b128      	cbz	r0, d4bc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4bb6:	6843      	ldr	r3, [r0, #4]
   d4bb8:	3b01      	subs	r3, #1
   d4bba:	6043      	str	r3, [r0, #4]
   d4bbc:	b90b      	cbnz	r3, d4bc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4bbe:	f7ff ffd7 	bl	d4b70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	bd10      	pop	{r4, pc}
	...

000d4bc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4bc8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4bca:	4c06      	ldr	r4, [pc, #24]	; (d4be4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4bcc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4bce:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4bd0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4bd2:	f7ff fc29 	bl	d4428 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	4a03      	ldr	r2, [pc, #12]	; (d4be8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4bda:	4904      	ldr	r1, [pc, #16]	; (d4bec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4be0:	f000 be8a 	b.w	d58f8 <__aeabi_atexit>
   d4be4:	2003e658 	.word	0x2003e658
   d4be8:	2003e62c 	.word	0x2003e62c
   d4bec:	000d4b91 	.word	0x000d4b91

000d4bf0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bf2:	4606      	mov	r6, r0
   d4bf4:	460d      	mov	r5, r1
  size_t n = 0;
   d4bf6:	188f      	adds	r7, r1, r2
   d4bf8:	2400      	movs	r4, #0
  while (size--) {
   d4bfa:	42bd      	cmp	r5, r7
   d4bfc:	d00c      	beq.n	d4c18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4bfe:	6833      	ldr	r3, [r6, #0]
   d4c00:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c04:	689b      	ldr	r3, [r3, #8]
   d4c06:	4630      	mov	r0, r6
   d4c08:	4798      	blx	r3
     if (chunk>=0)
   d4c0a:	1e03      	subs	r3, r0, #0
   d4c0c:	db01      	blt.n	d4c12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c0e:	441c      	add	r4, r3
  while (size--) {
   d4c10:	e7f3      	b.n	d4bfa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c12:	2c00      	cmp	r4, #0
   d4c14:	bf08      	it	eq
   d4c16:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c1c:	b513      	push	{r0, r1, r4, lr}
   d4c1e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4c20:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4c22:	b159      	cbz	r1, d4c3c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4c24:	9101      	str	r1, [sp, #4]
   d4c26:	f000 fee0 	bl	d59ea <strlen>
   d4c2a:	6823      	ldr	r3, [r4, #0]
   d4c2c:	9901      	ldr	r1, [sp, #4]
   d4c2e:	68db      	ldr	r3, [r3, #12]
   d4c30:	4602      	mov	r2, r0
   d4c32:	4620      	mov	r0, r4
    }
   d4c34:	b002      	add	sp, #8
   d4c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4c3a:	4718      	bx	r3
    }
   d4c3c:	b002      	add	sp, #8
   d4c3e:	bd10      	pop	{r4, pc}

000d4c40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c40:	6803      	ldr	r3, [r0, #0]
   d4c42:	689b      	ldr	r3, [r3, #8]
   d4c44:	4718      	bx	r3

000d4c46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4c48:	210d      	movs	r1, #13
{
   d4c4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4c4c:	f7ff fff8 	bl	d4c40 <_ZN5Print5printEc>
  n += print('\n');
   d4c50:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4c52:	4604      	mov	r4, r0
  n += print('\n');
   d4c54:	4628      	mov	r0, r5
   d4c56:	f7ff fff3 	bl	d4c40 <_ZN5Print5printEc>
  return n;
}
   d4c5a:	4420      	add	r0, r4
   d4c5c:	bd38      	pop	{r3, r4, r5, pc}

000d4c5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c5e:	b530      	push	{r4, r5, lr}
   d4c60:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c62:	2300      	movs	r3, #0
   d4c64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c68:	2a01      	cmp	r2, #1
   d4c6a:	bf98      	it	ls
   d4c6c:	220a      	movls	r2, #10
   d4c6e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4c70:	460d      	mov	r5, r1
   d4c72:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4c76:	fb01 5312 	mls	r3, r1, r2, r5
   d4c7a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c7e:	2b09      	cmp	r3, #9
   d4c80:	bf94      	ite	ls
   d4c82:	3330      	addls	r3, #48	; 0x30
   d4c84:	3337      	addhi	r3, #55	; 0x37
   d4c86:	b2db      	uxtb	r3, r3
  } while(n);
   d4c88:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c8a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4c8e:	d9ef      	bls.n	d4c70 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4c90:	4621      	mov	r1, r4
   d4c92:	f7ff ffc3 	bl	d4c1c <_ZN5Print5writeEPKc>
}
   d4c96:	b00b      	add	sp, #44	; 0x2c
   d4c98:	bd30      	pop	{r4, r5, pc}

000d4c9a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c9e:	b086      	sub	sp, #24
   d4ca0:	af00      	add	r7, sp, #0
   d4ca2:	4605      	mov	r5, r0
   d4ca4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4ca6:	1d38      	adds	r0, r7, #4
   d4ca8:	2114      	movs	r1, #20
{
   d4caa:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4cac:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4cae:	f7ff fd21 	bl	d46f4 <vsnprintf>

    if (n<bufsize)
   d4cb2:	2813      	cmp	r0, #19
   d4cb4:	d80e      	bhi.n	d4cd4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4cb6:	1d39      	adds	r1, r7, #4
   d4cb8:	4628      	mov	r0, r5
   d4cba:	f7ff ffaf 	bl	d4c1c <_ZN5Print5writeEPKc>
   d4cbe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4cc0:	b11e      	cbz	r6, d4cca <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4cc2:	4628      	mov	r0, r5
   d4cc4:	f7ff ffbf 	bl	d4c46 <_ZN5Print7printlnEv>
   d4cc8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4cca:	4620      	mov	r0, r4
   d4ccc:	3718      	adds	r7, #24
   d4cce:	46bd      	mov	sp, r7
   d4cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4cd4:	f100 0308 	add.w	r3, r0, #8
   d4cd8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4cdc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4cde:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4ce2:	4622      	mov	r2, r4
   d4ce4:	1c41      	adds	r1, r0, #1
   d4ce6:	683b      	ldr	r3, [r7, #0]
   d4ce8:	4668      	mov	r0, sp
   d4cea:	f7ff fd03 	bl	d46f4 <vsnprintf>
  return write(str);
   d4cee:	4669      	mov	r1, sp
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	f7ff ff93 	bl	d4c1c <_ZN5Print5writeEPKc>
   d4cf6:	4604      	mov	r4, r0
   d4cf8:	46c5      	mov	sp, r8
   d4cfa:	e7e1      	b.n	d4cc0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4cfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4cfc:	4b01      	ldr	r3, [pc, #4]	; (d4d04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4cfe:	4a02      	ldr	r2, [pc, #8]	; (d4d08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4d02:	4770      	bx	lr
   d4d04:	2003e65c 	.word	0x2003e65c
   d4d08:	000d5b62 	.word	0x000d5b62

000d4d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d0c:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d0e:	681a      	ldr	r2, [r3, #0]
   d4d10:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4d14:	4770      	bx	lr
   d4d16:	bf00      	nop
   d4d18:	2003e5c4 	.word	0x2003e5c4
   d4d1c:	2003e660 	.word	0x2003e660

000d4d20 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d20:	2100      	movs	r1, #0
   d4d22:	f7ff bc19 	b.w	d4558 <system_delay_ms>

000d4d26 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d26:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d28:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d2a:	4604      	mov	r4, r0
      if (_M_manager)
   d4d2c:	b113      	cbz	r3, d4d34 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d2e:	2203      	movs	r2, #3
   d4d30:	4601      	mov	r1, r0
   d4d32:	4798      	blx	r3
    }
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd10      	pop	{r4, pc}

000d4d38 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d38:	b510      	push	{r4, lr}
   d4d3a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d3c:	f7ff fff3 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
   d4d40:	4620      	mov	r0, r4
   d4d42:	bd10      	pop	{r4, pc}

000d4d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4d44:	b513      	push	{r0, r1, r4, lr}
   d4d46:	460b      	mov	r3, r1
   d4d48:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d4a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4d4e:	466c      	mov	r4, sp
   d4d50:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d54:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d58:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d5c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4d60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d64:	b002      	add	sp, #8
   d4d66:	bd10      	pop	{r4, pc}

000d4d68 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4d68:	4803      	ldr	r0, [pc, #12]	; (d4d78 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d6a:	4a04      	ldr	r2, [pc, #16]	; (d4d7c <_GLOBAL__sub_I_RGB+0x14>)
   d4d6c:	4904      	ldr	r1, [pc, #16]	; (d4d80 <_GLOBAL__sub_I_RGB+0x18>)
   d4d6e:	2300      	movs	r3, #0
   d4d70:	6083      	str	r3, [r0, #8]
   d4d72:	f000 bdc1 	b.w	d58f8 <__aeabi_atexit>
   d4d76:	bf00      	nop
   d4d78:	2003e664 	.word	0x2003e664
   d4d7c:	2003e62c 	.word	0x2003e62c
   d4d80:	000d4d39 	.word	0x000d4d39

000d4d84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4d84:	4b01      	ldr	r3, [pc, #4]	; (d4d8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4d86:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4d88:	4770      	bx	lr
   d4d8a:	bf00      	nop
   d4d8c:	2003e5c8 	.word	0x2003e5c8

000d4d90 <serialEventRun>:
{
   d4d90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d92:	4b0b      	ldr	r3, [pc, #44]	; (d4dc0 <serialEventRun+0x30>)
   d4d94:	b143      	cbz	r3, d4da8 <serialEventRun+0x18>
   d4d96:	f000 fc05 	bl	d55a4 <_Z16_fetch_usbserialv>
   d4d9a:	6803      	ldr	r3, [r0, #0]
   d4d9c:	691b      	ldr	r3, [r3, #16]
   d4d9e:	4798      	blx	r3
   d4da0:	2800      	cmp	r0, #0
   d4da2:	dd01      	ble.n	d4da8 <serialEventRun+0x18>
        serialEvent();
   d4da4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4da8:	4b06      	ldr	r3, [pc, #24]	; (d4dc4 <serialEventRun+0x34>)
   d4daa:	b143      	cbz	r3, d4dbe <serialEventRun+0x2e>
   d4dac:	f000 fcbe 	bl	d572c <_Z22__fetch_global_Serial1v>
   d4db0:	6803      	ldr	r3, [r0, #0]
   d4db2:	691b      	ldr	r3, [r3, #16]
   d4db4:	4798      	blx	r3
   d4db6:	2800      	cmp	r0, #0
   d4db8:	dd01      	ble.n	d4dbe <serialEventRun+0x2e>
        serialEvent1();
   d4dba:	f3af 8000 	nop.w
}
   d4dbe:	bd08      	pop	{r3, pc}
	...

000d4dc8 <_post_loop>:
{
   d4dc8:	b508      	push	{r3, lr}
	serialEventRun();
   d4dca:	f7ff ffe1 	bl	d4d90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4dce:	f7ff fb23 	bl	d4418 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4dd2:	4b01      	ldr	r3, [pc, #4]	; (d4dd8 <_post_loop+0x10>)
   d4dd4:	6018      	str	r0, [r3, #0]
}
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	2003e7ec 	.word	0x2003e7ec

000d4ddc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ddc:	4802      	ldr	r0, [pc, #8]	; (d4de8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4dde:	4a03      	ldr	r2, [pc, #12]	; (d4dec <_Z33system_initialize_user_backup_ramv+0x10>)
   d4de0:	4903      	ldr	r1, [pc, #12]	; (d4df0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4de2:	1a12      	subs	r2, r2, r0
   d4de4:	f000 bda2 	b.w	d592c <memcpy>
   d4de8:	2003f400 	.word	0x2003f400
   d4dec:	2003f404 	.word	0x2003f404
   d4df0:	000d5cb0 	.word	0x000d5cb0

000d4df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4df4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4df6:	2300      	movs	r3, #0
   d4df8:	9300      	str	r3, [sp, #0]
   d4dfa:	461a      	mov	r2, r3
   d4dfc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e00:	f7ff fbcc 	bl	d459c <system_ctrl_set_result>
}
   d4e04:	b003      	add	sp, #12
   d4e06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4e0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e0e:	8843      	ldrh	r3, [r0, #2]
   d4e10:	2b0a      	cmp	r3, #10
   d4e12:	d008      	beq.n	d4e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e14:	2b50      	cmp	r3, #80	; 0x50
   d4e16:	d10b      	bne.n	d4e30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4e18:	4b09      	ldr	r3, [pc, #36]	; (d4e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e1a:	681b      	ldr	r3, [r3, #0]
   d4e1c:	b14b      	cbz	r3, d4e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4e1e:	b003      	add	sp, #12
   d4e20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4e24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4e26:	f7ff ffe5 	bl	d4df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4e2a:	b003      	add	sp, #12
   d4e2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e30:	2300      	movs	r3, #0
   d4e32:	9300      	str	r3, [sp, #0]
   d4e34:	461a      	mov	r2, r3
   d4e36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e3a:	f7ff fbaf 	bl	d459c <system_ctrl_set_result>
}
   d4e3e:	e7f4      	b.n	d4e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4e40:	2003e678 	.word	0x2003e678

000d4e44 <module_user_init_hook>:
{
   d4e44:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e46:	4c12      	ldr	r4, [pc, #72]	; (d4e90 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e48:	4812      	ldr	r0, [pc, #72]	; (d4e94 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e4a:	4d13      	ldr	r5, [pc, #76]	; (d4e98 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e4c:	2100      	movs	r1, #0
   d4e4e:	f7ff fc69 	bl	d4724 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e52:	6823      	ldr	r3, [r4, #0]
   d4e54:	42ab      	cmp	r3, r5
   d4e56:	4b11      	ldr	r3, [pc, #68]	; (d4e9c <module_user_init_hook+0x58>)
   d4e58:	bf0c      	ite	eq
   d4e5a:	2201      	moveq	r2, #1
   d4e5c:	2200      	movne	r2, #0
   d4e5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4e60:	d002      	beq.n	d4e68 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4e62:	f7ff ffbb 	bl	d4ddc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4e66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e68:	f7ff face 	bl	d4408 <HAL_RNG_GetRandomNumber>
   d4e6c:	4604      	mov	r4, r0
    srand(seed);
   d4e6e:	f000 fd73 	bl	d5958 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e72:	4b0b      	ldr	r3, [pc, #44]	; (d4ea0 <module_user_init_hook+0x5c>)
   d4e74:	b113      	cbz	r3, d4e7c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4e76:	4620      	mov	r0, r4
   d4e78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e7c:	2100      	movs	r1, #0
   d4e7e:	4808      	ldr	r0, [pc, #32]	; (d4ea0 <module_user_init_hook+0x5c>)
   d4e80:	f7ff fc10 	bl	d46a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e88:	4806      	ldr	r0, [pc, #24]	; (d4ea4 <module_user_init_hook+0x60>)
   d4e8a:	2100      	movs	r1, #0
   d4e8c:	f7ff bb7c 	b.w	d4588 <system_ctrl_set_app_request_handler>
   d4e90:	2003f400 	.word	0x2003f400
   d4e94:	000d4d85 	.word	0x000d4d85
   d4e98:	9a271c1e 	.word	0x9a271c1e
   d4e9c:	2003e674 	.word	0x2003e674
   d4ea0:	00000000 	.word	0x00000000
   d4ea4:	000d4e0d 	.word	0x000d4e0d

000d4ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ea8:	4770      	bx	lr

000d4eaa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4eaa:	2000      	movs	r0, #0
   d4eac:	4770      	bx	lr

000d4eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4eae:	b510      	push	{r4, lr}
   d4eb0:	2110      	movs	r1, #16
   d4eb2:	4604      	mov	r4, r0
   d4eb4:	f000 fd25 	bl	d5902 <_ZdlPvj>
   d4eb8:	4620      	mov	r0, r4
   d4eba:	bd10      	pop	{r4, pc}

000d4ebc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4ebc:	b508      	push	{r3, lr}
      { delete this; }
   d4ebe:	f7ff fff6 	bl	d4eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ec2:	bd08      	pop	{r3, pc}

000d4ec4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ec4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4ec6:	2200      	movs	r2, #0
   d4ec8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4ecc:	6002      	str	r2, [r0, #0]
   d4ece:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ed0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ed4:	680c      	ldr	r4, [r1, #0]
   d4ed6:	8085      	strh	r5, [r0, #4]
   d4ed8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eda:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4edc:	bd30      	pop	{r4, r5, pc}

000d4ede <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ede:	b510      	push	{r4, lr}
   d4ee0:	4604      	mov	r4, r0
    free((void*)msg_);
   d4ee2:	6800      	ldr	r0, [r0, #0]
   d4ee4:	f7ff fbf6 	bl	d46d4 <free>
}
   d4ee8:	4620      	mov	r0, r4
   d4eea:	bd10      	pop	{r4, pc}

000d4eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4eec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4eee:	68c4      	ldr	r4, [r0, #12]
   d4ef0:	b1f4      	cbz	r4, d4f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4ef2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ef4:	2b02      	cmp	r3, #2
   d4ef6:	d103      	bne.n	d4f00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4ef8:	f104 000c 	add.w	r0, r4, #12
   d4efc:	f7ff ffef 	bl	d4ede <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4f00:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f02:	b135      	cbz	r5, d4f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4f04:	4628      	mov	r0, r5
   d4f06:	f7ff ff0e 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
   d4f0a:	2110      	movs	r1, #16
   d4f0c:	4628      	mov	r0, r5
   d4f0e:	f000 fcf8 	bl	d5902 <_ZdlPvj>
   d4f12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f14:	b135      	cbz	r5, d4f24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4f16:	4628      	mov	r0, r5
   d4f18:	f7ff ff05 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
   d4f1c:	2110      	movs	r1, #16
   d4f1e:	4628      	mov	r0, r5
   d4f20:	f000 fcef 	bl	d5902 <_ZdlPvj>
   d4f24:	4620      	mov	r0, r4
   d4f26:	2114      	movs	r1, #20
   d4f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f2c:	f000 bce9 	b.w	d5902 <_ZdlPvj>
   d4f30:	bd38      	pop	{r3, r4, r5, pc}

000d4f32 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d4f32:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d4f34:	2308      	movs	r3, #8
   d4f36:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d4f3a:	6803      	ldr	r3, [r0, #0]
   d4f3c:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d4f40:	7a03      	ldrb	r3, [r0, #8]
   d4f42:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4f46:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d4f48:	6843      	ldr	r3, [r0, #4]
   d4f4a:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4f4c:	4668      	mov	r0, sp
   d4f4e:	f7ff fbb1 	bl	d46b4 <spark_cloud_disconnect>
}
   d4f52:	b003      	add	sp, #12
   d4f54:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f5a:	460e      	mov	r6, r1
   d4f5c:	4604      	mov	r4, r0
   d4f5e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4f62:	9300      	str	r3, [sp, #0]
   d4f64:	460d      	mov	r5, r1
   d4f66:	a801      	add	r0, sp, #4
   d4f68:	4631      	mov	r1, r6
   d4f6a:	f7ff fe19 	bl	d4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f6e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f70:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4f72:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f74:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4f76:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4f78:	2300      	movs	r3, #0
   d4f7a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f7c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4f7e:	f7ff fe16 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f82:	4630      	mov	r0, r6
   d4f84:	f7ff fe13 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4f88:	4628      	mov	r0, r5
   d4f8a:	2108      	movs	r1, #8
   d4f8c:	f000 fcb9 	bl	d5902 <_ZdlPvj>
        return p;
    }
   d4f90:	4620      	mov	r0, r4
   d4f92:	b002      	add	sp, #8
   d4f94:	bd70      	pop	{r4, r5, r6, pc}

000d4f96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4f98:	b510      	push	{r4, lr}
      if (_M_empty())
   d4f9a:	b90a      	cbnz	r2, d4fa0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f9c:	f000 fcb5 	bl	d590a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fa4:	68c3      	ldr	r3, [r0, #12]
   d4fa6:	4718      	bx	r3

000d4fa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4fa8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4faa:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4fac:	f100 0110 	add.w	r1, r0, #16
   d4fb0:	f7ff fff1 	bl	d4f96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4fb4:	bd08      	pop	{r3, pc}

000d4fb6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4fb6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4fb8:	b510      	push	{r4, lr}
      if (_M_empty())
   d4fba:	b90a      	cbnz	r2, d4fc0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4fbc:	f000 fca5 	bl	d590a <_ZSt25__throw_bad_function_callv>
    }
   d4fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fc4:	68c3      	ldr	r3, [r0, #12]
   d4fc6:	4718      	bx	r3

000d4fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4fc8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4fca:	6800      	ldr	r0, [r0, #0]
   d4fcc:	f100 0110 	add.w	r1, r0, #16
   d4fd0:	f7ff fff1 	bl	d4fb6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4fd4:	bd08      	pop	{r3, pc}
	...

000d4fd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fd8:	b538      	push	{r3, r4, r5, lr}
   d4fda:	2300      	movs	r3, #0
   d4fdc:	4604      	mov	r4, r0
   d4fde:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fe0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fe2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fe4:	f7ff f855 	bl	d4092 <_Znwj>
   d4fe8:	b128      	cbz	r0, d4ff6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4fea:	2301      	movs	r3, #1
   d4fec:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4ff0:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4ff2:	6003      	str	r3, [r0, #0]
   d4ff4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ff6:	6020      	str	r0, [r4, #0]
	}
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	bd38      	pop	{r3, r4, r5, pc}
   d4ffc:	000d5b8c 	.word	0x000d5b8c

000d5000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5000:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5002:	2300      	movs	r3, #0
   d5004:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5006:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5008:	4604      	mov	r4, r0
   d500a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d500c:	b12b      	cbz	r3, d501a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d500e:	2202      	movs	r2, #2
   d5010:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5012:	68eb      	ldr	r3, [r5, #12]
   d5014:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5016:	68ab      	ldr	r3, [r5, #8]
   d5018:	60a3      	str	r3, [r4, #8]
    }
   d501a:	4620      	mov	r0, r4
   d501c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5020:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5022:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5024:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5026:	4668      	mov	r0, sp
   d5028:	f7ff ff4c 	bl	d4ec4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d502c:	f04f 0302 	mov.w	r3, #2
   d5030:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5034:	2a00      	cmp	r2, #0
   d5036:	d103      	bne.n	d5040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5038:	e8c4 3f41 	strexb	r1, r3, [r4]
   d503c:	2900      	cmp	r1, #0
   d503e:	d1f7      	bne.n	d5030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5040:	d125      	bne.n	d508e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5042:	f104 050c 	add.w	r5, r4, #12
   d5046:	4669      	mov	r1, sp
   d5048:	4628      	mov	r0, r5
   d504a:	f7ff ff3b 	bl	d4ec4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d504e:	f3bf 8f5b 	dmb	ish
   d5052:	2301      	movs	r3, #1
   d5054:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5056:	2000      	movs	r0, #0
   d5058:	f104 0308 	add.w	r3, r4, #8
   d505c:	f3bf 8f5b 	dmb	ish
   d5060:	e853 6f00 	ldrex	r6, [r3]
   d5064:	e843 0200 	strex	r2, r0, [r3]
   d5068:	2a00      	cmp	r2, #0
   d506a:	d1f9      	bne.n	d5060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d506c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5070:	b16e      	cbz	r6, d508e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5072:	f7ff fa79 	bl	d4568 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5076:	b178      	cbz	r0, d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5078:	4629      	mov	r1, r5
   d507a:	4630      	mov	r0, r6
   d507c:	f7ff ff8b 	bl	d4f96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5080:	4630      	mov	r0, r6
   d5082:	f7ff fe50 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5086:	2110      	movs	r1, #16
   d5088:	4630      	mov	r0, r6
   d508a:	f000 fc3a 	bl	d5902 <_ZdlPvj>
        p_->setError(std::move(error));
   d508e:	4668      	mov	r0, sp
   d5090:	f7ff ff25 	bl	d4ede <_ZN8particle5ErrorD1Ev>
    }
   d5094:	b009      	add	sp, #36	; 0x24
   d5096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5098:	4631      	mov	r1, r6
   d509a:	a802      	add	r0, sp, #8
   d509c:	f7ff ffb0 	bl	d5000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d50a0:	68e0      	ldr	r0, [r4, #12]
   d50a2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d50a6:	b108      	cbz	r0, d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d50a8:	f000 fc82 	bl	d59b0 <strdup>
        type_(type) {
   d50ac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50ae:	2010      	movs	r0, #16
   d50b0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d50b4:	f7fe ffed 	bl	d4092 <_Znwj>
   d50b8:	4605      	mov	r5, r0
   d50ba:	b1e8      	cbz	r0, d50f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d50bc:	2700      	movs	r7, #0
   d50be:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50c0:	2018      	movs	r0, #24
   d50c2:	f7fe ffe6 	bl	d4092 <_Znwj>
   d50c6:	4604      	mov	r4, r0
   d50c8:	b188      	cbz	r0, d50ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d50ca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d50cc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d50ce:	a802      	add	r0, sp, #8
   d50d0:	f7ff fe38 	bl	d4d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50d6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d50dc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50de:	a906      	add	r1, sp, #24
   d50e0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50e2:	60e3      	str	r3, [r4, #12]
   d50e4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d50e8:	9205      	str	r2, [sp, #20]
   d50ea:	f7ff feeb 	bl	d4ec4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d50ee:	4b08      	ldr	r3, [pc, #32]	; (d5110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d50f0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d50f2:	4b08      	ldr	r3, [pc, #32]	; (d5114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50f4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d50f6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d50f8:	a806      	add	r0, sp, #24
   d50fa:	f7ff fef0 	bl	d4ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d50fe:	a802      	add	r0, sp, #8
   d5100:	f7ff fe11 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5104:	2200      	movs	r2, #0
   d5106:	4629      	mov	r1, r5
   d5108:	4803      	ldr	r0, [pc, #12]	; (d5118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d510a:	f7ff fa35 	bl	d4578 <application_thread_invoke>
   d510e:	e7b7      	b.n	d5080 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5110:	000d4fa9 	.word	0x000d4fa9
   d5114:	000d5241 	.word	0x000d5241
   d5118:	000d5781 	.word	0x000d5781

000d511c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5120:	b08a      	sub	sp, #40	; 0x28
   d5122:	4605      	mov	r5, r0
   d5124:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5128:	460c      	mov	r4, r1
   d512a:	4617      	mov	r7, r2
   d512c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d512e:	f7ff faa9 	bl	d4684 <spark_cloud_flag_connected>
   d5132:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5134:	4682      	mov	sl, r0
   d5136:	bb38      	cbnz	r0, d5188 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5138:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d513c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d513e:	a905      	add	r1, sp, #20
   d5140:	4630      	mov	r0, r6
   d5142:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5146:	f7ff febd 	bl	d4ec4 <_ZN8particle5ErrorC1EOS0_>
   d514a:	2014      	movs	r0, #20
   d514c:	f7fe ffa1 	bl	d4092 <_Znwj>
   d5150:	4604      	mov	r4, r0
   d5152:	b148      	cbz	r0, d5168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5154:	2302      	movs	r3, #2
   d5156:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5158:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d515a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d515e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5160:	4631      	mov	r1, r6
   d5162:	300c      	adds	r0, #12
   d5164:	f7ff feae 	bl	d4ec4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5168:	4628      	mov	r0, r5
	: __shared_count(__p)
   d516a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d516c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5170:	f7ff ff32 	bl	d4fd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5174:	4630      	mov	r0, r6
   d5176:	f7ff feb2 	bl	d4ede <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d517a:	a805      	add	r0, sp, #20
   d517c:	f7ff feaf 	bl	d4ede <_ZN8particle5ErrorD1Ev>
}
   d5180:	4628      	mov	r0, r5
   d5182:	b00a      	add	sp, #40	; 0x28
   d5184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5188:	230c      	movs	r3, #12
   d518a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d518e:	2014      	movs	r0, #20
   d5190:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5194:	9307      	str	r3, [sp, #28]
   d5196:	f7fe ff7c 	bl	d4092 <_Znwj>
   d519a:	4601      	mov	r1, r0
   d519c:	b128      	cbz	r0, d51aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d519e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d51a2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51a6:	f880 a001 	strb.w	sl, [r0, #1]
   d51aa:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51ac:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d51ae:	f7ff ff13 	bl	d4fd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d51b2:	4b22      	ldr	r3, [pc, #136]	; (d523c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d51b4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51b6:	2008      	movs	r0, #8
   d51b8:	f7fe ff6b 	bl	d4092 <_Znwj>
   d51bc:	4682      	mov	sl, r0
   d51be:	b128      	cbz	r0, d51cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51c0:	9b03      	ldr	r3, [sp, #12]
   d51c2:	f840 3b04 	str.w	r3, [r0], #4
   d51c6:	a904      	add	r1, sp, #16
   d51c8:	f7ff fcea 	bl	d4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51cc:	9600      	str	r6, [sp, #0]
   d51ce:	fa5f f389 	uxtb.w	r3, r9
   d51d2:	4642      	mov	r2, r8
   d51d4:	4639      	mov	r1, r7
   d51d6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d51d8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51dc:	f7ff fa5a 	bl	d4694 <spark_send_event>
   d51e0:	b9b8      	cbnz	r0, d5212 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d51e2:	9b03      	ldr	r3, [sp, #12]
   d51e4:	785b      	ldrb	r3, [r3, #1]
   d51e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d51ea:	b993      	cbnz	r3, d5212 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d51ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d51f0:	a905      	add	r1, sp, #20
   d51f2:	a803      	add	r0, sp, #12
   d51f4:	9205      	str	r2, [sp, #20]
   d51f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51fa:	f7ff ff11 	bl	d5020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51fe:	a805      	add	r0, sp, #20
   d5200:	f7ff fe6d 	bl	d4ede <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5204:	a805      	add	r0, sp, #20
   d5206:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5208:	f7ff fea6 	bl	d4f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d520c:	a806      	add	r0, sp, #24
   d520e:	f7ff fcce 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5212:	9b03      	ldr	r3, [sp, #12]
   d5214:	9305      	str	r3, [sp, #20]
   d5216:	a904      	add	r1, sp, #16
   d5218:	a806      	add	r0, sp, #24
   d521a:	f7ff fcc1 	bl	d4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d521e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5220:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5222:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5224:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5226:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5228:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d522a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d522c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d522e:	f7ff fcbe 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5232:	a804      	add	r0, sp, #16
   d5234:	f7ff fcbb 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5238:	e7a2      	b.n	d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d523a:	bf00      	nop
   d523c:	000d5305 	.word	0x000d5305

000d5240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5240:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5244:	4605      	mov	r5, r0
	  switch (__op)
   d5246:	d007      	beq.n	d5258 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5248:	2a03      	cmp	r2, #3
   d524a:	d018      	beq.n	d527e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d524c:	2a01      	cmp	r2, #1
   d524e:	d101      	bne.n	d5254 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5250:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5252:	6003      	str	r3, [r0, #0]
	}
   d5254:	2000      	movs	r0, #0
   d5256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5258:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d525a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d525c:	f7fe ff19 	bl	d4092 <_Znwj>
   d5260:	4604      	mov	r4, r0
   d5262:	b150      	cbz	r0, d527a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5264:	4631      	mov	r1, r6
   d5266:	f7ff fecb 	bl	d5000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d526a:	6930      	ldr	r0, [r6, #16]
   d526c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5270:	b108      	cbz	r0, d5276 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5272:	f000 fb9d 	bl	d59b0 <strdup>
        type_(type) {
   d5276:	6120      	str	r0, [r4, #16]
   d5278:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d527a:	602c      	str	r4, [r5, #0]
	}
   d527c:	e7ea      	b.n	d5254 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d527e:	6804      	ldr	r4, [r0, #0]
   d5280:	2c00      	cmp	r4, #0
   d5282:	d0e7      	beq.n	d5254 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5284:	f104 0010 	add.w	r0, r4, #16
   d5288:	f7ff fe29 	bl	d4ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d528c:	4620      	mov	r0, r4
   d528e:	f7ff fd4a 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5292:	2118      	movs	r1, #24
   d5294:	4620      	mov	r0, r4
   d5296:	f000 fb34 	bl	d5902 <_ZdlPvj>
   d529a:	e7db      	b.n	d5254 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d529c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d529c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d529e:	2300      	movs	r3, #0
   d52a0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d52a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d52a4:	4604      	mov	r4, r0
   d52a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d52a8:	b12b      	cbz	r3, d52b6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52aa:	2202      	movs	r2, #2
   d52ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52ae:	68eb      	ldr	r3, [r5, #12]
   d52b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52b2:	68ab      	ldr	r3, [r5, #8]
   d52b4:	60a3      	str	r3, [r4, #8]
    }
   d52b6:	4620      	mov	r0, r4
   d52b8:	bd38      	pop	{r3, r4, r5, pc}

000d52ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d52ba:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52bc:	b570      	push	{r4, r5, r6, lr}
   d52be:	4604      	mov	r4, r0
	  switch (__op)
   d52c0:	d007      	beq.n	d52d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d52c2:	2a03      	cmp	r2, #3
   d52c4:	d012      	beq.n	d52ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d52c6:	2a01      	cmp	r2, #1
   d52c8:	d101      	bne.n	d52ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d52ca:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52cc:	6003      	str	r3, [r0, #0]
	}
   d52ce:	2000      	movs	r0, #0
   d52d0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52d2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d52d4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52d6:	f7fe fedc 	bl	d4092 <_Znwj>
   d52da:	4605      	mov	r5, r0
   d52dc:	b120      	cbz	r0, d52e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d52de:	4631      	mov	r1, r6
   d52e0:	f7ff ffdc 	bl	d529c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d52e4:	7c33      	ldrb	r3, [r6, #16]
   d52e6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d52e8:	6025      	str	r5, [r4, #0]
	}
   d52ea:	e7f0      	b.n	d52ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d52ec:	6804      	ldr	r4, [r0, #0]
   d52ee:	2c00      	cmp	r4, #0
   d52f0:	d0ed      	beq.n	d52ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff fd17 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d52f8:	2114      	movs	r1, #20
   d52fa:	4620      	mov	r0, r4
   d52fc:	f000 fb01 	bl	d5902 <_ZdlPvj>
   d5300:	e7e5      	b.n	d52ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5304 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5304:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5306:	b089      	sub	sp, #36	; 0x24
   d5308:	4604      	mov	r4, r0
   d530a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d530c:	a801      	add	r0, sp, #4
   d530e:	4611      	mov	r1, r2
   d5310:	f7ff fe22 	bl	d4f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5314:	b1a4      	cbz	r4, d5340 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5316:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5318:	b11d      	cbz	r5, d5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d531a:	4628      	mov	r0, r5
   d531c:	f000 fb48 	bl	d59b0 <strdup>
   d5320:	4605      	mov	r5, r0
   d5322:	a801      	add	r0, sp, #4
   d5324:	a903      	add	r1, sp, #12
        type_(type) {
   d5326:	9503      	str	r5, [sp, #12]
   d5328:	f8ad 4010 	strh.w	r4, [sp, #16]
   d532c:	f7ff fe78 	bl	d5020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5330:	a803      	add	r0, sp, #12
   d5332:	f7ff fdd4 	bl	d4ede <_ZN8particle5ErrorD1Ev>
   d5336:	a802      	add	r0, sp, #8
   d5338:	f7ff fc39 	bl	d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d533c:	b009      	add	sp, #36	; 0x24
   d533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5340:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5342:	2301      	movs	r3, #1
   d5344:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5348:	2a00      	cmp	r2, #0
   d534a:	d103      	bne.n	d5354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d534c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5350:	2900      	cmp	r1, #0
   d5352:	d1f7      	bne.n	d5344 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5354:	d1ef      	bne.n	d5336 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5356:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5358:	f3bf 8f5b 	dmb	ish
   d535c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d535e:	1d2b      	adds	r3, r5, #4
   d5360:	f3bf 8f5b 	dmb	ish
   d5364:	e853 6f00 	ldrex	r6, [r3]
   d5368:	e843 4200 	strex	r2, r4, [r3]
   d536c:	2a00      	cmp	r2, #0
   d536e:	d1f9      	bne.n	d5364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5370:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5374:	2e00      	cmp	r6, #0
   d5376:	d0de      	beq.n	d5336 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff f8f5 	bl	d4568 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d537e:	4607      	mov	r7, r0
   d5380:	b160      	cbz	r0, d539c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5382:	f105 010c 	add.w	r1, r5, #12
   d5386:	4630      	mov	r0, r6
   d5388:	f7ff fe15 	bl	d4fb6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d538c:	4630      	mov	r0, r6
   d538e:	f7ff fcca 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5392:	2110      	movs	r1, #16
   d5394:	4630      	mov	r0, r6
   d5396:	f000 fab4 	bl	d5902 <_ZdlPvj>
   d539a:	e7cc      	b.n	d5336 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d539c:	4631      	mov	r1, r6
   d539e:	a803      	add	r0, sp, #12
   d53a0:	f7ff ff7c 	bl	d529c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53a4:	7b2b      	ldrb	r3, [r5, #12]
   d53a6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53aa:	2010      	movs	r0, #16
   d53ac:	f7fe fe71 	bl	d4092 <_Znwj>
   d53b0:	4605      	mov	r5, r0
   d53b2:	b1d0      	cbz	r0, d53ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d53b4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53b6:	2014      	movs	r0, #20
   d53b8:	f7fe fe6b 	bl	d4092 <_Znwj>
   d53bc:	4604      	mov	r4, r0
   d53be:	b178      	cbz	r0, d53e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d53c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53c2:	4601      	mov	r1, r0
   d53c4:	a803      	add	r0, sp, #12
   d53c6:	f7ff fcbd 	bl	d4d44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ce:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53d0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d53d2:	9205      	str	r2, [sp, #20]
   d53d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53d6:	60e3      	str	r3, [r4, #12]
   d53d8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d53dc:	9206      	str	r2, [sp, #24]
   d53de:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d53e0:	4b06      	ldr	r3, [pc, #24]	; (d53fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d53e2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53e4:	4b06      	ldr	r3, [pc, #24]	; (d5400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53e6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d53e8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d53ea:	a803      	add	r0, sp, #12
   d53ec:	f7ff fc9b 	bl	d4d26 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53f0:	2200      	movs	r2, #0
   d53f2:	4629      	mov	r1, r5
   d53f4:	4803      	ldr	r0, [pc, #12]	; (d5404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d53f6:	f7ff f8bf 	bl	d4578 <application_thread_invoke>
   d53fa:	e7c7      	b.n	d538c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d53fc:	000d4fc9 	.word	0x000d4fc9
   d5400:	000d52bb 	.word	0x000d52bb
   d5404:	000d5781 	.word	0x000d5781

000d5408 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5408:	4770      	bx	lr

000d540a <_ZN9IPAddressD0Ev>:
   d540a:	b510      	push	{r4, lr}
   d540c:	2118      	movs	r1, #24
   d540e:	4604      	mov	r4, r0
   d5410:	f000 fa77 	bl	d5902 <_ZdlPvj>
   d5414:	4620      	mov	r0, r4
   d5416:	bd10      	pop	{r4, pc}

000d5418 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5418:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d541a:	7d03      	ldrb	r3, [r0, #20]
   d541c:	2b06      	cmp	r3, #6
{
   d541e:	b08d      	sub	sp, #52	; 0x34
   d5420:	460e      	mov	r6, r1
   d5422:	f100 0704 	add.w	r7, r0, #4
   d5426:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d542a:	d012      	beq.n	d5452 <_ZNK9IPAddress7printToER5Print+0x3a>
   d542c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5430:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5434:	220a      	movs	r2, #10
   d5436:	4630      	mov	r0, r6
   d5438:	f7ff fc11 	bl	d4c5e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d543c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d543e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5440:	d019      	beq.n	d5476 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5442:	2c00      	cmp	r4, #0
   d5444:	d0f4      	beq.n	d5430 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5446:	212e      	movs	r1, #46	; 0x2e
   d5448:	4630      	mov	r0, r6
   d544a:	f7ff fbf9 	bl	d4c40 <_ZN5Print5printEc>
   d544e:	4404      	add	r4, r0
   d5450:	e7ee      	b.n	d5430 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5452:	232f      	movs	r3, #47	; 0x2f
   d5454:	466a      	mov	r2, sp
   d5456:	4639      	mov	r1, r7
   d5458:	200a      	movs	r0, #10
		buf[0] = 0;
   d545a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d545e:	f7fe fff3 	bl	d4448 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5462:	4668      	mov	r0, sp
   d5464:	f000 fac1 	bl	d59ea <strlen>
   d5468:	6833      	ldr	r3, [r6, #0]
   d546a:	4602      	mov	r2, r0
   d546c:	68db      	ldr	r3, [r3, #12]
   d546e:	4669      	mov	r1, sp
   d5470:	4630      	mov	r0, r6
   d5472:	4798      	blx	r3
   d5474:	4604      	mov	r4, r0
    }
    return n;
}
   d5476:	4620      	mov	r0, r4
   d5478:	b00d      	add	sp, #52	; 0x34
   d547a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d547c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d547c:	b510      	push	{r4, lr}
   d547e:	4b05      	ldr	r3, [pc, #20]	; (d5494 <_ZN9IPAddressC1Ev+0x18>)
   d5480:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5482:	2211      	movs	r2, #17
   d5484:	f840 3b04 	str.w	r3, [r0], #4
   d5488:	2100      	movs	r1, #0
   d548a:	f000 fa5d 	bl	d5948 <memset>
}
   d548e:	4620      	mov	r0, r4
   d5490:	bd10      	pop	{r4, pc}
   d5492:	bf00      	nop
   d5494:	000d5ba8 	.word	0x000d5ba8

000d5498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5498:	4603      	mov	r3, r0
   d549a:	4a07      	ldr	r2, [pc, #28]	; (d54b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d549c:	b510      	push	{r4, lr}
   d549e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d54a2:	f101 0210 	add.w	r2, r1, #16
   d54a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d54aa:	f843 4b04 	str.w	r4, [r3], #4
   d54ae:	4291      	cmp	r1, r2
   d54b0:	d1f9      	bne.n	d54a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54b2:	780a      	ldrb	r2, [r1, #0]
   d54b4:	701a      	strb	r2, [r3, #0]
}
   d54b6:	bd10      	pop	{r4, pc}
   d54b8:	000d5ba8 	.word	0x000d5ba8

000d54bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d54bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d54be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d54c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d54c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d54ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d54ce:	2304      	movs	r3, #4
   d54d0:	6041      	str	r1, [r0, #4]
   d54d2:	7503      	strb	r3, [r0, #20]
}
   d54d4:	bd10      	pop	{r4, pc}

000d54d6 <_ZN9IPAddressaSEPKh>:
{
   d54d6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d54d8:	78cb      	ldrb	r3, [r1, #3]
   d54da:	9300      	str	r3, [sp, #0]
   d54dc:	788b      	ldrb	r3, [r1, #2]
   d54de:	784a      	ldrb	r2, [r1, #1]
   d54e0:	7809      	ldrb	r1, [r1, #0]
   d54e2:	f7ff ffeb 	bl	d54bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d54e6:	b002      	add	sp, #8
   d54e8:	bd10      	pop	{r4, pc}

000d54ea <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54ea:	7441      	strb	r1, [r0, #17]
}
   d54ec:	4770      	bx	lr

000d54ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54ee:	4770      	bx	lr

000d54f0 <_ZN9USBSerial4readEv>:
{
   d54f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54f2:	2100      	movs	r1, #0
   d54f4:	7c00      	ldrb	r0, [r0, #16]
   d54f6:	f7ff f807 	bl	d4508 <HAL_USB_USART_Receive_Data>
}
   d54fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54fe:	bd08      	pop	{r3, pc}

000d5500 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5500:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5502:	2101      	movs	r1, #1
   d5504:	7c00      	ldrb	r0, [r0, #16]
   d5506:	f7fe ffff 	bl	d4508 <HAL_USB_USART_Receive_Data>
}
   d550a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d550e:	bd08      	pop	{r3, pc}

000d5510 <_ZN9USBSerial17availableForWriteEv>:
{
   d5510:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5512:	7c00      	ldrb	r0, [r0, #16]
   d5514:	f7fe fff0 	bl	d44f8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d551c:	bd08      	pop	{r3, pc}

000d551e <_ZN9USBSerial9availableEv>:
{
   d551e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5520:	7c00      	ldrb	r0, [r0, #16]
   d5522:	f7fe ffe1 	bl	d44e8 <HAL_USB_USART_Available_Data>
}
   d5526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d552a:	bd08      	pop	{r3, pc}

000d552c <_ZN9USBSerial5writeEh>:
{
   d552c:	b513      	push	{r0, r1, r4, lr}
   d552e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5530:	7c00      	ldrb	r0, [r0, #16]
{
   d5532:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5534:	f7fe ffe0 	bl	d44f8 <HAL_USB_USART_Available_Data_For_Write>
   d5538:	2800      	cmp	r0, #0
   d553a:	9901      	ldr	r1, [sp, #4]
   d553c:	dc01      	bgt.n	d5542 <_ZN9USBSerial5writeEh+0x16>
   d553e:	7c60      	ldrb	r0, [r4, #17]
   d5540:	b120      	cbz	r0, d554c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5542:	7c20      	ldrb	r0, [r4, #16]
   d5544:	f7fe ffe8 	bl	d4518 <HAL_USB_USART_Send_Data>
   d5548:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d554c:	b002      	add	sp, #8
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	f7fe bfe9 	b.w	d4528 <HAL_USB_USART_Flush_Data>

000d5556 <_ZN9USBSerialD0Ev>:
   d5556:	b510      	push	{r4, lr}
   d5558:	2114      	movs	r1, #20
   d555a:	4604      	mov	r4, r0
   d555c:	f000 f9d1 	bl	d5902 <_ZdlPvj>
   d5560:	4620      	mov	r0, r4
   d5562:	bd10      	pop	{r4, pc}

000d5564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5564:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d556a:	4604      	mov	r4, r0
   d556c:	4608      	mov	r0, r1
   d556e:	2100      	movs	r1, #0
   d5570:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5574:	4b04      	ldr	r3, [pc, #16]	; (d5588 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5576:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5578:	2301      	movs	r3, #1
  _serial = serial;
   d557a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d557c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d557e:	4611      	mov	r1, r2
   d5580:	f7fe ffa2 	bl	d44c8 <HAL_USB_USART_Init>
}
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}
   d5588:	000d5bbc 	.word	0x000d5bbc

000d558c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d558c:	7c00      	ldrb	r0, [r0, #16]
   d558e:	2200      	movs	r2, #0
   d5590:	f7fe bfa2 	b.w	d44d8 <HAL_USB_USART_Begin>

000d5594 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5594:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5596:	2214      	movs	r2, #20
{
   d5598:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d559a:	2100      	movs	r1, #0
   d559c:	f000 f9d4 	bl	d5948 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55a0:	4620      	mov	r0, r4
   d55a2:	bd10      	pop	{r4, pc}

000d55a4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55a6:	4c10      	ldr	r4, [pc, #64]	; (d55e8 <_Z16_fetch_usbserialv+0x44>)
{
   d55a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55aa:	a803      	add	r0, sp, #12
   d55ac:	f7ff fff2 	bl	d5594 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55b0:	7821      	ldrb	r1, [r4, #0]
   d55b2:	f3bf 8f5b 	dmb	ish
   d55b6:	f011 0101 	ands.w	r1, r1, #1
   d55ba:	d111      	bne.n	d55e0 <_Z16_fetch_usbserialv+0x3c>
   d55bc:	4620      	mov	r0, r4
   d55be:	9101      	str	r1, [sp, #4]
   d55c0:	f7fe fd6b 	bl	d409a <__cxa_guard_acquire>
   d55c4:	9901      	ldr	r1, [sp, #4]
   d55c6:	b158      	cbz	r0, d55e0 <_Z16_fetch_usbserialv+0x3c>
   d55c8:	aa03      	add	r2, sp, #12
   d55ca:	4808      	ldr	r0, [pc, #32]	; (d55ec <_Z16_fetch_usbserialv+0x48>)
   d55cc:	f7ff ffca 	bl	d5564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55d0:	4620      	mov	r0, r4
   d55d2:	f7fe fd67 	bl	d40a4 <__cxa_guard_release>
   d55d6:	4a06      	ldr	r2, [pc, #24]	; (d55f0 <_Z16_fetch_usbserialv+0x4c>)
   d55d8:	4906      	ldr	r1, [pc, #24]	; (d55f4 <_Z16_fetch_usbserialv+0x50>)
   d55da:	4804      	ldr	r0, [pc, #16]	; (d55ec <_Z16_fetch_usbserialv+0x48>)
   d55dc:	f000 f98c 	bl	d58f8 <__aeabi_atexit>
	return _usbserial;
}
   d55e0:	4802      	ldr	r0, [pc, #8]	; (d55ec <_Z16_fetch_usbserialv+0x48>)
   d55e2:	b008      	add	sp, #32
   d55e4:	bd10      	pop	{r4, pc}
   d55e6:	bf00      	nop
   d55e8:	2003e67c 	.word	0x2003e67c
   d55ec:	2003e680 	.word	0x2003e680
   d55f0:	2003e62c 	.word	0x2003e62c
   d55f4:	000d54ef 	.word	0x000d54ef

000d55f8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d55f8:	2200      	movs	r2, #0
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	4611      	mov	r1, r2
   d55fe:	f7fe bff9 	b.w	d45f4 <network_ready>

000d5602 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5602:	2200      	movs	r2, #0
   d5604:	6840      	ldr	r0, [r0, #4]
   d5606:	4611      	mov	r1, r2
   d5608:	f7ff b814 	b.w	d4634 <network_listening>

000d560c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d560c:	2200      	movs	r2, #0
   d560e:	6840      	ldr	r0, [r0, #4]
   d5610:	4611      	mov	r1, r2
   d5612:	f7ff b81f 	b.w	d4654 <network_get_listen_timeout>

000d5616 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5616:	6840      	ldr	r0, [r0, #4]
   d5618:	2200      	movs	r2, #0
   d561a:	f7ff b813 	b.w	d4644 <network_set_listen_timeout>

000d561e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	2200      	movs	r2, #0
   d5622:	f081 0101 	eor.w	r1, r1, #1
   d5626:	f7fe bffd 	b.w	d4624 <network_listen>

000d562a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d562a:	2300      	movs	r3, #0
   d562c:	6840      	ldr	r0, [r0, #4]
   d562e:	461a      	mov	r2, r3
   d5630:	4619      	mov	r1, r3
   d5632:	f7fe bfe7 	b.w	d4604 <network_on>

000d5636 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5636:	2200      	movs	r2, #0
   d5638:	6840      	ldr	r0, [r0, #4]
   d563a:	4611      	mov	r1, r2
   d563c:	f7fe bfca 	b.w	d45d4 <network_connecting>

000d5640 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5640:	6840      	ldr	r0, [r0, #4]
   d5642:	2200      	movs	r2, #0
   d5644:	2102      	movs	r1, #2
   d5646:	f7fe bfcd 	b.w	d45e4 <network_disconnect>

000d564a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d564a:	2300      	movs	r3, #0
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	461a      	mov	r2, r3
   d5650:	f7fe bfb8 	b.w	d45c4 <network_connect>

000d5654 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5654:	4b08      	ldr	r3, [pc, #32]	; (d5678 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5656:	b510      	push	{r4, lr}
   d5658:	2428      	movs	r4, #40	; 0x28
   d565a:	4622      	mov	r2, r4
   d565c:	4618      	mov	r0, r3
   d565e:	2100      	movs	r1, #0
   d5660:	f000 f972 	bl	d5948 <memset>
   d5664:	4b05      	ldr	r3, [pc, #20]	; (d567c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5666:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5668:	f04f 32ff 	mov.w	r2, #4294967295
   d566c:	6042      	str	r2, [r0, #4]
   d566e:	2204      	movs	r2, #4
   d5670:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5672:	4a03      	ldr	r2, [pc, #12]	; (d5680 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5674:	601a      	str	r2, [r3, #0]
   d5676:	bd10      	pop	{r4, pc}
   d5678:	2003e69c 	.word	0x2003e69c
   d567c:	2003e694 	.word	0x2003e694
   d5680:	000d5bec 	.word	0x000d5bec

000d5684 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5684:	4770      	bx	lr

000d5686 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5686:	7441      	strb	r1, [r0, #17]
}
   d5688:	4770      	bx	lr

000d568a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d568a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d568c:	7c00      	ldrb	r0, [r0, #16]
   d568e:	f7fe ff13 	bl	d44b8 <hal_usart_available_data_for_write>
}
   d5692:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5696:	bd08      	pop	{r3, pc}

000d5698 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5698:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d569a:	7c00      	ldrb	r0, [r0, #16]
   d569c:	f7fe feec 	bl	d4478 <hal_usart_available>
}
   d56a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56a4:	bd08      	pop	{r3, pc}

000d56a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d56a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d56a8:	7c00      	ldrb	r0, [r0, #16]
   d56aa:	f7fe fef5 	bl	d4498 <hal_usart_peek>
}
   d56ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56b2:	bd08      	pop	{r3, pc}

000d56b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d56b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d56b6:	7c00      	ldrb	r0, [r0, #16]
   d56b8:	f7fe fee6 	bl	d4488 <hal_usart_read>
}
   d56bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56c0:	bd08      	pop	{r3, pc}

000d56c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d56c2:	7c00      	ldrb	r0, [r0, #16]
   d56c4:	f7fe bef0 	b.w	d44a8 <hal_usart_flush>

000d56c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56ca:	7c45      	ldrb	r5, [r0, #17]
{
   d56cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56ce:	b12d      	cbz	r5, d56dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d56d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56d2:	b003      	add	sp, #12
   d56d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d56d8:	f7fe bec6 	b.w	d4468 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56dc:	7c00      	ldrb	r0, [r0, #16]
   d56de:	9101      	str	r1, [sp, #4]
   d56e0:	f7fe feea 	bl	d44b8 <hal_usart_available_data_for_write>
   d56e4:	2800      	cmp	r0, #0
   d56e6:	9901      	ldr	r1, [sp, #4]
   d56e8:	dcf2      	bgt.n	d56d0 <_ZN11USARTSerial5writeEh+0x8>
}
   d56ea:	4628      	mov	r0, r5
   d56ec:	b003      	add	sp, #12
   d56ee:	bd30      	pop	{r4, r5, pc}

000d56f0 <_ZN11USARTSerialD0Ev>:
   d56f0:	b510      	push	{r4, lr}
   d56f2:	2114      	movs	r1, #20
   d56f4:	4604      	mov	r4, r0
   d56f6:	f000 f904 	bl	d5902 <_ZdlPvj>
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd10      	pop	{r4, pc}
	...

000d5700 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5700:	b510      	push	{r4, lr}
   d5702:	f04f 0c00 	mov.w	ip, #0
   d5706:	4604      	mov	r4, r0
   d5708:	4608      	mov	r0, r1
   d570a:	4611      	mov	r1, r2
   d570c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5710:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5714:	4a04      	ldr	r2, [pc, #16]	; (d5728 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5716:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5718:	2201      	movs	r2, #1
  _serial = serial;
   d571a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d571c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d571e:	461a      	mov	r2, r3
   d5720:	f7fe fe9a 	bl	d4458 <hal_usart_init>
}
   d5724:	4620      	mov	r0, r4
   d5726:	bd10      	pop	{r4, pc}
   d5728:	000d5c20 	.word	0x000d5c20

000d572c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d572c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d572e:	4c0e      	ldr	r4, [pc, #56]	; (d5768 <_Z22__fetch_global_Serial1v+0x3c>)
   d5730:	7821      	ldrb	r1, [r4, #0]
   d5732:	f3bf 8f5b 	dmb	ish
   d5736:	f011 0101 	ands.w	r1, r1, #1
   d573a:	d112      	bne.n	d5762 <_Z22__fetch_global_Serial1v+0x36>
   d573c:	4620      	mov	r0, r4
   d573e:	9101      	str	r1, [sp, #4]
   d5740:	f7fe fcab 	bl	d409a <__cxa_guard_acquire>
   d5744:	9901      	ldr	r1, [sp, #4]
   d5746:	b160      	cbz	r0, d5762 <_Z22__fetch_global_Serial1v+0x36>
   d5748:	4a08      	ldr	r2, [pc, #32]	; (d576c <_Z22__fetch_global_Serial1v+0x40>)
   d574a:	4b09      	ldr	r3, [pc, #36]	; (d5770 <_Z22__fetch_global_Serial1v+0x44>)
   d574c:	4809      	ldr	r0, [pc, #36]	; (d5774 <_Z22__fetch_global_Serial1v+0x48>)
   d574e:	f7ff ffd7 	bl	d5700 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5752:	4620      	mov	r0, r4
   d5754:	f7fe fca6 	bl	d40a4 <__cxa_guard_release>
   d5758:	4a07      	ldr	r2, [pc, #28]	; (d5778 <_Z22__fetch_global_Serial1v+0x4c>)
   d575a:	4908      	ldr	r1, [pc, #32]	; (d577c <_Z22__fetch_global_Serial1v+0x50>)
   d575c:	4805      	ldr	r0, [pc, #20]	; (d5774 <_Z22__fetch_global_Serial1v+0x48>)
   d575e:	f000 f8cb 	bl	d58f8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5762:	4804      	ldr	r0, [pc, #16]	; (d5774 <_Z22__fetch_global_Serial1v+0x48>)
   d5764:	b002      	add	sp, #8
   d5766:	bd10      	pop	{r4, pc}
   d5768:	2003e6c4 	.word	0x2003e6c4
   d576c:	2003e6c8 	.word	0x2003e6c8
   d5770:	2003e74c 	.word	0x2003e74c
   d5774:	2003e7d0 	.word	0x2003e7d0
   d5778:	2003e62c 	.word	0x2003e62c
   d577c:	000d5685 	.word	0x000d5685

000d5780 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5780:	b510      	push	{r4, lr}
      if (_M_empty())
   d5782:	6883      	ldr	r3, [r0, #8]
   d5784:	4604      	mov	r4, r0
   d5786:	b90b      	cbnz	r3, d578c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5788:	f000 f8bf 	bl	d590a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d578c:	68c3      	ldr	r3, [r0, #12]
   d578e:	4798      	blx	r3
      if (_M_manager)
   d5790:	68a3      	ldr	r3, [r4, #8]
   d5792:	b11b      	cbz	r3, d579c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5794:	2203      	movs	r2, #3
   d5796:	4621      	mov	r1, r4
   d5798:	4620      	mov	r0, r4
   d579a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d579c:	4620      	mov	r0, r4
   d579e:	2110      	movs	r1, #16
}
   d57a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d57a4:	f000 b8ad 	b.w	d5902 <_ZdlPvj>

000d57a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57a8:	2300      	movs	r3, #0
   d57aa:	6840      	ldr	r0, [r0, #4]
   d57ac:	461a      	mov	r2, r3
   d57ae:	f7fe bf09 	b.w	d45c4 <network_connect>

000d57b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57b2:	6840      	ldr	r0, [r0, #4]
   d57b4:	2200      	movs	r2, #0
   d57b6:	2102      	movs	r1, #2
   d57b8:	f7fe bf14 	b.w	d45e4 <network_disconnect>

000d57bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57bc:	2200      	movs	r2, #0
   d57be:	6840      	ldr	r0, [r0, #4]
   d57c0:	4611      	mov	r1, r2
   d57c2:	f7fe bf07 	b.w	d45d4 <network_connecting>

000d57c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57c6:	2200      	movs	r2, #0
   d57c8:	6840      	ldr	r0, [r0, #4]
   d57ca:	4611      	mov	r1, r2
   d57cc:	f7fe bf12 	b.w	d45f4 <network_ready>

000d57d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57d0:	2300      	movs	r3, #0
   d57d2:	6840      	ldr	r0, [r0, #4]
   d57d4:	461a      	mov	r2, r3
   d57d6:	4619      	mov	r1, r3
   d57d8:	f7fe bf14 	b.w	d4604 <network_on>

000d57dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57dc:	2300      	movs	r3, #0
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	461a      	mov	r2, r3
   d57e2:	4619      	mov	r1, r3
   d57e4:	f7fe bf16 	b.w	d4614 <network_off>

000d57e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57e8:	6840      	ldr	r0, [r0, #4]
   d57ea:	2200      	movs	r2, #0
   d57ec:	f081 0101 	eor.w	r1, r1, #1
   d57f0:	f7fe bf18 	b.w	d4624 <network_listen>

000d57f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	2200      	movs	r2, #0
   d57f8:	f7fe bf24 	b.w	d4644 <network_set_listen_timeout>

000d57fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d57fc:	2200      	movs	r2, #0
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	4611      	mov	r1, r2
   d5802:	f7fe bf27 	b.w	d4654 <network_get_listen_timeout>

000d5806 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5806:	2200      	movs	r2, #0
   d5808:	6840      	ldr	r0, [r0, #4]
   d580a:	4611      	mov	r1, r2
   d580c:	f7fe bf12 	b.w	d4634 <network_listening>

000d5810 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5814:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5816:	b095      	sub	sp, #84	; 0x54
   d5818:	4616      	mov	r6, r2
   d581a:	460d      	mov	r5, r1
   d581c:	4607      	mov	r7, r0
    IPAddress addr;
   d581e:	f7ff fe2d 	bl	d547c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5822:	4621      	mov	r1, r4
   d5824:	2218      	movs	r2, #24
   d5826:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5828:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d582a:	f000 f88d 	bl	d5948 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d582e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5830:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5834:	4621      	mov	r1, r4
   d5836:	466b      	mov	r3, sp
   d5838:	aa0c      	add	r2, sp, #48	; 0x30
   d583a:	4630      	mov	r0, r6
   d583c:	f7fe fddc 	bl	d43f8 <netdb_getaddrinfo>
    if (!r) {
   d5840:	4604      	mov	r4, r0
   d5842:	2800      	cmp	r0, #0
   d5844:	d146      	bne.n	d58d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5846:	4602      	mov	r2, r0
   d5848:	2101      	movs	r1, #1
   d584a:	6868      	ldr	r0, [r5, #4]
   d584c:	f7fe fed2 	bl	d45f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5850:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5852:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5854:	4622      	mov	r2, r4
   d5856:	6868      	ldr	r0, [r5, #4]
   d5858:	f7fe fecc 	bl	d45f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d585c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d585e:	4681      	mov	r9, r0
        bool ok = false;
   d5860:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5862:	2e00      	cmp	r6, #0
   d5864:	d036      	beq.n	d58d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5866:	2900      	cmp	r1, #0
   d5868:	d134      	bne.n	d58d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d586a:	6873      	ldr	r3, [r6, #4]
   d586c:	2b02      	cmp	r3, #2
   d586e:	d003      	beq.n	d5878 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5870:	2b0a      	cmp	r3, #10
   d5872:	d00b      	beq.n	d588c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5874:	69f6      	ldr	r6, [r6, #28]
   d5876:	e7f4      	b.n	d5862 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5878:	f1b8 0f00 	cmp.w	r8, #0
   d587c:	d004      	beq.n	d5888 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d587e:	6971      	ldr	r1, [r6, #20]
   d5880:	4638      	mov	r0, r7
   d5882:	3104      	adds	r1, #4
   d5884:	f7ff fe27 	bl	d54d6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5888:	4641      	mov	r1, r8
   d588a:	e7f3      	b.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d588c:	f1b9 0f00 	cmp.w	r9, #0
   d5890:	d101      	bne.n	d5896 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5892:	4649      	mov	r1, r9
   d5894:	e7ee      	b.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5896:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5898:	2210      	movs	r2, #16
   d589a:	a801      	add	r0, sp, #4
   d589c:	f000 f854 	bl	d5948 <memset>
                    a.v = 6;
   d58a0:	2306      	movs	r3, #6
   d58a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58a6:	ad01      	add	r5, sp, #4
   d58a8:	f104 0308 	add.w	r3, r4, #8
   d58ac:	3418      	adds	r4, #24
   d58ae:	6818      	ldr	r0, [r3, #0]
   d58b0:	6859      	ldr	r1, [r3, #4]
   d58b2:	462a      	mov	r2, r5
   d58b4:	c203      	stmia	r2!, {r0, r1}
   d58b6:	3308      	adds	r3, #8
   d58b8:	42a3      	cmp	r3, r4
   d58ba:	4615      	mov	r5, r2
   d58bc:	d1f7      	bne.n	d58ae <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d58be:	a901      	add	r1, sp, #4
   d58c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d58c2:	ad07      	add	r5, sp, #28
   d58c4:	f7ff fde8 	bl	d5498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58ca:	1d3c      	adds	r4, r7, #4
   d58cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58ce:	682b      	ldr	r3, [r5, #0]
   d58d0:	7023      	strb	r3, [r4, #0]
   d58d2:	e7de      	b.n	d5892 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58d4:	9800      	ldr	r0, [sp, #0]
   d58d6:	f7fe fd87 	bl	d43e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58da:	4638      	mov	r0, r7
   d58dc:	b015      	add	sp, #84	; 0x54
   d58de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d58e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58e4:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58e6:	4a03      	ldr	r2, [pc, #12]	; (d58f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d58e8:	601a      	str	r2, [r3, #0]
   d58ea:	2200      	movs	r2, #0
   d58ec:	605a      	str	r2, [r3, #4]

} // spark
   d58ee:	4770      	bx	lr
   d58f0:	2003e7e4 	.word	0x2003e7e4
   d58f4:	000d5c50 	.word	0x000d5c50

000d58f8 <__aeabi_atexit>:
   d58f8:	460b      	mov	r3, r1
   d58fa:	4601      	mov	r1, r0
   d58fc:	4618      	mov	r0, r3
   d58fe:	f000 b807 	b.w	d5910 <__cxa_atexit>

000d5902 <_ZdlPvj>:
   d5902:	f7fe bbc8 	b.w	d4096 <_ZdlPv>

000d5906 <_ZnwjRKSt9nothrow_t>:
   d5906:	f7fe bbc4 	b.w	d4092 <_Znwj>

000d590a <_ZSt25__throw_bad_function_callv>:
   d590a:	b508      	push	{r3, lr}
   d590c:	f7fe fefa 	bl	d4704 <abort>

000d5910 <__cxa_atexit>:
   d5910:	b510      	push	{r4, lr}
   d5912:	4c05      	ldr	r4, [pc, #20]	; (d5928 <__cxa_atexit+0x18>)
   d5914:	4613      	mov	r3, r2
   d5916:	b12c      	cbz	r4, d5924 <__cxa_atexit+0x14>
   d5918:	460a      	mov	r2, r1
   d591a:	4601      	mov	r1, r0
   d591c:	2002      	movs	r0, #2
   d591e:	f3af 8000 	nop.w
   d5922:	bd10      	pop	{r4, pc}
   d5924:	4620      	mov	r0, r4
   d5926:	e7fc      	b.n	d5922 <__cxa_atexit+0x12>
   d5928:	00000000 	.word	0x00000000

000d592c <memcpy>:
   d592c:	440a      	add	r2, r1
   d592e:	4291      	cmp	r1, r2
   d5930:	f100 33ff 	add.w	r3, r0, #4294967295
   d5934:	d100      	bne.n	d5938 <memcpy+0xc>
   d5936:	4770      	bx	lr
   d5938:	b510      	push	{r4, lr}
   d593a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d593e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5942:	4291      	cmp	r1, r2
   d5944:	d1f9      	bne.n	d593a <memcpy+0xe>
   d5946:	bd10      	pop	{r4, pc}

000d5948 <memset>:
   d5948:	4402      	add	r2, r0
   d594a:	4603      	mov	r3, r0
   d594c:	4293      	cmp	r3, r2
   d594e:	d100      	bne.n	d5952 <memset+0xa>
   d5950:	4770      	bx	lr
   d5952:	f803 1b01 	strb.w	r1, [r3], #1
   d5956:	e7f9      	b.n	d594c <memset+0x4>

000d5958 <srand>:
   d5958:	b538      	push	{r3, r4, r5, lr}
   d595a:	4b0d      	ldr	r3, [pc, #52]	; (d5990 <srand+0x38>)
   d595c:	681d      	ldr	r5, [r3, #0]
   d595e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5960:	4604      	mov	r4, r0
   d5962:	b97b      	cbnz	r3, d5984 <srand+0x2c>
   d5964:	2018      	movs	r0, #24
   d5966:	f7fe fead 	bl	d46c4 <malloc>
   d596a:	4a0a      	ldr	r2, [pc, #40]	; (d5994 <srand+0x3c>)
   d596c:	4b0a      	ldr	r3, [pc, #40]	; (d5998 <srand+0x40>)
   d596e:	63a8      	str	r0, [r5, #56]	; 0x38
   d5970:	e9c0 2300 	strd	r2, r3, [r0]
   d5974:	4b09      	ldr	r3, [pc, #36]	; (d599c <srand+0x44>)
   d5976:	6083      	str	r3, [r0, #8]
   d5978:	230b      	movs	r3, #11
   d597a:	8183      	strh	r3, [r0, #12]
   d597c:	2201      	movs	r2, #1
   d597e:	2300      	movs	r3, #0
   d5980:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5984:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5986:	2200      	movs	r2, #0
   d5988:	611c      	str	r4, [r3, #16]
   d598a:	615a      	str	r2, [r3, #20]
   d598c:	bd38      	pop	{r3, r4, r5, pc}
   d598e:	bf00      	nop
   d5990:	2003e5c8 	.word	0x2003e5c8
   d5994:	abcd330e 	.word	0xabcd330e
   d5998:	e66d1234 	.word	0xe66d1234
   d599c:	0005deec 	.word	0x0005deec

000d59a0 <strcpy>:
   d59a0:	4603      	mov	r3, r0
   d59a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d59a6:	f803 2b01 	strb.w	r2, [r3], #1
   d59aa:	2a00      	cmp	r2, #0
   d59ac:	d1f9      	bne.n	d59a2 <strcpy+0x2>
   d59ae:	4770      	bx	lr

000d59b0 <strdup>:
   d59b0:	4b02      	ldr	r3, [pc, #8]	; (d59bc <strdup+0xc>)
   d59b2:	4601      	mov	r1, r0
   d59b4:	6818      	ldr	r0, [r3, #0]
   d59b6:	f000 b803 	b.w	d59c0 <_strdup_r>
   d59ba:	bf00      	nop
   d59bc:	2003e5c8 	.word	0x2003e5c8

000d59c0 <_strdup_r>:
   d59c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d59c2:	4604      	mov	r4, r0
   d59c4:	4608      	mov	r0, r1
   d59c6:	460d      	mov	r5, r1
   d59c8:	f000 f80f 	bl	d59ea <strlen>
   d59cc:	1c42      	adds	r2, r0, #1
   d59ce:	4611      	mov	r1, r2
   d59d0:	4620      	mov	r0, r4
   d59d2:	9201      	str	r2, [sp, #4]
   d59d4:	f7fe fe9e 	bl	d4714 <_malloc_r>
   d59d8:	4604      	mov	r4, r0
   d59da:	b118      	cbz	r0, d59e4 <_strdup_r+0x24>
   d59dc:	9a01      	ldr	r2, [sp, #4]
   d59de:	4629      	mov	r1, r5
   d59e0:	f7ff ffa4 	bl	d592c <memcpy>
   d59e4:	4620      	mov	r0, r4
   d59e6:	b003      	add	sp, #12
   d59e8:	bd30      	pop	{r4, r5, pc}

000d59ea <strlen>:
   d59ea:	4603      	mov	r3, r0
   d59ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59f0:	2a00      	cmp	r2, #0
   d59f2:	d1fb      	bne.n	d59ec <strlen+0x2>
   d59f4:	1a18      	subs	r0, r3, r0
   d59f6:	3801      	subs	r0, #1
   d59f8:	4770      	bx	lr

000d59fa <link_code_end>:
	...

000d59fc <dynalib_user>:
   d59fc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5a0c:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
   d5a1c:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
   d5a2c:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
   d5a3c:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
   d5a4c:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
   d5a5c:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
   d5a6c:	2e73 4300 6e6f 656e 7463 6e69 2067 6f74     s..Connecting to
   d5a7c:	6320 6c65 756c 616c 2072 2e2e 202e 4300      cellular ... .C
   d5a8c:	756f 646c 276e 2074 6f63 6e6e 6365 2074     ouldn't connect 
   d5a9c:	6f74 6320 6c65 756c 616c 2e72 4f00 2e4b     to cellular..OK.
   d5aac:	4300 6e6f 656e 7463 6e69 2067 6f74 6320     .Connecting to c
   d5abc:	6f6c 6475 2e20 2e2e 0020 6f43 6c75 6e64     loud ... .Couldn
   d5acc:	7427 6320 6e6f 656e 7463 7420 206f 6c43     't connect to Cl
   d5adc:	756f 2e64 6300 6c65 3a6c 0020 202c 6320     oud..cell: .,  c
   d5aec:	6f6c 6475 203a 6300 6e6f 656e 7463 6954     loud: .connectTi
   d5afc:	656d 0000                                   me..

000d5b00 <_ZTVN5spark13EthernetClassE>:
	...
   d5b08:	4793 000d 4789 000d 477f 000d 4775 000d     .G...G...G..uG..
   d5b18:	4769 000d 475d 000d 4751 000d 4749 000d     iG..]G..QG..IG..
   d5b28:	473f 000d 4735 000d 5811 000d 6977 6972     ?G..5G...X..wiri
   d5b38:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d5b48:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d5b58:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   d5b68:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5b78:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d5b84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5b8c:	4ea9 000d 4eaf 000d 4eed 000d 4ebd 000d     .N...N...N...N..
   d5b9c:	4eab 000d                                   .N..

000d5ba0 <_ZTV9IPAddress>:
	...
   d5ba8:	5419 000d 5409 000d 540b 000d               .T...T...T..

000d5bb4 <_ZTV9USBSerial>:
	...
   d5bbc:	54ef 000d 5557 000d 552d 000d 4bf1 000d     .T..WU..-U...K..
   d5bcc:	551f 000d 54f1 000d 5501 000d 5551 000d     .U...T...U..QU..
   d5bdc:	5511 000d 54eb 000d                         .U...T..

000d5be4 <_ZTVN5spark13CellularClassE>:
	...
   d5bec:	564b 000d 5641 000d 5637 000d 55f9 000d     KV..AV..7V...U..
   d5bfc:	562b 000d 40f3 000d 561f 000d 5617 000d     +V...@...V...V..
   d5c0c:	560d 000d 5603 000d 5811 000d               .V...V...X..

000d5c18 <_ZTV11USARTSerial>:
	...
   d5c20:	5685 000d 56f1 000d 56c9 000d 4bf1 000d     .V...V...V...K..
   d5c30:	5699 000d 56b5 000d 56a7 000d 56c3 000d     .V...V...V...V..
   d5c40:	5687 000d 568b 000d                         .V...V..

000d5c48 <_ZTVN5spark12NetworkClassE>:
	...
   d5c50:	57a9 000d 57b3 000d 57bd 000d 57c7 000d     .W...W...W...W..
   d5c60:	57d1 000d 57dd 000d 57e9 000d 57f5 000d     .W...W...W...W..
   d5c70:	57fd 000d 5807 000d 5811 000d               .W...X...X..

000d5c7c <_ZSt7nothrow>:
	...

000d5c7d <link_const_variable_data_end>:
   d5c7d:	00          	.byte	0x00
	...

000d5c80 <link_constructors_location>:
   d5c80:	000d43ad 	.word	0x000d43ad
   d5c84:	000d479d 	.word	0x000d479d
   d5c88:	000d48e5 	.word	0x000d48e5
   d5c8c:	000d4bc9 	.word	0x000d4bc9
   d5c90:	000d4cfd 	.word	0x000d4cfd
   d5c94:	000d4d0d 	.word	0x000d4d0d
   d5c98:	000d4d69 	.word	0x000d4d69
   d5c9c:	000d5655 	.word	0x000d5655
   d5ca0:	000d58e5 	.word	0x000d58e5

000d5ca4 <link_constructors_end>:
	...
