
c:/Users/karaw/Documents/aquarealtime/resdev/software/testProject/target/2.0.1/boron/testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001b34  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5b50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5cc  000d5b54  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001bc  2003e638  2003e638  0002e638  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d5bbc  000d5bbc  00025bbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5be4  000d5be4  00025be4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ea4c7  00000000  00000000  00025be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f711  00000000  00000000  001100af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002283f  00000000  00000000  0011f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d90  00000000  00000000  00141fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006608  00000000  00000000  00143d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00015389  00000000  00000000  0014a397  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027ef2  00000000  00000000  0015f720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105641  00000000  00000000  00187612  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005038  00000000  00000000  0028cc54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc13 	bl	d5858 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc1b 	bl	d5874 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5cc 	.word	0x2003e5cc
   d4048:	000d5b54 	.word	0x000d5b54
   d404c:	2003e634 	.word	0x2003e634
   d4050:	2003e638 	.word	0x2003e638
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fd17 	bl	d4a90 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5b28 	.word	0x000d5b28
   d407c:	000d5b48 	.word	0x000d5b48

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b908 	b.w	d4294 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f91b 	bl	d42c0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bcc1 	b.w	d4a14 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 ba8d 	b.w	d45b0 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba93 	b.w	d45c0 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40aa:	b40e      	push	{r1, r2, r3}
   d40ac:	b503      	push	{r0, r1, lr}
   d40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40b8:	f000 fc07 	bl	d48ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40bc:	b002      	add	sp, #8
   d40be:	f85d eb04 	ldr.w	lr, [sp], #4
   d40c2:	b003      	add	sp, #12
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c6:	b40e      	push	{r1, r2, r3}
   d40c8:	b503      	push	{r0, r1, lr}
   d40ca:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40cc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ce:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40d2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40d4:	f000 fbf9 	bl	d48ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40d8:	b002      	add	sp, #8
   d40da:	f85d eb04 	ldr.w	lr, [sp], #4
   d40de:	b003      	add	sp, #12
   d40e0:	4770      	bx	lr

000d40e2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40e2:	2300      	movs	r3, #0
   d40e4:	6840      	ldr	r0, [r0, #4]
   d40e6:	461a      	mov	r2, r3
   d40e8:	4619      	mov	r1, r3
   d40ea:	f000 ba11 	b.w	d4510 <network_off>
	...

000d40f0 <_Z8ULPSleepi>:
  ULPSleep(60);
}

// Sleep ULP way
int ULPSleep(int seconds)
{
   d40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (seconds <= 0)
   d40f2:	1e05      	subs	r5, r0, #0
{
   d40f4:	b08b      	sub	sp, #44	; 0x2c
  if (seconds <= 0)
   d40f6:	dc05      	bgt.n	d4104 <_Z8ULPSleepi+0x14>
  {
    seconds = 10;
    Serial.printlnf("Zero sleep time, adjusting to 10 seconds sleep time.");
   d40f8:	f000 fdde 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d40fc:	4924      	ldr	r1, [pc, #144]	; (d4190 <_Z8ULPSleepi+0xa0>)
   d40fe:	f7ff ffe2 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
    seconds = 10;
   d4102:	250a      	movs	r5, #10
  }
  Serial.printlnf("Going to sleep for %d minutes %d seconds.", seconds / 60, seconds % 60);
   d4104:	f000 fdd8 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4108:	233c      	movs	r3, #60	; 0x3c
   d410a:	4922      	ldr	r1, [pc, #136]	; (d4194 <_Z8ULPSleepi+0xa4>)
   d410c:	fbb5 f2f3 	udiv	r2, r5, r3
   d4110:	fb03 5312 	mls	r3, r3, r2, r5
   d4114:	f7ff ffd7 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4118:	ab05      	add	r3, sp, #20
   d411a:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d411c:	2301      	movs	r3, #1
   d411e:	2600      	movs	r6, #0
   d4120:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.size = sizeof(hal_sleep_config_t);
   d4124:	4f1c      	ldr	r7, [pc, #112]	; (d4198 <_Z8ULPSleepi+0xa8>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4126:	491d      	ldr	r1, [pc, #116]	; (d419c <_Z8ULPSleepi+0xac>)
              valid_(true) {
   d4128:	f8ad 6019 	strh.w	r6, [sp, #25]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d412c:	2302      	movs	r3, #2
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d412e:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4130:	e9cd 6607 	strd	r6, r6, [sp, #28]
              valid_(true) {
   d4134:	f88d 601b 	strb.w	r6, [sp, #27]
        config_.size = sizeof(hal_sleep_config_t);
   d4138:	9705      	str	r7, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d413a:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d413e:	f000 ff58 	bl	d4ff2 <_ZnwjRKSt9nothrow_t>
   d4142:	4604      	mov	r4, r0
   d4144:	b1e8      	cbz	r0, d4182 <_Z8ULPSleepi+0x92>
   d4146:	2210      	movs	r2, #16
   d4148:	4631      	mov	r1, r6
   d414a:	f001 fb93 	bl	d5874 <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d414e:	2304      	movs	r3, #4
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
        .duration(seconds * 1000);  // Takes msec
   d4150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4154:	80a3      	strh	r3, [r4, #4]
   d4156:	4345      	muls	r5, r0
            wakeupSource->base.next = config_.wakeup_sources;
   d4158:	9b08      	ldr	r3, [sp, #32]
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d415a:	6027      	str	r7, [r4, #0]
            wakeupSource->base.next = config_.wakeup_sources;
   d415c:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d415e:	60e5      	str	r5, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4160:	9408      	str	r4, [sp, #32]
  System.sleep(config);
   d4162:	a801      	add	r0, sp, #4
   d4164:	a904      	add	r1, sp, #16
   d4166:	f000 fabd 	bl	d46e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d416a:	9801      	ldr	r0, [sp, #4]
   d416c:	b108      	cbz	r0, d4172 <_Z8ULPSleepi+0x82>
            free(wakeupSource_);
   d416e:	f000 fa27 	bl	d45c0 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4172:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
   d4174:	b140      	cbz	r0, d4188 <_Z8ULPSleepi+0x98>
            auto next = wakeupSource->next;
   d4176:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4178:	210c      	movs	r1, #12
   d417a:	f000 ff38 	bl	d4fee <_ZdlPvj>
            wakeupSource = next;
   d417e:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4180:	e7f8      	b.n	d4174 <_Z8ULPSleepi+0x84>
                valid_ = false;
   d4182:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   d4186:	e7ec      	b.n	d4162 <_Z8ULPSleepi+0x72>
  return 1;
}
   d4188:	2001      	movs	r0, #1
   d418a:	b00b      	add	sp, #44	; 0x2c
   d418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d418e:	bf00      	nop
   d4190:	000d58f0 	.word	0x000d58f0
   d4194:	000d5925 	.word	0x000d5925
   d4198:	00030010 	.word	0x00030010
   d419c:	000d5b24 	.word	0x000d5b24

000d41a0 <_Z13connectToCelli>:
// }

// Connect to cellular
// Returns 1 if fail, 0 if success. Pass it seconds
int connectToCell(int timeoutSec)
{
   d41a0:	b570      	push	{r4, r5, r6, lr}
        network_on(*this, 0, 0, NULL);
   d41a2:	4c19      	ldr	r4, [pc, #100]	; (d4208 <_Z13connectToCelli+0x68>)
   d41a4:	4606      	mov	r6, r0
  int secondCounter = 0;
  Serial.printf("Connecting to cellular ... ");
   d41a6:	f000 fd87 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d41aa:	4918      	ldr	r1, [pc, #96]	; (d420c <_Z13connectToCelli+0x6c>)
   d41ac:	f7ff ff7d 	bl	d40aa <_ZN5Print6printfEPKcz>
   d41b0:	2300      	movs	r3, #0
   d41b2:	461a      	mov	r2, r3
   d41b4:	4619      	mov	r1, r3
   d41b6:	6860      	ldr	r0, [r4, #4]
   d41b8:	f000 f9a2 	bl	d4500 <network_on>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41bc:	2300      	movs	r3, #0
   d41be:	6860      	ldr	r0, [r4, #4]
   d41c0:	461a      	mov	r2, r3
   d41c2:	4619      	mov	r1, r3
   d41c4:	f000 f97c 	bl	d44c0 <network_connect>
  int secondCounter = 0;
   d41c8:	2500      	movs	r5, #0
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d41ca:	2200      	movs	r2, #0
   d41cc:	6860      	ldr	r0, [r4, #4]
   d41ce:	4611      	mov	r1, r2
   d41d0:	f000 f98e 	bl	d44f0 <network_ready>
  Cellular.on();
  Cellular.connect();
  while (Cellular.ready() == false)
   d41d4:	b988      	cbnz	r0, d41fa <_Z13connectToCelli+0x5a>
  {
    secondCounter ++;
   d41d6:	3501      	adds	r5, #1
    if (secondCounter >= timeoutSec)
   d41d8:	42b5      	cmp	r5, r6
   d41da:	db09      	blt.n	d41f0 <_Z13connectToCelli+0x50>
    {
      Serial.printlnf("Couldn't connect to cellular.");
   d41dc:	f000 fd6c 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d41e0:	490b      	ldr	r1, [pc, #44]	; (d4210 <_Z13connectToCelli+0x70>)
   d41e2:	f7ff ff70 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
      Cellular.off();
   d41e6:	4808      	ldr	r0, [pc, #32]	; (d4208 <_Z13connectToCelli+0x68>)
   d41e8:	f7ff ff7b 	bl	d40e2 <_ZN5spark13CellularClass3offEv>
   d41ec:	2001      	movs	r0, #1
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return 0;
}
   d41ee:	bd70      	pop	{r4, r5, r6, pc}
    delay(1000);
   d41f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41f4:	f000 fbcc 	bl	d4990 <delay>
  while (Cellular.ready() == false)
   d41f8:	e7e7      	b.n	d41ca <_Z13connectToCelli+0x2a>
  Serial.printlnf("OK.");
   d41fa:	f000 fd5d 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d41fe:	4905      	ldr	r1, [pc, #20]	; (d4214 <_Z13connectToCelli+0x74>)
   d4200:	f7ff ff61 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
  return 0;
   d4204:	2000      	movs	r0, #0
   d4206:	e7f2      	b.n	d41ee <_Z13connectToCelli+0x4e>
   d4208:	2003e698 	.word	0x2003e698
   d420c:	000d594f 	.word	0x000d594f
   d4210:	000d596b 	.word	0x000d596b
   d4214:	000d5989 	.word	0x000d5989

000d4218 <_Z14connectToCloudi>:

//
int connectToCloud(int timeoutSec)
{
   d4218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d421a:	4606      	mov	r6, r0
  Serial.printf("Connecting to cloud ... ");
   d421c:	f000 fd4c 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4220:	4917      	ldr	r1, [pc, #92]	; (d4280 <_Z14connectToCloudi+0x68>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4222:	4f18      	ldr	r7, [pc, #96]	; (d4284 <_Z14connectToCloudi+0x6c>)
   d4224:	f7ff ff41 	bl	d40aa <_ZN5Print6printfEPKcz>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4228:	f000 f9a2 	bl	d4570 <spark_cloud_flag_connect>
  int secondCounter = 0;
   d422c:	2500      	movs	r5, #0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d422e:	f000 f9a7 	bl	d4580 <spark_cloud_flag_connected>
  Particle.connect();
  while (Particle.connected() == false)
   d4232:	4604      	mov	r4, r0
   d4234:	b9e0      	cbnz	r0, d4270 <_Z14connectToCloudi+0x58>
		return HAL_Timer_Get_Milli_Seconds();
   d4236:	f000 f87d 	bl	d4334 <HAL_Timer_Get_Milli_Seconds>
  {
    secondCounter ++;
   d423a:	3501      	adds	r5, #1
		last_checkin = current_time();
   d423c:	6038      	str	r0, [r7, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d423e:	f000 f98f 	bl	d4560 <spark_process>
    Particle.process();
    if (secondCounter >= timeoutSec)
   d4242:	42b5      	cmp	r5, r6
   d4244:	db0f      	blt.n	d4266 <_Z14connectToCloudi+0x4e>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4246:	4d10      	ldr	r5, [pc, #64]	; (d4288 <_Z14connectToCloudi+0x70>)
    {
      Serial.printlnf("Couldn't connect to Cloud.");
   d4248:	f000 fd36 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d424c:	490f      	ldr	r1, [pc, #60]	; (d428c <_Z14connectToCloudi+0x74>)
   d424e:	f7ff ff3a 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
   d4252:	6868      	ldr	r0, [r5, #4]
   d4254:	4622      	mov	r2, r4
   d4256:	2102      	movs	r1, #2
   d4258:	f000 f942 	bl	d44e0 <network_disconnect>
      Cellular.disconnect();
      Cellular.off();
   d425c:	4628      	mov	r0, r5
   d425e:	f7ff ff40 	bl	d40e2 <_ZN5spark13CellularClass3offEv>
   d4262:	2002      	movs	r0, #2
    }
    delay(1000);
  }
  Serial.printlnf("OK.");
  return 0;
   d4264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    delay(1000);
   d4266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d426a:	f000 fb91 	bl	d4990 <delay>
  while (Particle.connected() == false)
   d426e:	e7de      	b.n	d422e <_Z14connectToCloudi+0x16>
  Serial.printlnf("OK.");
   d4270:	f000 fd22 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d4274:	4906      	ldr	r1, [pc, #24]	; (d4290 <_Z14connectToCloudi+0x78>)
   d4276:	f7ff ff26 	bl	d40c6 <_ZN5Print8printlnfEPKcz>
  return 0;
   d427a:	2000      	movs	r0, #0
   d427c:	e7f2      	b.n	d4264 <_Z14connectToCloudi+0x4c>
   d427e:	bf00      	nop
   d4280:	000d598d 	.word	0x000d598d
   d4284:	2003e7f0 	.word	0x2003e7f0
   d4288:	2003e698 	.word	0x2003e698
   d428c:	000d59a6 	.word	0x000d59a6
   d4290:	000d5989 	.word	0x000d5989

000d4294 <setup>:
void setup() {
   d4294:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d4296:	f000 fd0f 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d429a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d429e:	f000 fcff 	bl	d4ca0 <_ZN9USBSerial5beginEl>
  Time.zone(-7);
   d42a2:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   d42a6:	f000 fb49 	bl	d493c <_ZN9TimeClass4zoneEf>
  int connectionError = connectToCell(CELL_CONNECT_SECONDS);
   d42aa:	205a      	movs	r0, #90	; 0x5a
   d42ac:	f7ff ff78 	bl	d41a0 <_Z13connectToCelli>
  if (!connectionError)
   d42b0:	b920      	cbnz	r0, d42bc <setup+0x28>
}
   d42b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    connectionError = connectToCloud(CLOUD_CONNECT_SECONDS);
   d42b6:	203c      	movs	r0, #60	; 0x3c
   d42b8:	f7ff bfae 	b.w	d4218 <_Z14connectToCloudi>
}
   d42bc:	bd08      	pop	{r3, pc}
	...

000d42c0 <loop>:
void loop() {
   d42c0:	b530      	push	{r4, r5, lr}
  int connectionError = connectToCell(CELL_CONNECT_SECONDS);
   d42c2:	205a      	movs	r0, #90	; 0x5a
void loop() {
   d42c4:	b085      	sub	sp, #20
  int connectionError = connectToCell(CELL_CONNECT_SECONDS);
   d42c6:	f7ff ff6b 	bl	d41a0 <_Z13connectToCelli>
  if (!connectionError)
   d42ca:	b9a0      	cbnz	r0, d42f6 <loop+0x36>
    connectionError = connectToCloud(CLOUD_CONNECT_SECONDS);
   d42cc:	203c      	movs	r0, #60	; 0x3c
   d42ce:	f7ff ffa3 	bl	d4218 <_Z14connectToCloudi>
    if (!connectionError)
   d42d2:	4604      	mov	r4, r0
   d42d4:	b978      	cbnz	r0, d42f6 <loop+0x36>
   d42d6:	4d0a      	ldr	r5, [pc, #40]	; (d4300 <loop+0x40>)
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d42d8:	f88d 000c 	strb.w	r0, [sp, #12]
   d42dc:	e9cd 0001 	strd	r0, r0, [sp, #4]
      Particle.disconnect();
   d42e0:	a801      	add	r0, sp, #4
   d42e2:	f000 fc07 	bl	d4af4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d42e6:	6868      	ldr	r0, [r5, #4]
   d42e8:	4622      	mov	r2, r4
   d42ea:	2102      	movs	r1, #2
   d42ec:	f000 f8f8 	bl	d44e0 <network_disconnect>
      Cellular.off();
   d42f0:	4628      	mov	r0, r5
   d42f2:	f7ff fef6 	bl	d40e2 <_ZN5spark13CellularClass3offEv>
  ULPSleep(60);
   d42f6:	203c      	movs	r0, #60	; 0x3c
   d42f8:	f7ff fefa 	bl	d40f0 <_Z8ULPSleepi>
}
   d42fc:	b005      	add	sp, #20
   d42fe:	bd30      	pop	{r4, r5, pc}
   d4300:	2003e698 	.word	0x2003e698

000d4304 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <netdb_freeaddrinfo+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	689b      	ldr	r3, [r3, #8]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030268 	.word	0x00030268

000d4314 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <netdb_getaddrinfo+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	68db      	ldr	r3, [r3, #12]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030268 	.word	0x00030268

000d4324 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_RNG_GetRandomNumber+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	685b      	ldr	r3, [r3, #4]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030218 	.word	0x00030218

000d4334 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	695b      	ldr	r3, [r3, #20]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030218 	.word	0x00030218

000d4344 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <os_mutex_recursive_create+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030248 	.word	0x00030248

000d4354 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <os_mutex_recursive_destroy+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030248 	.word	0x00030248

000d4364 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <inet_inet_ntop+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	695b      	ldr	r3, [r3, #20]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030264 	.word	0x00030264

000d4374 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <hal_usart_init+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	681b      	ldr	r3, [r3, #0]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003023c 	.word	0x0003023c

000d4384 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <hal_usart_write+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	68db      	ldr	r3, [r3, #12]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003023c 	.word	0x0003023c

000d4394 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <hal_usart_available+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	691b      	ldr	r3, [r3, #16]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003023c 	.word	0x0003023c

000d43a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <hal_usart_read+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	695b      	ldr	r3, [r3, #20]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003023c 	.word	0x0003023c

000d43b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <hal_usart_peek+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	699b      	ldr	r3, [r3, #24]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003023c 	.word	0x0003023c

000d43c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <hal_usart_flush+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	69db      	ldr	r3, [r3, #28]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003023c 	.word	0x0003023c

000d43d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <hal_usart_available_data_for_write+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003023c 	.word	0x0003023c

000d43e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USB_USART_Init+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	681b      	ldr	r3, [r3, #0]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003024c 	.word	0x0003024c

000d43f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USB_USART_Begin+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	685b      	ldr	r3, [r3, #4]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003024c 	.word	0x0003024c

000d4404 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USB_USART_Available_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	691b      	ldr	r3, [r3, #16]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003024c 	.word	0x0003024c

000d4414 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	695b      	ldr	r3, [r3, #20]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003024c 	.word	0x0003024c

000d4424 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USB_USART_Receive_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	699b      	ldr	r3, [r3, #24]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003024c 	.word	0x0003024c

000d4434 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USB_USART_Send_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	69db      	ldr	r3, [r3, #28]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003024c 	.word	0x0003024c

000d4444 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USB_USART_Flush_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6a1b      	ldr	r3, [r3, #32]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003024c 	.word	0x0003024c

000d4454 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <log_message+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030260 	.word	0x00030260

000d4464 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <set_system_mode+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	685b      	ldr	r3, [r3, #4]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030220 	.word	0x00030220

000d4474 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <system_delay_ms+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	695b      	ldr	r3, [r3, #20]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030220 	.word	0x00030220

000d4484 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b03      	ldr	r3, [pc, #12]	; (d4494 <system_ctrl_set_app_request_handler+0x10>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d448e:	9301      	str	r3, [sp, #4]
   d4490:	bd08      	pop	{r3, pc}
   d4492:	0000      	.short	0x0000
   d4494:	00030220 	.word	0x00030220

000d4498 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b03      	ldr	r3, [pc, #12]	; (d44a8 <system_ctrl_set_result+0x10>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44a2:	9301      	str	r3, [sp, #4]
   d44a4:	bd08      	pop	{r3, pc}
   d44a6:	0000      	.short	0x0000
   d44a8:	00030220 	.word	0x00030220

000d44ac <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b03      	ldr	r3, [pc, #12]	; (d44bc <system_sleep_ext+0x10>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d44b6:	9301      	str	r3, [sp, #4]
   d44b8:	bd08      	pop	{r3, pc}
   d44ba:	0000      	.short	0x0000
   d44bc:	00030220 	.word	0x00030220

000d44c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <network_connect+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	685b      	ldr	r3, [r3, #4]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030240 	.word	0x00030240

000d44d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <network_connecting+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	689b      	ldr	r3, [r3, #8]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030240 	.word	0x00030240

000d44e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <network_disconnect+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	68db      	ldr	r3, [r3, #12]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030240 	.word	0x00030240

000d44f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <network_ready+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	691b      	ldr	r3, [r3, #16]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030240 	.word	0x00030240

000d4500 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <network_on+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	695b      	ldr	r3, [r3, #20]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030240 	.word	0x00030240

000d4510 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_off+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	699b      	ldr	r3, [r3, #24]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_listen+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	69db      	ldr	r3, [r3, #28]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_listening+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6a1b      	ldr	r3, [r3, #32]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_set_listen_timeout+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_get_listen_timeout+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <spark_process+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	689b      	ldr	r3, [r3, #8]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030244 	.word	0x00030244

000d4570 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <spark_cloud_flag_connect+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	68db      	ldr	r3, [r3, #12]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030244 	.word	0x00030244

000d4580 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <spark_cloud_flag_connected+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	695b      	ldr	r3, [r3, #20]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030244 	.word	0x00030244

000d4590 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030244 	.word	0x00030244

000d45a0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <spark_cloud_disconnect+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030244 	.word	0x00030244

000d45b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <malloc+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	681b      	ldr	r3, [r3, #0]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003021c 	.word	0x0003021c

000d45c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <free+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003021c 	.word	0x0003021c

000d45d0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <vsnprintf+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003021c 	.word	0x0003021c

000d45e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <newlib_impure_ptr_callback+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003021c 	.word	0x0003021c

000d45f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d45f0:	2200      	movs	r2, #0
   d45f2:	6840      	ldr	r0, [r0, #4]
   d45f4:	4611      	mov	r1, r2
   d45f6:	f7ff bf9b 	b.w	d4530 <network_listening>

000d45fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d45fa:	2200      	movs	r2, #0
   d45fc:	6840      	ldr	r0, [r0, #4]
   d45fe:	4611      	mov	r1, r2
   d4600:	f7ff bfa6 	b.w	d4550 <network_get_listen_timeout>

000d4604 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4604:	6840      	ldr	r0, [r0, #4]
   d4606:	2200      	movs	r2, #0
   d4608:	f7ff bf9a 	b.w	d4540 <network_set_listen_timeout>

000d460c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d460c:	6840      	ldr	r0, [r0, #4]
   d460e:	2200      	movs	r2, #0
   d4610:	f081 0101 	eor.w	r1, r1, #1
   d4614:	f7ff bf84 	b.w	d4520 <network_listen>

000d4618 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4618:	2300      	movs	r3, #0
   d461a:	6840      	ldr	r0, [r0, #4]
   d461c:	461a      	mov	r2, r3
   d461e:	4619      	mov	r1, r3
   d4620:	f7ff bf76 	b.w	d4510 <network_off>

000d4624 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4624:	2300      	movs	r3, #0
   d4626:	6840      	ldr	r0, [r0, #4]
   d4628:	461a      	mov	r2, r3
   d462a:	4619      	mov	r1, r3
   d462c:	f7ff bf68 	b.w	d4500 <network_on>

000d4630 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4630:	2200      	movs	r2, #0
   d4632:	6840      	ldr	r0, [r0, #4]
   d4634:	4611      	mov	r1, r2
   d4636:	f7ff bf5b 	b.w	d44f0 <network_ready>

000d463a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d463a:	2200      	movs	r2, #0
   d463c:	6840      	ldr	r0, [r0, #4]
   d463e:	4611      	mov	r1, r2
   d4640:	f7ff bf46 	b.w	d44d0 <network_connecting>

000d4644 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4644:	6840      	ldr	r0, [r0, #4]
   d4646:	2200      	movs	r2, #0
   d4648:	2102      	movs	r1, #2
   d464a:	f7ff bf49 	b.w	d44e0 <network_disconnect>

000d464e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d464e:	2300      	movs	r3, #0
   d4650:	6840      	ldr	r0, [r0, #4]
   d4652:	461a      	mov	r2, r3
   d4654:	f7ff bf34 	b.w	d44c0 <network_connect>

000d4658 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4658:	4b02      	ldr	r3, [pc, #8]	; (d4664 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d465a:	2203      	movs	r2, #3
   d465c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d465e:	4a02      	ldr	r2, [pc, #8]	; (d4668 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4660:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4662:	4770      	bx	lr
   d4664:	2003e63c 	.word	0x2003e63c
   d4668:	000d59cc 	.word	0x000d59cc

000d466c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d466c:	b510      	push	{r4, lr}
   d466e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4670:	6800      	ldr	r0, [r0, #0]
   d4672:	b118      	cbz	r0, d467c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4674:	f7ff ffa4 	bl	d45c0 <free>
            wakeupSource_ = nullptr;
   d4678:	2300      	movs	r3, #0
   d467a:	6023      	str	r3, [r4, #0]
        }
    }
   d467c:	bd10      	pop	{r4, pc}

000d467e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d467e:	b510      	push	{r4, lr}
   d4680:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4682:	f7ff fff3 	bl	d466c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4686:	4620      	mov	r0, r4
   d4688:	bd10      	pop	{r4, pc}

000d468a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d468a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d468c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4690:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d4692:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4694:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d4696:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d469a:	f8c0 2006 	str.w	r2, [r0, #6]
   d469e:	889b      	ldrh	r3, [r3, #4]
   d46a0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d46a2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d46a4:	f7ff ffe2 	bl	d466c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d46a8:	682b      	ldr	r3, [r5, #0]
   d46aa:	b113      	cbz	r3, d46b2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d46ac:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d46ae:	2300      	movs	r3, #0
   d46b0:	602b      	str	r3, [r5, #0]
    }
   d46b2:	4620      	mov	r0, r4
   d46b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d46b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d46b8:	b538      	push	{r3, r4, r5, lr}
   d46ba:	460c      	mov	r4, r1
   d46bc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d46be:	f7ff ffd5 	bl	d466c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d46c2:	b144      	cbz	r4, d46d6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d46c4:	8820      	ldrh	r0, [r4, #0]
   d46c6:	f7ff ff73 	bl	d45b0 <malloc>
   d46ca:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d46cc:	b128      	cbz	r0, d46da <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d46ce:	8822      	ldrh	r2, [r4, #0]
   d46d0:	4621      	mov	r1, r4
   d46d2:	f001 f8c1 	bl	d5858 <memcpy>
        return SYSTEM_ERROR_NONE;
   d46d6:	2000      	movs	r0, #0
    }
   d46d8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d46da:	4801      	ldr	r0, [pc, #4]	; (d46e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d46dc:	e7fc      	b.n	d46d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d46de:	bf00      	nop
   d46e0:	fffffefc 	.word	0xfffffefc

000d46e4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46e6:	4d2d      	ldr	r5, [pc, #180]	; (d479c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d46e8:	7d0b      	ldrb	r3, [r1, #20]
   d46ea:	4604      	mov	r4, r0
   d46ec:	b08b      	sub	sp, #44	; 0x2c
   d46ee:	4608      	mov	r0, r1
   d46f0:	1daf      	adds	r7, r5, #6
   d46f2:	2b00      	cmp	r3, #0
   d46f4:	d038      	beq.n	d4768 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d46f6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d46f8:	791b      	ldrb	r3, [r3, #4]
   d46fa:	2b00      	cmp	r3, #0
   d46fc:	d034      	beq.n	d4768 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d46fe:	2200      	movs	r2, #0
    SleepResult() {}
   d4700:	4b27      	ldr	r3, [pc, #156]	; (d47a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4702:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4704:	a902      	add	r1, sp, #8
   d4706:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d4708:	9202      	str	r2, [sp, #8]
   d470a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d470e:	f88d 200e 	strb.w	r2, [sp, #14]
   d4712:	f7ff fecb 	bl	d44ac <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d4716:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d471a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d471e:	b200      	sxth	r0, r0
   d4720:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d4724:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d4728:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d472a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d472c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d472e:	4628      	mov	r0, r5
   d4730:	f7ff ffc2 	bl	d46b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d4734:	a802      	add	r0, sp, #8
   d4736:	f7ff ff99 	bl	d466c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d473a:	2300      	movs	r3, #0
   d473c:	6023      	str	r3, [r4, #0]
   d473e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4740:	71a3      	strb	r3, [r4, #6]
   d4742:	8123      	strh	r3, [r4, #8]
   d4744:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4748:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d474a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d474e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4750:	683b      	ldr	r3, [r7, #0]
   d4752:	f8c4 3006 	str.w	r3, [r4, #6]
   d4756:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4758:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d475a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d475c:	4620      	mov	r0, r4
   d475e:	f7ff ffab 	bl	d46b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4762:	4620      	mov	r0, r4
   d4764:	b00b      	add	sp, #44	; 0x2c
   d4766:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d4768:	2600      	movs	r6, #0
   d476a:	2320      	movs	r3, #32
   d476c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d4770:	4b0c      	ldr	r3, [pc, #48]	; (d47a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d4772:	9300      	str	r3, [sp, #0]
   d4774:	490c      	ldr	r1, [pc, #48]	; (d47a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d4776:	4633      	mov	r3, r6
   d4778:	aa02      	add	r2, sp, #8
   d477a:	2032      	movs	r0, #50	; 0x32
   d477c:	f7ff fe6a 	bl	d4454 <log_message>
    SleepResult() {}
   d4780:	4b07      	ldr	r3, [pc, #28]	; (d47a0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d4782:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4784:	a902      	add	r1, sp, #8
        error_ = error;
   d4786:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d478a:	4804      	ldr	r0, [pc, #16]	; (d479c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d478c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d478e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d4792:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4796:	f7ff ff78 	bl	d468a <_ZN17SystemSleepResultaSEOS_>
   d479a:	e7cb      	b.n	d4734 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d479c:	2003e644 	.word	0x2003e644
   d47a0:	ffff0000 	.word	0xffff0000
   d47a4:	000d59ff 	.word	0x000d59ff
   d47a8:	000d59f8 	.word	0x000d59f8

000d47ac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47ac:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d47ae:	4b09      	ldr	r3, [pc, #36]	; (d47d4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d47b0:	4c09      	ldr	r4, [pc, #36]	; (d47d8 <_GLOBAL__sub_I_System+0x2c>)
   d47b2:	2202      	movs	r2, #2
   d47b4:	2000      	movs	r0, #0
   d47b6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d47b8:	4b08      	ldr	r3, [pc, #32]	; (d47dc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d47ba:	6020      	str	r0, [r4, #0]
   d47bc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d47be:	71a0      	strb	r0, [r4, #6]
   d47c0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47c2:	f7ff fe4f 	bl	d4464 <set_system_mode>
SystemClass System;
   d47c6:	4620      	mov	r0, r4
   d47c8:	4a05      	ldr	r2, [pc, #20]	; (d47e0 <_GLOBAL__sub_I_System+0x34>)
   d47ca:	4906      	ldr	r1, [pc, #24]	; (d47e4 <_GLOBAL__sub_I_System+0x38>)
   d47cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d47d0:	f000 bc08 	b.w	d4fe4 <__aeabi_atexit>
   d47d4:	2003e650 	.word	0x2003e650
   d47d8:	2003e644 	.word	0x2003e644
   d47dc:	ffff0000 	.word	0xffff0000
   d47e0:	2003e638 	.word	0x2003e638
   d47e4:	000d467f 	.word	0x000d467f

000d47e8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47e8:	b510      	push	{r4, lr}
   d47ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47ec:	6800      	ldr	r0, [r0, #0]
   d47ee:	b108      	cbz	r0, d47f4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47f0:	f7ff fdb0 	bl	d4354 <os_mutex_recursive_destroy>
    }
   d47f4:	4620      	mov	r0, r4
   d47f6:	bd10      	pop	{r4, pc}

000d47f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d47fa:	4c06      	ldr	r4, [pc, #24]	; (d4814 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d47fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d47fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4800:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4802:	f7ff fd9f 	bl	d4344 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4806:	4620      	mov	r0, r4
   d4808:	4a03      	ldr	r2, [pc, #12]	; (d4818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d480a:	4904      	ldr	r1, [pc, #16]	; (d481c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4810:	f000 bbe8 	b.w	d4fe4 <__aeabi_atexit>
   d4814:	2003e654 	.word	0x2003e654
   d4818:	2003e638 	.word	0x2003e638
   d481c:	000d47e9 	.word	0x000d47e9

000d4820 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4822:	4606      	mov	r6, r0
   d4824:	460d      	mov	r5, r1
  size_t n = 0;
   d4826:	188f      	adds	r7, r1, r2
   d4828:	2400      	movs	r4, #0
  while (size--) {
   d482a:	42bd      	cmp	r5, r7
   d482c:	d00c      	beq.n	d4848 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d482e:	6833      	ldr	r3, [r6, #0]
   d4830:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4834:	689b      	ldr	r3, [r3, #8]
   d4836:	4630      	mov	r0, r6
   d4838:	4798      	blx	r3
     if (chunk>=0)
   d483a:	1e03      	subs	r3, r0, #0
   d483c:	db01      	blt.n	d4842 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d483e:	441c      	add	r4, r3
  while (size--) {
   d4840:	e7f3      	b.n	d482a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4842:	2c00      	cmp	r4, #0
   d4844:	bf08      	it	eq
   d4846:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4848:	4620      	mov	r0, r4
   d484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d484c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d484c:	b513      	push	{r0, r1, r4, lr}
   d484e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4850:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4852:	b159      	cbz	r1, d486c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4854:	9101      	str	r1, [sp, #4]
   d4856:	f001 f839 	bl	d58cc <strlen>
   d485a:	6823      	ldr	r3, [r4, #0]
   d485c:	9901      	ldr	r1, [sp, #4]
   d485e:	68db      	ldr	r3, [r3, #12]
   d4860:	4602      	mov	r2, r0
   d4862:	4620      	mov	r0, r4
    }
   d4864:	b002      	add	sp, #8
   d4866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d486a:	4718      	bx	r3
    }
   d486c:	b002      	add	sp, #8
   d486e:	bd10      	pop	{r4, pc}

000d4870 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4870:	6803      	ldr	r3, [r0, #0]
   d4872:	689b      	ldr	r3, [r3, #8]
   d4874:	4718      	bx	r3

000d4876 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4876:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4878:	210d      	movs	r1, #13
{
   d487a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d487c:	f7ff fff8 	bl	d4870 <_ZN5Print5printEc>
  n += print('\n');
   d4880:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4882:	4604      	mov	r4, r0
  n += print('\n');
   d4884:	4628      	mov	r0, r5
   d4886:	f7ff fff3 	bl	d4870 <_ZN5Print5printEc>
  return n;
}
   d488a:	4420      	add	r0, r4
   d488c:	bd38      	pop	{r3, r4, r5, pc}

000d488e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d488e:	b530      	push	{r4, r5, lr}
   d4890:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4892:	2300      	movs	r3, #0
   d4894:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4898:	2a01      	cmp	r2, #1
   d489a:	bf98      	it	ls
   d489c:	220a      	movls	r2, #10
   d489e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d48a0:	460d      	mov	r5, r1
   d48a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d48a6:	fb01 5312 	mls	r3, r1, r2, r5
   d48aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48ae:	2b09      	cmp	r3, #9
   d48b0:	bf94      	ite	ls
   d48b2:	3330      	addls	r3, #48	; 0x30
   d48b4:	3337      	addhi	r3, #55	; 0x37
   d48b6:	b2db      	uxtb	r3, r3
  } while(n);
   d48b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d48be:	d9ef      	bls.n	d48a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d48c0:	4621      	mov	r1, r4
   d48c2:	f7ff ffc3 	bl	d484c <_ZN5Print5writeEPKc>
}
   d48c6:	b00b      	add	sp, #44	; 0x2c
   d48c8:	bd30      	pop	{r4, r5, pc}

000d48ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d48ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48ce:	b086      	sub	sp, #24
   d48d0:	af00      	add	r7, sp, #0
   d48d2:	4605      	mov	r5, r0
   d48d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d48d6:	1d38      	adds	r0, r7, #4
   d48d8:	2114      	movs	r1, #20
{
   d48da:	4614      	mov	r4, r2
    va_copy(args2, args);
   d48dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d48de:	f7ff fe77 	bl	d45d0 <vsnprintf>

    if (n<bufsize)
   d48e2:	2813      	cmp	r0, #19
   d48e4:	d80e      	bhi.n	d4904 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d48e6:	1d39      	adds	r1, r7, #4
   d48e8:	4628      	mov	r0, r5
   d48ea:	f7ff ffaf 	bl	d484c <_ZN5Print5writeEPKc>
   d48ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d48f0:	b11e      	cbz	r6, d48fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d48f2:	4628      	mov	r0, r5
   d48f4:	f7ff ffbf 	bl	d4876 <_ZN5Print7printlnEv>
   d48f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d48fa:	4620      	mov	r0, r4
   d48fc:	3718      	adds	r7, #24
   d48fe:	46bd      	mov	sp, r7
   d4900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4904:	f100 0308 	add.w	r3, r0, #8
   d4908:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d490c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d490e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4912:	4622      	mov	r2, r4
   d4914:	1c41      	adds	r1, r0, #1
   d4916:	683b      	ldr	r3, [r7, #0]
   d4918:	4668      	mov	r0, sp
   d491a:	f7ff fe59 	bl	d45d0 <vsnprintf>
  return write(str);
   d491e:	4669      	mov	r1, sp
   d4920:	4628      	mov	r0, r5
   d4922:	f7ff ff93 	bl	d484c <_ZN5Print5writeEPKc>
   d4926:	4604      	mov	r4, r0
   d4928:	46c5      	mov	sp, r8
   d492a:	e7e1      	b.n	d48f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d492c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d492c:	4b01      	ldr	r3, [pc, #4]	; (d4934 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d492e:	4a02      	ldr	r2, [pc, #8]	; (d4938 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4930:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4932:	4770      	bx	lr
   d4934:	2003e658 	.word	0x2003e658
   d4938:	000d5a26 	.word	0x000d5a26

000d493c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d493c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d4940:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d4948:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d494a:	d411      	bmi.n	d4970 <_ZN9TimeClass4zoneEf+0x34>
   d494c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d4950:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4958:	dc0a      	bgt.n	d4970 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d495a:	eddf 7a06 	vldr	s15, [pc, #24]	; d4974 <_ZN9TimeClass4zoneEf+0x38>
   d495e:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4962:	ee17 0a90 	vmov	r0, s15
   d4966:	f000 ff35 	bl	d57d4 <__aeabi_f2lz>
   d496a:	4b03      	ldr	r3, [pc, #12]	; (d4978 <_ZN9TimeClass4zoneEf+0x3c>)
   d496c:	e9c3 0100 	strd	r0, r1, [r3]
}
   d4970:	bd08      	pop	{r3, pc}
   d4972:	bf00      	nop
   d4974:	45610000 	.word	0x45610000
   d4978:	2003e660 	.word	0x2003e660

000d497c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d497c:	4b02      	ldr	r3, [pc, #8]	; (d4988 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d497e:	681a      	ldr	r2, [r3, #0]
   d4980:	4b02      	ldr	r3, [pc, #8]	; (d498c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4982:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4984:	4770      	bx	lr
   d4986:	bf00      	nop
   d4988:	2003e5cc 	.word	0x2003e5cc
   d498c:	2003e65c 	.word	0x2003e65c

000d4990 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4990:	2100      	movs	r1, #0
   d4992:	f7ff bd6f 	b.w	d4474 <system_delay_ms>

000d4996 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4996:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4998:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d499a:	4604      	mov	r4, r0
      if (_M_manager)
   d499c:	b113      	cbz	r3, d49a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d499e:	2203      	movs	r2, #3
   d49a0:	4601      	mov	r1, r0
   d49a2:	4798      	blx	r3
    }
   d49a4:	4620      	mov	r0, r4
   d49a6:	bd10      	pop	{r4, pc}

000d49a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49a8:	b510      	push	{r4, lr}
   d49aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49ac:	f7ff fff3 	bl	d4996 <_ZNSt14_Function_baseD1Ev>
   d49b0:	4620      	mov	r0, r4
   d49b2:	bd10      	pop	{r4, pc}

000d49b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d49b4:	4803      	ldr	r0, [pc, #12]	; (d49c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49b6:	4a04      	ldr	r2, [pc, #16]	; (d49c8 <_GLOBAL__sub_I_RGB+0x14>)
   d49b8:	4904      	ldr	r1, [pc, #16]	; (d49cc <_GLOBAL__sub_I_RGB+0x18>)
   d49ba:	2300      	movs	r3, #0
   d49bc:	6083      	str	r3, [r0, #8]
   d49be:	f000 bb11 	b.w	d4fe4 <__aeabi_atexit>
   d49c2:	bf00      	nop
   d49c4:	2003e668 	.word	0x2003e668
   d49c8:	2003e638 	.word	0x2003e638
   d49cc:	000d49a9 	.word	0x000d49a9

000d49d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d49d0:	4b01      	ldr	r3, [pc, #4]	; (d49d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d49d2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d49d4:	4770      	bx	lr
   d49d6:	bf00      	nop
   d49d8:	2003e5d0 	.word	0x2003e5d0

000d49dc <serialEventRun>:
{
   d49dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d49de:	4b0b      	ldr	r3, [pc, #44]	; (d4a0c <serialEventRun+0x30>)
   d49e0:	b143      	cbz	r3, d49f4 <serialEventRun+0x18>
   d49e2:	f000 f969 	bl	d4cb8 <_Z16_fetch_usbserialv>
   d49e6:	6803      	ldr	r3, [r0, #0]
   d49e8:	691b      	ldr	r3, [r3, #16]
   d49ea:	4798      	blx	r3
   d49ec:	2800      	cmp	r0, #0
   d49ee:	dd01      	ble.n	d49f4 <serialEventRun+0x18>
        serialEvent();
   d49f0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d49f4:	4b06      	ldr	r3, [pc, #24]	; (d4a10 <serialEventRun+0x34>)
   d49f6:	b143      	cbz	r3, d4a0a <serialEventRun+0x2e>
   d49f8:	f000 fa22 	bl	d4e40 <_Z22__fetch_global_Serial1v>
   d49fc:	6803      	ldr	r3, [r0, #0]
   d49fe:	691b      	ldr	r3, [r3, #16]
   d4a00:	4798      	blx	r3
   d4a02:	2800      	cmp	r0, #0
   d4a04:	dd01      	ble.n	d4a0a <serialEventRun+0x2e>
        serialEvent1();
   d4a06:	f3af 8000 	nop.w
}
   d4a0a:	bd08      	pop	{r3, pc}
	...

000d4a14 <_post_loop>:
{
   d4a14:	b508      	push	{r3, lr}
	serialEventRun();
   d4a16:	f7ff ffe1 	bl	d49dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a1a:	f7ff fc8b 	bl	d4334 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a1e:	4b01      	ldr	r3, [pc, #4]	; (d4a24 <_post_loop+0x10>)
   d4a20:	6018      	str	r0, [r3, #0]
}
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	2003e7f0 	.word	0x2003e7f0

000d4a28 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a28:	4802      	ldr	r0, [pc, #8]	; (d4a34 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a2a:	4a03      	ldr	r2, [pc, #12]	; (d4a38 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a2c:	4903      	ldr	r1, [pc, #12]	; (d4a3c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a2e:	1a12      	subs	r2, r2, r0
   d4a30:	f000 bf12 	b.w	d5858 <memcpy>
   d4a34:	2003f400 	.word	0x2003f400
   d4a38:	2003f404 	.word	0x2003f404
   d4a3c:	000d5b50 	.word	0x000d5b50

000d4a40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a42:	2300      	movs	r3, #0
   d4a44:	9300      	str	r3, [sp, #0]
   d4a46:	461a      	mov	r2, r3
   d4a48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a4c:	f7ff fd24 	bl	d4498 <system_ctrl_set_result>
}
   d4a50:	b003      	add	sp, #12
   d4a52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4a58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a5a:	8843      	ldrh	r3, [r0, #2]
   d4a5c:	2b0a      	cmp	r3, #10
   d4a5e:	d008      	beq.n	d4a72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4a60:	2b50      	cmp	r3, #80	; 0x50
   d4a62:	d10b      	bne.n	d4a7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4a64:	4b09      	ldr	r3, [pc, #36]	; (d4a8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4a66:	681b      	ldr	r3, [r3, #0]
   d4a68:	b14b      	cbz	r3, d4a7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4a6a:	b003      	add	sp, #12
   d4a6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4a70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4a72:	f7ff ffe5 	bl	d4a40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4a76:	b003      	add	sp, #12
   d4a78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a7c:	2300      	movs	r3, #0
   d4a7e:	9300      	str	r3, [sp, #0]
   d4a80:	461a      	mov	r2, r3
   d4a82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a86:	f7ff fd07 	bl	d4498 <system_ctrl_set_result>
}
   d4a8a:	e7f4      	b.n	d4a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4a8c:	2003e67c 	.word	0x2003e67c

000d4a90 <module_user_init_hook>:
{
   d4a90:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4a92:	4c12      	ldr	r4, [pc, #72]	; (d4adc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4a94:	4812      	ldr	r0, [pc, #72]	; (d4ae0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4a96:	4d13      	ldr	r5, [pc, #76]	; (d4ae4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4a98:	2100      	movs	r1, #0
   d4a9a:	f7ff fda1 	bl	d45e0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4a9e:	6823      	ldr	r3, [r4, #0]
   d4aa0:	42ab      	cmp	r3, r5
   d4aa2:	4b11      	ldr	r3, [pc, #68]	; (d4ae8 <module_user_init_hook+0x58>)
   d4aa4:	bf0c      	ite	eq
   d4aa6:	2201      	moveq	r2, #1
   d4aa8:	2200      	movne	r2, #0
   d4aaa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4aac:	d002      	beq.n	d4ab4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4aae:	f7ff ffbb 	bl	d4a28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4ab2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ab4:	f7ff fc36 	bl	d4324 <HAL_RNG_GetRandomNumber>
   d4ab8:	4604      	mov	r4, r0
    srand(seed);
   d4aba:	f000 fee3 	bl	d5884 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4abe:	4b0b      	ldr	r3, [pc, #44]	; (d4aec <module_user_init_hook+0x5c>)
   d4ac0:	b113      	cbz	r3, d4ac8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ac8:	2100      	movs	r1, #0
   d4aca:	4808      	ldr	r0, [pc, #32]	; (d4aec <module_user_init_hook+0x5c>)
   d4acc:	f7ff fd60 	bl	d4590 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ad4:	4806      	ldr	r0, [pc, #24]	; (d4af0 <module_user_init_hook+0x60>)
   d4ad6:	2100      	movs	r1, #0
   d4ad8:	f7ff bcd4 	b.w	d4484 <system_ctrl_set_app_request_handler>
   d4adc:	2003f400 	.word	0x2003f400
   d4ae0:	000d49d1 	.word	0x000d49d1
   d4ae4:	9a271c1e 	.word	0x9a271c1e
   d4ae8:	2003e678 	.word	0x2003e678
   d4aec:	00000000 	.word	0x00000000
   d4af0:	000d4a59 	.word	0x000d4a59

000d4af4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d4af4:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d4af6:	2308      	movs	r3, #8
   d4af8:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d4afc:	6803      	ldr	r3, [r0, #0]
   d4afe:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d4b02:	7a03      	ldrb	r3, [r0, #8]
   d4b04:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4b08:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d4b0a:	6843      	ldr	r3, [r0, #4]
   d4b0c:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d4b0e:	4668      	mov	r0, sp
   d4b10:	f7ff fd46 	bl	d45a0 <spark_cloud_disconnect>
}
   d4b14:	b003      	add	sp, #12
   d4b16:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b1a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b1a:	4770      	bx	lr

000d4b1c <_ZN9IPAddressD0Ev>:
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	2118      	movs	r1, #24
   d4b20:	4604      	mov	r4, r0
   d4b22:	f000 fa64 	bl	d4fee <_ZdlPvj>
   d4b26:	4620      	mov	r0, r4
   d4b28:	bd10      	pop	{r4, pc}

000d4b2a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b2c:	7d03      	ldrb	r3, [r0, #20]
   d4b2e:	2b06      	cmp	r3, #6
{
   d4b30:	b08d      	sub	sp, #52	; 0x34
   d4b32:	460e      	mov	r6, r1
   d4b34:	f100 0704 	add.w	r7, r0, #4
   d4b38:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4b3c:	d012      	beq.n	d4b64 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4b3e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4b42:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b46:	220a      	movs	r2, #10
   d4b48:	4630      	mov	r0, r6
   d4b4a:	f7ff fea0 	bl	d488e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b4e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b50:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4b52:	d019      	beq.n	d4b88 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4b54:	2c00      	cmp	r4, #0
   d4b56:	d0f4      	beq.n	d4b42 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4b58:	212e      	movs	r1, #46	; 0x2e
   d4b5a:	4630      	mov	r0, r6
   d4b5c:	f7ff fe88 	bl	d4870 <_ZN5Print5printEc>
   d4b60:	4404      	add	r4, r0
   d4b62:	e7ee      	b.n	d4b42 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b64:	232f      	movs	r3, #47	; 0x2f
   d4b66:	466a      	mov	r2, sp
   d4b68:	4639      	mov	r1, r7
   d4b6a:	200a      	movs	r0, #10
		buf[0] = 0;
   d4b6c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b70:	f7ff fbf8 	bl	d4364 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4b74:	4668      	mov	r0, sp
   d4b76:	f000 fea9 	bl	d58cc <strlen>
   d4b7a:	6833      	ldr	r3, [r6, #0]
   d4b7c:	4602      	mov	r2, r0
   d4b7e:	68db      	ldr	r3, [r3, #12]
   d4b80:	4669      	mov	r1, sp
   d4b82:	4630      	mov	r0, r6
   d4b84:	4798      	blx	r3
   d4b86:	4604      	mov	r4, r0
    }
    return n;
}
   d4b88:	4620      	mov	r0, r4
   d4b8a:	b00d      	add	sp, #52	; 0x34
   d4b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4b90 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4b90:	b510      	push	{r4, lr}
   d4b92:	4b05      	ldr	r3, [pc, #20]	; (d4ba8 <_ZN9IPAddressC1Ev+0x18>)
   d4b94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b96:	2211      	movs	r2, #17
   d4b98:	f840 3b04 	str.w	r3, [r0], #4
   d4b9c:	2100      	movs	r1, #0
   d4b9e:	f000 fe69 	bl	d5874 <memset>
}
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	bd10      	pop	{r4, pc}
   d4ba6:	bf00      	nop
   d4ba8:	000d5a50 	.word	0x000d5a50

000d4bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4bac:	4603      	mov	r3, r0
   d4bae:	4a07      	ldr	r2, [pc, #28]	; (d4bcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4bb6:	f101 0210 	add.w	r2, r1, #16
   d4bba:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bbe:	f843 4b04 	str.w	r4, [r3], #4
   d4bc2:	4291      	cmp	r1, r2
   d4bc4:	d1f9      	bne.n	d4bba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4bc6:	780a      	ldrb	r2, [r1, #0]
   d4bc8:	701a      	strb	r2, [r3, #0]
}
   d4bca:	bd10      	pop	{r4, pc}
   d4bcc:	000d5a50 	.word	0x000d5a50

000d4bd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4bd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4bd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4bd6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4bda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4bde:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4be2:	2304      	movs	r3, #4
   d4be4:	6041      	str	r1, [r0, #4]
   d4be6:	7503      	strb	r3, [r0, #20]
}
   d4be8:	bd10      	pop	{r4, pc}

000d4bea <_ZN9IPAddressaSEPKh>:
{
   d4bea:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4bec:	78cb      	ldrb	r3, [r1, #3]
   d4bee:	9300      	str	r3, [sp, #0]
   d4bf0:	788b      	ldrb	r3, [r1, #2]
   d4bf2:	784a      	ldrb	r2, [r1, #1]
   d4bf4:	7809      	ldrb	r1, [r1, #0]
   d4bf6:	f7ff ffeb 	bl	d4bd0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4bfa:	b002      	add	sp, #8
   d4bfc:	bd10      	pop	{r4, pc}

000d4bfe <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bfe:	7441      	strb	r1, [r0, #17]
}
   d4c00:	4770      	bx	lr

000d4c02 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4c02:	4770      	bx	lr

000d4c04 <_ZN9USBSerial4readEv>:
{
   d4c04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4c06:	2100      	movs	r1, #0
   d4c08:	7c00      	ldrb	r0, [r0, #16]
   d4c0a:	f7ff fc0b 	bl	d4424 <HAL_USB_USART_Receive_Data>
}
   d4c0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c12:	bd08      	pop	{r3, pc}

000d4c14 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4c14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4c16:	2101      	movs	r1, #1
   d4c18:	7c00      	ldrb	r0, [r0, #16]
   d4c1a:	f7ff fc03 	bl	d4424 <HAL_USB_USART_Receive_Data>
}
   d4c1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c22:	bd08      	pop	{r3, pc}

000d4c24 <_ZN9USBSerial17availableForWriteEv>:
{
   d4c24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c26:	7c00      	ldrb	r0, [r0, #16]
   d4c28:	f7ff fbf4 	bl	d4414 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c30:	bd08      	pop	{r3, pc}

000d4c32 <_ZN9USBSerial9availableEv>:
{
   d4c32:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c34:	7c00      	ldrb	r0, [r0, #16]
   d4c36:	f7ff fbe5 	bl	d4404 <HAL_USB_USART_Available_Data>
}
   d4c3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c3e:	bd08      	pop	{r3, pc}

000d4c40 <_ZN9USBSerial5writeEh>:
{
   d4c40:	b513      	push	{r0, r1, r4, lr}
   d4c42:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c44:	7c00      	ldrb	r0, [r0, #16]
{
   d4c46:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c48:	f7ff fbe4 	bl	d4414 <HAL_USB_USART_Available_Data_For_Write>
   d4c4c:	2800      	cmp	r0, #0
   d4c4e:	9901      	ldr	r1, [sp, #4]
   d4c50:	dc01      	bgt.n	d4c56 <_ZN9USBSerial5writeEh+0x16>
   d4c52:	7c60      	ldrb	r0, [r4, #17]
   d4c54:	b120      	cbz	r0, d4c60 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c56:	7c20      	ldrb	r0, [r4, #16]
   d4c58:	f7ff fbec 	bl	d4434 <HAL_USB_USART_Send_Data>
   d4c5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4c60:	b002      	add	sp, #8
   d4c62:	bd10      	pop	{r4, pc}

000d4c64 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4c64:	7c00      	ldrb	r0, [r0, #16]
   d4c66:	f7ff bbed 	b.w	d4444 <HAL_USB_USART_Flush_Data>

000d4c6a <_ZN9USBSerialD0Ev>:
   d4c6a:	b510      	push	{r4, lr}
   d4c6c:	2114      	movs	r1, #20
   d4c6e:	4604      	mov	r4, r0
   d4c70:	f000 f9bd 	bl	d4fee <_ZdlPvj>
   d4c74:	4620      	mov	r0, r4
   d4c76:	bd10      	pop	{r4, pc}

000d4c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c78:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c7e:	4604      	mov	r4, r0
   d4c80:	4608      	mov	r0, r1
   d4c82:	2100      	movs	r1, #0
   d4c84:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c88:	4b04      	ldr	r3, [pc, #16]	; (d4c9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c8a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4c8c:	2301      	movs	r3, #1
  _serial = serial;
   d4c8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4c90:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4c92:	4611      	mov	r1, r2
   d4c94:	f7ff fba6 	bl	d43e4 <HAL_USB_USART_Init>
}
   d4c98:	4620      	mov	r0, r4
   d4c9a:	bd10      	pop	{r4, pc}
   d4c9c:	000d5a64 	.word	0x000d5a64

000d4ca0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4ca0:	7c00      	ldrb	r0, [r0, #16]
   d4ca2:	2200      	movs	r2, #0
   d4ca4:	f7ff bba6 	b.w	d43f4 <HAL_USB_USART_Begin>

000d4ca8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ca8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4caa:	2214      	movs	r2, #20
{
   d4cac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4cae:	2100      	movs	r1, #0
   d4cb0:	f000 fde0 	bl	d5874 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4cb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cba:	4c10      	ldr	r4, [pc, #64]	; (d4cfc <_Z16_fetch_usbserialv+0x44>)
{
   d4cbc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4cbe:	a803      	add	r0, sp, #12
   d4cc0:	f7ff fff2 	bl	d4ca8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cc4:	7821      	ldrb	r1, [r4, #0]
   d4cc6:	f3bf 8f5b 	dmb	ish
   d4cca:	f011 0101 	ands.w	r1, r1, #1
   d4cce:	d111      	bne.n	d4cf4 <_Z16_fetch_usbserialv+0x3c>
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	9101      	str	r1, [sp, #4]
   d4cd4:	f7ff f9e1 	bl	d409a <__cxa_guard_acquire>
   d4cd8:	9901      	ldr	r1, [sp, #4]
   d4cda:	b158      	cbz	r0, d4cf4 <_Z16_fetch_usbserialv+0x3c>
   d4cdc:	aa03      	add	r2, sp, #12
   d4cde:	4808      	ldr	r0, [pc, #32]	; (d4d00 <_Z16_fetch_usbserialv+0x48>)
   d4ce0:	f7ff ffca 	bl	d4c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	f7ff f9dd 	bl	d40a4 <__cxa_guard_release>
   d4cea:	4a06      	ldr	r2, [pc, #24]	; (d4d04 <_Z16_fetch_usbserialv+0x4c>)
   d4cec:	4906      	ldr	r1, [pc, #24]	; (d4d08 <_Z16_fetch_usbserialv+0x50>)
   d4cee:	4804      	ldr	r0, [pc, #16]	; (d4d00 <_Z16_fetch_usbserialv+0x48>)
   d4cf0:	f000 f978 	bl	d4fe4 <__aeabi_atexit>
	return _usbserial;
}
   d4cf4:	4802      	ldr	r0, [pc, #8]	; (d4d00 <_Z16_fetch_usbserialv+0x48>)
   d4cf6:	b008      	add	sp, #32
   d4cf8:	bd10      	pop	{r4, pc}
   d4cfa:	bf00      	nop
   d4cfc:	2003e680 	.word	0x2003e680
   d4d00:	2003e684 	.word	0x2003e684
   d4d04:	2003e638 	.word	0x2003e638
   d4d08:	000d4c03 	.word	0x000d4c03

000d4d0c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	4611      	mov	r1, r2
   d4d12:	f7ff bbed 	b.w	d44f0 <network_ready>

000d4d16 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4d16:	2200      	movs	r2, #0
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	f7ff bc08 	b.w	d4530 <network_listening>

000d4d20 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d20:	2200      	movs	r2, #0
   d4d22:	6840      	ldr	r0, [r0, #4]
   d4d24:	4611      	mov	r1, r2
   d4d26:	f7ff bc13 	b.w	d4550 <network_get_listen_timeout>

000d4d2a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	f7ff bc07 	b.w	d4540 <network_set_listen_timeout>

000d4d32 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	2200      	movs	r2, #0
   d4d36:	f081 0101 	eor.w	r1, r1, #1
   d4d3a:	f7ff bbf1 	b.w	d4520 <network_listen>

000d4d3e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d3e:	2300      	movs	r3, #0
   d4d40:	6840      	ldr	r0, [r0, #4]
   d4d42:	461a      	mov	r2, r3
   d4d44:	4619      	mov	r1, r3
   d4d46:	f7ff bbdb 	b.w	d4500 <network_on>

000d4d4a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	6840      	ldr	r0, [r0, #4]
   d4d4e:	4611      	mov	r1, r2
   d4d50:	f7ff bbbe 	b.w	d44d0 <network_connecting>

000d4d54 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d54:	6840      	ldr	r0, [r0, #4]
   d4d56:	2200      	movs	r2, #0
   d4d58:	2102      	movs	r1, #2
   d4d5a:	f7ff bbc1 	b.w	d44e0 <network_disconnect>

000d4d5e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d5e:	2300      	movs	r3, #0
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	461a      	mov	r2, r3
   d4d64:	f7ff bbac 	b.w	d44c0 <network_connect>

000d4d68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d68:	4b08      	ldr	r3, [pc, #32]	; (d4d8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d6a:	b510      	push	{r4, lr}
   d4d6c:	2428      	movs	r4, #40	; 0x28
   d4d6e:	4622      	mov	r2, r4
   d4d70:	4618      	mov	r0, r3
   d4d72:	2100      	movs	r1, #0
   d4d74:	f000 fd7e 	bl	d5874 <memset>
   d4d78:	4b05      	ldr	r3, [pc, #20]	; (d4d90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4d7a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4d7c:	f04f 32ff 	mov.w	r2, #4294967295
   d4d80:	6042      	str	r2, [r0, #4]
   d4d82:	2204      	movs	r2, #4
   d4d84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4d86:	4a03      	ldr	r2, [pc, #12]	; (d4d94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4d88:	601a      	str	r2, [r3, #0]
   d4d8a:	bd10      	pop	{r4, pc}
   d4d8c:	2003e6a0 	.word	0x2003e6a0
   d4d90:	2003e698 	.word	0x2003e698
   d4d94:	000d5a94 	.word	0x000d5a94

000d4d98 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4d98:	4770      	bx	lr

000d4d9a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d9a:	7441      	strb	r1, [r0, #17]
}
   d4d9c:	4770      	bx	lr

000d4d9e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4d9e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4da0:	7c00      	ldrb	r0, [r0, #16]
   d4da2:	f7ff fb17 	bl	d43d4 <hal_usart_available_data_for_write>
}
   d4da6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4daa:	bd08      	pop	{r3, pc}

000d4dac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4dac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4dae:	7c00      	ldrb	r0, [r0, #16]
   d4db0:	f7ff faf0 	bl	d4394 <hal_usart_available>
}
   d4db4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4db8:	bd08      	pop	{r3, pc}

000d4dba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4dba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4dbc:	7c00      	ldrb	r0, [r0, #16]
   d4dbe:	f7ff faf9 	bl	d43b4 <hal_usart_peek>
}
   d4dc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4dc6:	bd08      	pop	{r3, pc}

000d4dc8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4dc8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4dca:	7c00      	ldrb	r0, [r0, #16]
   d4dcc:	f7ff faea 	bl	d43a4 <hal_usart_read>
}
   d4dd0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4dd4:	bd08      	pop	{r3, pc}

000d4dd6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4dd6:	7c00      	ldrb	r0, [r0, #16]
   d4dd8:	f7ff baf4 	b.w	d43c4 <hal_usart_flush>

000d4ddc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4dde:	7c45      	ldrb	r5, [r0, #17]
{
   d4de0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4de2:	b12d      	cbz	r5, d4df0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4de4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4de6:	b003      	add	sp, #12
   d4de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4dec:	f7ff baca 	b.w	d4384 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4df0:	7c00      	ldrb	r0, [r0, #16]
   d4df2:	9101      	str	r1, [sp, #4]
   d4df4:	f7ff faee 	bl	d43d4 <hal_usart_available_data_for_write>
   d4df8:	2800      	cmp	r0, #0
   d4dfa:	9901      	ldr	r1, [sp, #4]
   d4dfc:	dcf2      	bgt.n	d4de4 <_ZN11USARTSerial5writeEh+0x8>
}
   d4dfe:	4628      	mov	r0, r5
   d4e00:	b003      	add	sp, #12
   d4e02:	bd30      	pop	{r4, r5, pc}

000d4e04 <_ZN11USARTSerialD0Ev>:
   d4e04:	b510      	push	{r4, lr}
   d4e06:	2114      	movs	r1, #20
   d4e08:	4604      	mov	r4, r0
   d4e0a:	f000 f8f0 	bl	d4fee <_ZdlPvj>
   d4e0e:	4620      	mov	r0, r4
   d4e10:	bd10      	pop	{r4, pc}
	...

000d4e14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4e14:	b510      	push	{r4, lr}
   d4e16:	f04f 0c00 	mov.w	ip, #0
   d4e1a:	4604      	mov	r4, r0
   d4e1c:	4608      	mov	r0, r1
   d4e1e:	4611      	mov	r1, r2
   d4e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e24:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4e28:	4a04      	ldr	r2, [pc, #16]	; (d4e3c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4e2a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4e2c:	2201      	movs	r2, #1
  _serial = serial;
   d4e2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4e30:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4e32:	461a      	mov	r2, r3
   d4e34:	f7ff fa9e 	bl	d4374 <hal_usart_init>
}
   d4e38:	4620      	mov	r0, r4
   d4e3a:	bd10      	pop	{r4, pc}
   d4e3c:	000d5ac8 	.word	0x000d5ac8

000d4e40 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e40:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e42:	4c0e      	ldr	r4, [pc, #56]	; (d4e7c <_Z22__fetch_global_Serial1v+0x3c>)
   d4e44:	7821      	ldrb	r1, [r4, #0]
   d4e46:	f3bf 8f5b 	dmb	ish
   d4e4a:	f011 0101 	ands.w	r1, r1, #1
   d4e4e:	d112      	bne.n	d4e76 <_Z22__fetch_global_Serial1v+0x36>
   d4e50:	4620      	mov	r0, r4
   d4e52:	9101      	str	r1, [sp, #4]
   d4e54:	f7ff f921 	bl	d409a <__cxa_guard_acquire>
   d4e58:	9901      	ldr	r1, [sp, #4]
   d4e5a:	b160      	cbz	r0, d4e76 <_Z22__fetch_global_Serial1v+0x36>
   d4e5c:	4a08      	ldr	r2, [pc, #32]	; (d4e80 <_Z22__fetch_global_Serial1v+0x40>)
   d4e5e:	4b09      	ldr	r3, [pc, #36]	; (d4e84 <_Z22__fetch_global_Serial1v+0x44>)
   d4e60:	4809      	ldr	r0, [pc, #36]	; (d4e88 <_Z22__fetch_global_Serial1v+0x48>)
   d4e62:	f7ff ffd7 	bl	d4e14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4e66:	4620      	mov	r0, r4
   d4e68:	f7ff f91c 	bl	d40a4 <__cxa_guard_release>
   d4e6c:	4a07      	ldr	r2, [pc, #28]	; (d4e8c <_Z22__fetch_global_Serial1v+0x4c>)
   d4e6e:	4908      	ldr	r1, [pc, #32]	; (d4e90 <_Z22__fetch_global_Serial1v+0x50>)
   d4e70:	4805      	ldr	r0, [pc, #20]	; (d4e88 <_Z22__fetch_global_Serial1v+0x48>)
   d4e72:	f000 f8b7 	bl	d4fe4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e76:	4804      	ldr	r0, [pc, #16]	; (d4e88 <_Z22__fetch_global_Serial1v+0x48>)
   d4e78:	b002      	add	sp, #8
   d4e7a:	bd10      	pop	{r4, pc}
   d4e7c:	2003e6c8 	.word	0x2003e6c8
   d4e80:	2003e6cc 	.word	0x2003e6cc
   d4e84:	2003e750 	.word	0x2003e750
   d4e88:	2003e7d4 	.word	0x2003e7d4
   d4e8c:	2003e638 	.word	0x2003e638
   d4e90:	000d4d99 	.word	0x000d4d99

000d4e94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4e94:	2300      	movs	r3, #0
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	461a      	mov	r2, r3
   d4e9a:	f7ff bb11 	b.w	d44c0 <network_connect>

000d4e9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4e9e:	6840      	ldr	r0, [r0, #4]
   d4ea0:	2200      	movs	r2, #0
   d4ea2:	2102      	movs	r1, #2
   d4ea4:	f7ff bb1c 	b.w	d44e0 <network_disconnect>

000d4ea8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	6840      	ldr	r0, [r0, #4]
   d4eac:	4611      	mov	r1, r2
   d4eae:	f7ff bb0f 	b.w	d44d0 <network_connecting>

000d4eb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	6840      	ldr	r0, [r0, #4]
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	f7ff bb1a 	b.w	d44f0 <network_ready>

000d4ebc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4ebc:	2300      	movs	r3, #0
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	461a      	mov	r2, r3
   d4ec2:	4619      	mov	r1, r3
   d4ec4:	f7ff bb1c 	b.w	d4500 <network_on>

000d4ec8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4ec8:	2300      	movs	r3, #0
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	461a      	mov	r2, r3
   d4ece:	4619      	mov	r1, r3
   d4ed0:	f7ff bb1e 	b.w	d4510 <network_off>

000d4ed4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ed4:	6840      	ldr	r0, [r0, #4]
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	f081 0101 	eor.w	r1, r1, #1
   d4edc:	f7ff bb20 	b.w	d4520 <network_listen>

000d4ee0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4ee0:	6840      	ldr	r0, [r0, #4]
   d4ee2:	2200      	movs	r2, #0
   d4ee4:	f7ff bb2c 	b.w	d4540 <network_set_listen_timeout>

000d4ee8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	6840      	ldr	r0, [r0, #4]
   d4eec:	4611      	mov	r1, r2
   d4eee:	f7ff bb2f 	b.w	d4550 <network_get_listen_timeout>

000d4ef2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	4611      	mov	r1, r2
   d4ef8:	f7ff bb1a 	b.w	d4530 <network_listening>

000d4efc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f00:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4f02:	b095      	sub	sp, #84	; 0x54
   d4f04:	4616      	mov	r6, r2
   d4f06:	460d      	mov	r5, r1
   d4f08:	4607      	mov	r7, r0
    IPAddress addr;
   d4f0a:	f7ff fe41 	bl	d4b90 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4f0e:	4621      	mov	r1, r4
   d4f10:	2218      	movs	r2, #24
   d4f12:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4f14:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4f16:	f000 fcad 	bl	d5874 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4f1a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4f1c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4f20:	4621      	mov	r1, r4
   d4f22:	466b      	mov	r3, sp
   d4f24:	aa0c      	add	r2, sp, #48	; 0x30
   d4f26:	4630      	mov	r0, r6
   d4f28:	f7ff f9f4 	bl	d4314 <netdb_getaddrinfo>
    if (!r) {
   d4f2c:	4604      	mov	r4, r0
   d4f2e:	2800      	cmp	r0, #0
   d4f30:	d146      	bne.n	d4fc0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f32:	4602      	mov	r2, r0
   d4f34:	2101      	movs	r1, #1
   d4f36:	6868      	ldr	r0, [r5, #4]
   d4f38:	f7ff fada 	bl	d44f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f3c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f3e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f40:	4622      	mov	r2, r4
   d4f42:	6868      	ldr	r0, [r5, #4]
   d4f44:	f7ff fad4 	bl	d44f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f48:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f4a:	4681      	mov	r9, r0
        bool ok = false;
   d4f4c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f4e:	2e00      	cmp	r6, #0
   d4f50:	d036      	beq.n	d4fc0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4f52:	2900      	cmp	r1, #0
   d4f54:	d134      	bne.n	d4fc0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4f56:	6873      	ldr	r3, [r6, #4]
   d4f58:	2b02      	cmp	r3, #2
   d4f5a:	d003      	beq.n	d4f64 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4f5c:	2b0a      	cmp	r3, #10
   d4f5e:	d00b      	beq.n	d4f78 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f60:	69f6      	ldr	r6, [r6, #28]
   d4f62:	e7f4      	b.n	d4f4e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4f64:	f1b8 0f00 	cmp.w	r8, #0
   d4f68:	d004      	beq.n	d4f74 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4f6a:	6971      	ldr	r1, [r6, #20]
   d4f6c:	4638      	mov	r0, r7
   d4f6e:	3104      	adds	r1, #4
   d4f70:	f7ff fe3b 	bl	d4bea <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4f74:	4641      	mov	r1, r8
   d4f76:	e7f3      	b.n	d4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4f78:	f1b9 0f00 	cmp.w	r9, #0
   d4f7c:	d101      	bne.n	d4f82 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4f7e:	4649      	mov	r1, r9
   d4f80:	e7ee      	b.n	d4f60 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4f82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4f84:	2210      	movs	r2, #16
   d4f86:	a801      	add	r0, sp, #4
   d4f88:	f000 fc74 	bl	d5874 <memset>
                    a.v = 6;
   d4f8c:	2306      	movs	r3, #6
   d4f8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4f92:	ad01      	add	r5, sp, #4
   d4f94:	f104 0308 	add.w	r3, r4, #8
   d4f98:	3418      	adds	r4, #24
   d4f9a:	6818      	ldr	r0, [r3, #0]
   d4f9c:	6859      	ldr	r1, [r3, #4]
   d4f9e:	462a      	mov	r2, r5
   d4fa0:	c203      	stmia	r2!, {r0, r1}
   d4fa2:	3308      	adds	r3, #8
   d4fa4:	42a3      	cmp	r3, r4
   d4fa6:	4615      	mov	r5, r2
   d4fa8:	d1f7      	bne.n	d4f9a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4faa:	a901      	add	r1, sp, #4
   d4fac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4fae:	ad07      	add	r5, sp, #28
   d4fb0:	f7ff fdfc 	bl	d4bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4fb6:	1d3c      	adds	r4, r7, #4
   d4fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fba:	682b      	ldr	r3, [r5, #0]
   d4fbc:	7023      	strb	r3, [r4, #0]
   d4fbe:	e7de      	b.n	d4f7e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4fc0:	9800      	ldr	r0, [sp, #0]
   d4fc2:	f7ff f99f 	bl	d4304 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4fc6:	4638      	mov	r0, r7
   d4fc8:	b015      	add	sp, #84	; 0x54
   d4fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4fd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4fd0:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4fd2:	4a03      	ldr	r2, [pc, #12]	; (d4fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4fd4:	601a      	str	r2, [r3, #0]
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	605a      	str	r2, [r3, #4]

} // spark
   d4fda:	4770      	bx	lr
   d4fdc:	2003e7e8 	.word	0x2003e7e8
   d4fe0:	000d5af8 	.word	0x000d5af8

000d4fe4 <__aeabi_atexit>:
   d4fe4:	460b      	mov	r3, r1
   d4fe6:	4601      	mov	r1, r0
   d4fe8:	4618      	mov	r0, r3
   d4fea:	f000 bc27 	b.w	d583c <__cxa_atexit>

000d4fee <_ZdlPvj>:
   d4fee:	f7ff b852 	b.w	d4096 <_ZdlPv>

000d4ff2 <_ZnwjRKSt9nothrow_t>:
   d4ff2:	f7ff b84e 	b.w	d4092 <_Znwj>
	...

000d4ff8 <__aeabi_drsub>:
   d4ff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d4ffc:	e002      	b.n	d5004 <__adddf3>
   d4ffe:	bf00      	nop

000d5000 <__aeabi_dsub>:
   d5000:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5004 <__adddf3>:
   d5004:	b530      	push	{r4, r5, lr}
   d5006:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d500a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d500e:	ea94 0f05 	teq	r4, r5
   d5012:	bf08      	it	eq
   d5014:	ea90 0f02 	teqeq	r0, r2
   d5018:	bf1f      	itttt	ne
   d501a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d501e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5022:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5026:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d502a:	f000 80e2 	beq.w	d51f2 <__adddf3+0x1ee>
   d502e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5032:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5036:	bfb8      	it	lt
   d5038:	426d      	neglt	r5, r5
   d503a:	dd0c      	ble.n	d5056 <__adddf3+0x52>
   d503c:	442c      	add	r4, r5
   d503e:	ea80 0202 	eor.w	r2, r0, r2
   d5042:	ea81 0303 	eor.w	r3, r1, r3
   d5046:	ea82 0000 	eor.w	r0, r2, r0
   d504a:	ea83 0101 	eor.w	r1, r3, r1
   d504e:	ea80 0202 	eor.w	r2, r0, r2
   d5052:	ea81 0303 	eor.w	r3, r1, r3
   d5056:	2d36      	cmp	r5, #54	; 0x36
   d5058:	bf88      	it	hi
   d505a:	bd30      	pophi	{r4, r5, pc}
   d505c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5060:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5064:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5068:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d506c:	d002      	beq.n	d5074 <__adddf3+0x70>
   d506e:	4240      	negs	r0, r0
   d5070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5074:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5078:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d507c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5080:	d002      	beq.n	d5088 <__adddf3+0x84>
   d5082:	4252      	negs	r2, r2
   d5084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5088:	ea94 0f05 	teq	r4, r5
   d508c:	f000 80a7 	beq.w	d51de <__adddf3+0x1da>
   d5090:	f1a4 0401 	sub.w	r4, r4, #1
   d5094:	f1d5 0e20 	rsbs	lr, r5, #32
   d5098:	db0d      	blt.n	d50b6 <__adddf3+0xb2>
   d509a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d509e:	fa22 f205 	lsr.w	r2, r2, r5
   d50a2:	1880      	adds	r0, r0, r2
   d50a4:	f141 0100 	adc.w	r1, r1, #0
   d50a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d50ac:	1880      	adds	r0, r0, r2
   d50ae:	fa43 f305 	asr.w	r3, r3, r5
   d50b2:	4159      	adcs	r1, r3
   d50b4:	e00e      	b.n	d50d4 <__adddf3+0xd0>
   d50b6:	f1a5 0520 	sub.w	r5, r5, #32
   d50ba:	f10e 0e20 	add.w	lr, lr, #32
   d50be:	2a01      	cmp	r2, #1
   d50c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d50c4:	bf28      	it	cs
   d50c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d50ca:	fa43 f305 	asr.w	r3, r3, r5
   d50ce:	18c0      	adds	r0, r0, r3
   d50d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d50d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d50d8:	d507      	bpl.n	d50ea <__adddf3+0xe6>
   d50da:	f04f 0e00 	mov.w	lr, #0
   d50de:	f1dc 0c00 	rsbs	ip, ip, #0
   d50e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d50e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d50ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d50ee:	d31b      	bcc.n	d5128 <__adddf3+0x124>
   d50f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d50f4:	d30c      	bcc.n	d5110 <__adddf3+0x10c>
   d50f6:	0849      	lsrs	r1, r1, #1
   d50f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d50fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5100:	f104 0401 	add.w	r4, r4, #1
   d5104:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5108:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d510c:	f080 809a 	bcs.w	d5244 <__adddf3+0x240>
   d5110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5114:	bf08      	it	eq
   d5116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d511a:	f150 0000 	adcs.w	r0, r0, #0
   d511e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5122:	ea41 0105 	orr.w	r1, r1, r5
   d5126:	bd30      	pop	{r4, r5, pc}
   d5128:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d512c:	4140      	adcs	r0, r0
   d512e:	eb41 0101 	adc.w	r1, r1, r1
   d5132:	3c01      	subs	r4, #1
   d5134:	bf28      	it	cs
   d5136:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d513a:	d2e9      	bcs.n	d5110 <__adddf3+0x10c>
   d513c:	f091 0f00 	teq	r1, #0
   d5140:	bf04      	itt	eq
   d5142:	4601      	moveq	r1, r0
   d5144:	2000      	moveq	r0, #0
   d5146:	fab1 f381 	clz	r3, r1
   d514a:	bf08      	it	eq
   d514c:	3320      	addeq	r3, #32
   d514e:	f1a3 030b 	sub.w	r3, r3, #11
   d5152:	f1b3 0220 	subs.w	r2, r3, #32
   d5156:	da0c      	bge.n	d5172 <__adddf3+0x16e>
   d5158:	320c      	adds	r2, #12
   d515a:	dd08      	ble.n	d516e <__adddf3+0x16a>
   d515c:	f102 0c14 	add.w	ip, r2, #20
   d5160:	f1c2 020c 	rsb	r2, r2, #12
   d5164:	fa01 f00c 	lsl.w	r0, r1, ip
   d5168:	fa21 f102 	lsr.w	r1, r1, r2
   d516c:	e00c      	b.n	d5188 <__adddf3+0x184>
   d516e:	f102 0214 	add.w	r2, r2, #20
   d5172:	bfd8      	it	le
   d5174:	f1c2 0c20 	rsble	ip, r2, #32
   d5178:	fa01 f102 	lsl.w	r1, r1, r2
   d517c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5180:	bfdc      	itt	le
   d5182:	ea41 010c 	orrle.w	r1, r1, ip
   d5186:	4090      	lslle	r0, r2
   d5188:	1ae4      	subs	r4, r4, r3
   d518a:	bfa2      	ittt	ge
   d518c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5190:	4329      	orrge	r1, r5
   d5192:	bd30      	popge	{r4, r5, pc}
   d5194:	ea6f 0404 	mvn.w	r4, r4
   d5198:	3c1f      	subs	r4, #31
   d519a:	da1c      	bge.n	d51d6 <__adddf3+0x1d2>
   d519c:	340c      	adds	r4, #12
   d519e:	dc0e      	bgt.n	d51be <__adddf3+0x1ba>
   d51a0:	f104 0414 	add.w	r4, r4, #20
   d51a4:	f1c4 0220 	rsb	r2, r4, #32
   d51a8:	fa20 f004 	lsr.w	r0, r0, r4
   d51ac:	fa01 f302 	lsl.w	r3, r1, r2
   d51b0:	ea40 0003 	orr.w	r0, r0, r3
   d51b4:	fa21 f304 	lsr.w	r3, r1, r4
   d51b8:	ea45 0103 	orr.w	r1, r5, r3
   d51bc:	bd30      	pop	{r4, r5, pc}
   d51be:	f1c4 040c 	rsb	r4, r4, #12
   d51c2:	f1c4 0220 	rsb	r2, r4, #32
   d51c6:	fa20 f002 	lsr.w	r0, r0, r2
   d51ca:	fa01 f304 	lsl.w	r3, r1, r4
   d51ce:	ea40 0003 	orr.w	r0, r0, r3
   d51d2:	4629      	mov	r1, r5
   d51d4:	bd30      	pop	{r4, r5, pc}
   d51d6:	fa21 f004 	lsr.w	r0, r1, r4
   d51da:	4629      	mov	r1, r5
   d51dc:	bd30      	pop	{r4, r5, pc}
   d51de:	f094 0f00 	teq	r4, #0
   d51e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d51e6:	bf06      	itte	eq
   d51e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d51ec:	3401      	addeq	r4, #1
   d51ee:	3d01      	subne	r5, #1
   d51f0:	e74e      	b.n	d5090 <__adddf3+0x8c>
   d51f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d51f6:	bf18      	it	ne
   d51f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d51fc:	d029      	beq.n	d5252 <__adddf3+0x24e>
   d51fe:	ea94 0f05 	teq	r4, r5
   d5202:	bf08      	it	eq
   d5204:	ea90 0f02 	teqeq	r0, r2
   d5208:	d005      	beq.n	d5216 <__adddf3+0x212>
   d520a:	ea54 0c00 	orrs.w	ip, r4, r0
   d520e:	bf04      	itt	eq
   d5210:	4619      	moveq	r1, r3
   d5212:	4610      	moveq	r0, r2
   d5214:	bd30      	pop	{r4, r5, pc}
   d5216:	ea91 0f03 	teq	r1, r3
   d521a:	bf1e      	ittt	ne
   d521c:	2100      	movne	r1, #0
   d521e:	2000      	movne	r0, #0
   d5220:	bd30      	popne	{r4, r5, pc}
   d5222:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5226:	d105      	bne.n	d5234 <__adddf3+0x230>
   d5228:	0040      	lsls	r0, r0, #1
   d522a:	4149      	adcs	r1, r1
   d522c:	bf28      	it	cs
   d522e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5232:	bd30      	pop	{r4, r5, pc}
   d5234:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5238:	bf3c      	itt	cc
   d523a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d523e:	bd30      	popcc	{r4, r5, pc}
   d5240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5244:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5248:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d524c:	f04f 0000 	mov.w	r0, #0
   d5250:	bd30      	pop	{r4, r5, pc}
   d5252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5256:	bf1a      	itte	ne
   d5258:	4619      	movne	r1, r3
   d525a:	4610      	movne	r0, r2
   d525c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5260:	bf1c      	itt	ne
   d5262:	460b      	movne	r3, r1
   d5264:	4602      	movne	r2, r0
   d5266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d526a:	bf06      	itte	eq
   d526c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5270:	ea91 0f03 	teqeq	r1, r3
   d5274:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5278:	bd30      	pop	{r4, r5, pc}
   d527a:	bf00      	nop

000d527c <__aeabi_ui2d>:
   d527c:	f090 0f00 	teq	r0, #0
   d5280:	bf04      	itt	eq
   d5282:	2100      	moveq	r1, #0
   d5284:	4770      	bxeq	lr
   d5286:	b530      	push	{r4, r5, lr}
   d5288:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d528c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5290:	f04f 0500 	mov.w	r5, #0
   d5294:	f04f 0100 	mov.w	r1, #0
   d5298:	e750      	b.n	d513c <__adddf3+0x138>
   d529a:	bf00      	nop

000d529c <__aeabi_i2d>:
   d529c:	f090 0f00 	teq	r0, #0
   d52a0:	bf04      	itt	eq
   d52a2:	2100      	moveq	r1, #0
   d52a4:	4770      	bxeq	lr
   d52a6:	b530      	push	{r4, r5, lr}
   d52a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d52ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d52b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d52b4:	bf48      	it	mi
   d52b6:	4240      	negmi	r0, r0
   d52b8:	f04f 0100 	mov.w	r1, #0
   d52bc:	e73e      	b.n	d513c <__adddf3+0x138>
   d52be:	bf00      	nop

000d52c0 <__aeabi_f2d>:
   d52c0:	0042      	lsls	r2, r0, #1
   d52c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d52c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d52ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d52ce:	bf1f      	itttt	ne
   d52d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d52d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d52d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d52dc:	4770      	bxne	lr
   d52de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d52e2:	bf08      	it	eq
   d52e4:	4770      	bxeq	lr
   d52e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d52ea:	bf04      	itt	eq
   d52ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d52f0:	4770      	bxeq	lr
   d52f2:	b530      	push	{r4, r5, lr}
   d52f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d52f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d52fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5300:	e71c      	b.n	d513c <__adddf3+0x138>
   d5302:	bf00      	nop

000d5304 <__aeabi_ul2d>:
   d5304:	ea50 0201 	orrs.w	r2, r0, r1
   d5308:	bf08      	it	eq
   d530a:	4770      	bxeq	lr
   d530c:	b530      	push	{r4, r5, lr}
   d530e:	f04f 0500 	mov.w	r5, #0
   d5312:	e00a      	b.n	d532a <__aeabi_l2d+0x16>

000d5314 <__aeabi_l2d>:
   d5314:	ea50 0201 	orrs.w	r2, r0, r1
   d5318:	bf08      	it	eq
   d531a:	4770      	bxeq	lr
   d531c:	b530      	push	{r4, r5, lr}
   d531e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5322:	d502      	bpl.n	d532a <__aeabi_l2d+0x16>
   d5324:	4240      	negs	r0, r0
   d5326:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d532a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d532e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5332:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5336:	f43f aed8 	beq.w	d50ea <__adddf3+0xe6>
   d533a:	f04f 0203 	mov.w	r2, #3
   d533e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5342:	bf18      	it	ne
   d5344:	3203      	addne	r2, #3
   d5346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d534a:	bf18      	it	ne
   d534c:	3203      	addne	r2, #3
   d534e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5352:	f1c2 0320 	rsb	r3, r2, #32
   d5356:	fa00 fc03 	lsl.w	ip, r0, r3
   d535a:	fa20 f002 	lsr.w	r0, r0, r2
   d535e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5362:	ea40 000e 	orr.w	r0, r0, lr
   d5366:	fa21 f102 	lsr.w	r1, r1, r2
   d536a:	4414      	add	r4, r2
   d536c:	e6bd      	b.n	d50ea <__adddf3+0xe6>
   d536e:	bf00      	nop

000d5370 <__aeabi_dmul>:
   d5370:	b570      	push	{r4, r5, r6, lr}
   d5372:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d537a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d537e:	bf1d      	ittte	ne
   d5380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5384:	ea94 0f0c 	teqne	r4, ip
   d5388:	ea95 0f0c 	teqne	r5, ip
   d538c:	f000 f8de 	bleq	d554c <__aeabi_dmul+0x1dc>
   d5390:	442c      	add	r4, r5
   d5392:	ea81 0603 	eor.w	r6, r1, r3
   d5396:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d539a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d539e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d53a2:	bf18      	it	ne
   d53a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d53a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d53ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d53b0:	d038      	beq.n	d5424 <__aeabi_dmul+0xb4>
   d53b2:	fba0 ce02 	umull	ip, lr, r0, r2
   d53b6:	f04f 0500 	mov.w	r5, #0
   d53ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d53be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d53c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d53c6:	f04f 0600 	mov.w	r6, #0
   d53ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d53ce:	f09c 0f00 	teq	ip, #0
   d53d2:	bf18      	it	ne
   d53d4:	f04e 0e01 	orrne.w	lr, lr, #1
   d53d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d53dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d53e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d53e4:	d204      	bcs.n	d53f0 <__aeabi_dmul+0x80>
   d53e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d53ea:	416d      	adcs	r5, r5
   d53ec:	eb46 0606 	adc.w	r6, r6, r6
   d53f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d53f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d53f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d53fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5400:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5404:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5408:	bf88      	it	hi
   d540a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d540e:	d81e      	bhi.n	d544e <__aeabi_dmul+0xde>
   d5410:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5414:	bf08      	it	eq
   d5416:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d541a:	f150 0000 	adcs.w	r0, r0, #0
   d541e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5422:	bd70      	pop	{r4, r5, r6, pc}
   d5424:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5428:	ea46 0101 	orr.w	r1, r6, r1
   d542c:	ea40 0002 	orr.w	r0, r0, r2
   d5430:	ea81 0103 	eor.w	r1, r1, r3
   d5434:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5438:	bfc2      	ittt	gt
   d543a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d543e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5442:	bd70      	popgt	{r4, r5, r6, pc}
   d5444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5448:	f04f 0e00 	mov.w	lr, #0
   d544c:	3c01      	subs	r4, #1
   d544e:	f300 80ab 	bgt.w	d55a8 <__aeabi_dmul+0x238>
   d5452:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5456:	bfde      	ittt	le
   d5458:	2000      	movle	r0, #0
   d545a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d545e:	bd70      	pople	{r4, r5, r6, pc}
   d5460:	f1c4 0400 	rsb	r4, r4, #0
   d5464:	3c20      	subs	r4, #32
   d5466:	da35      	bge.n	d54d4 <__aeabi_dmul+0x164>
   d5468:	340c      	adds	r4, #12
   d546a:	dc1b      	bgt.n	d54a4 <__aeabi_dmul+0x134>
   d546c:	f104 0414 	add.w	r4, r4, #20
   d5470:	f1c4 0520 	rsb	r5, r4, #32
   d5474:	fa00 f305 	lsl.w	r3, r0, r5
   d5478:	fa20 f004 	lsr.w	r0, r0, r4
   d547c:	fa01 f205 	lsl.w	r2, r1, r5
   d5480:	ea40 0002 	orr.w	r0, r0, r2
   d5484:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d548c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5490:	fa21 f604 	lsr.w	r6, r1, r4
   d5494:	eb42 0106 	adc.w	r1, r2, r6
   d5498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d549c:	bf08      	it	eq
   d549e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d54a2:	bd70      	pop	{r4, r5, r6, pc}
   d54a4:	f1c4 040c 	rsb	r4, r4, #12
   d54a8:	f1c4 0520 	rsb	r5, r4, #32
   d54ac:	fa00 f304 	lsl.w	r3, r0, r4
   d54b0:	fa20 f005 	lsr.w	r0, r0, r5
   d54b4:	fa01 f204 	lsl.w	r2, r1, r4
   d54b8:	ea40 0002 	orr.w	r0, r0, r2
   d54bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d54c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d54c4:	f141 0100 	adc.w	r1, r1, #0
   d54c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d54cc:	bf08      	it	eq
   d54ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d54d2:	bd70      	pop	{r4, r5, r6, pc}
   d54d4:	f1c4 0520 	rsb	r5, r4, #32
   d54d8:	fa00 f205 	lsl.w	r2, r0, r5
   d54dc:	ea4e 0e02 	orr.w	lr, lr, r2
   d54e0:	fa20 f304 	lsr.w	r3, r0, r4
   d54e4:	fa01 f205 	lsl.w	r2, r1, r5
   d54e8:	ea43 0302 	orr.w	r3, r3, r2
   d54ec:	fa21 f004 	lsr.w	r0, r1, r4
   d54f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d54f4:	fa21 f204 	lsr.w	r2, r1, r4
   d54f8:	ea20 0002 	bic.w	r0, r0, r2
   d54fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5504:	bf08      	it	eq
   d5506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d550a:	bd70      	pop	{r4, r5, r6, pc}
   d550c:	f094 0f00 	teq	r4, #0
   d5510:	d10f      	bne.n	d5532 <__aeabi_dmul+0x1c2>
   d5512:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5516:	0040      	lsls	r0, r0, #1
   d5518:	eb41 0101 	adc.w	r1, r1, r1
   d551c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5520:	bf08      	it	eq
   d5522:	3c01      	subeq	r4, #1
   d5524:	d0f7      	beq.n	d5516 <__aeabi_dmul+0x1a6>
   d5526:	ea41 0106 	orr.w	r1, r1, r6
   d552a:	f095 0f00 	teq	r5, #0
   d552e:	bf18      	it	ne
   d5530:	4770      	bxne	lr
   d5532:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5536:	0052      	lsls	r2, r2, #1
   d5538:	eb43 0303 	adc.w	r3, r3, r3
   d553c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5540:	bf08      	it	eq
   d5542:	3d01      	subeq	r5, #1
   d5544:	d0f7      	beq.n	d5536 <__aeabi_dmul+0x1c6>
   d5546:	ea43 0306 	orr.w	r3, r3, r6
   d554a:	4770      	bx	lr
   d554c:	ea94 0f0c 	teq	r4, ip
   d5550:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5554:	bf18      	it	ne
   d5556:	ea95 0f0c 	teqne	r5, ip
   d555a:	d00c      	beq.n	d5576 <__aeabi_dmul+0x206>
   d555c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5560:	bf18      	it	ne
   d5562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5566:	d1d1      	bne.n	d550c <__aeabi_dmul+0x19c>
   d5568:	ea81 0103 	eor.w	r1, r1, r3
   d556c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5570:	f04f 0000 	mov.w	r0, #0
   d5574:	bd70      	pop	{r4, r5, r6, pc}
   d5576:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d557a:	bf06      	itte	eq
   d557c:	4610      	moveq	r0, r2
   d557e:	4619      	moveq	r1, r3
   d5580:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5584:	d019      	beq.n	d55ba <__aeabi_dmul+0x24a>
   d5586:	ea94 0f0c 	teq	r4, ip
   d558a:	d102      	bne.n	d5592 <__aeabi_dmul+0x222>
   d558c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5590:	d113      	bne.n	d55ba <__aeabi_dmul+0x24a>
   d5592:	ea95 0f0c 	teq	r5, ip
   d5596:	d105      	bne.n	d55a4 <__aeabi_dmul+0x234>
   d5598:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d559c:	bf1c      	itt	ne
   d559e:	4610      	movne	r0, r2
   d55a0:	4619      	movne	r1, r3
   d55a2:	d10a      	bne.n	d55ba <__aeabi_dmul+0x24a>
   d55a4:	ea81 0103 	eor.w	r1, r1, r3
   d55a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d55ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d55b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d55b4:	f04f 0000 	mov.w	r0, #0
   d55b8:	bd70      	pop	{r4, r5, r6, pc}
   d55ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d55be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d55c2:	bd70      	pop	{r4, r5, r6, pc}

000d55c4 <__aeabi_ddiv>:
   d55c4:	b570      	push	{r4, r5, r6, lr}
   d55c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d55ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d55ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d55d2:	bf1d      	ittte	ne
   d55d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d55d8:	ea94 0f0c 	teqne	r4, ip
   d55dc:	ea95 0f0c 	teqne	r5, ip
   d55e0:	f000 f8a7 	bleq	d5732 <__aeabi_ddiv+0x16e>
   d55e4:	eba4 0405 	sub.w	r4, r4, r5
   d55e8:	ea81 0e03 	eor.w	lr, r1, r3
   d55ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d55f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d55f4:	f000 8088 	beq.w	d5708 <__aeabi_ddiv+0x144>
   d55f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d55fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5600:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5604:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5608:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d560c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5610:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5614:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5618:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d561c:	429d      	cmp	r5, r3
   d561e:	bf08      	it	eq
   d5620:	4296      	cmpeq	r6, r2
   d5622:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5626:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d562a:	d202      	bcs.n	d5632 <__aeabi_ddiv+0x6e>
   d562c:	085b      	lsrs	r3, r3, #1
   d562e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5632:	1ab6      	subs	r6, r6, r2
   d5634:	eb65 0503 	sbc.w	r5, r5, r3
   d5638:	085b      	lsrs	r3, r3, #1
   d563a:	ea4f 0232 	mov.w	r2, r2, rrx
   d563e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5642:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5646:	ebb6 0e02 	subs.w	lr, r6, r2
   d564a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d564e:	bf22      	ittt	cs
   d5650:	1ab6      	subcs	r6, r6, r2
   d5652:	4675      	movcs	r5, lr
   d5654:	ea40 000c 	orrcs.w	r0, r0, ip
   d5658:	085b      	lsrs	r3, r3, #1
   d565a:	ea4f 0232 	mov.w	r2, r2, rrx
   d565e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5662:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5666:	bf22      	ittt	cs
   d5668:	1ab6      	subcs	r6, r6, r2
   d566a:	4675      	movcs	r5, lr
   d566c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5670:	085b      	lsrs	r3, r3, #1
   d5672:	ea4f 0232 	mov.w	r2, r2, rrx
   d5676:	ebb6 0e02 	subs.w	lr, r6, r2
   d567a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d567e:	bf22      	ittt	cs
   d5680:	1ab6      	subcs	r6, r6, r2
   d5682:	4675      	movcs	r5, lr
   d5684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5688:	085b      	lsrs	r3, r3, #1
   d568a:	ea4f 0232 	mov.w	r2, r2, rrx
   d568e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5692:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5696:	bf22      	ittt	cs
   d5698:	1ab6      	subcs	r6, r6, r2
   d569a:	4675      	movcs	r5, lr
   d569c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d56a0:	ea55 0e06 	orrs.w	lr, r5, r6
   d56a4:	d018      	beq.n	d56d8 <__aeabi_ddiv+0x114>
   d56a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d56aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d56ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d56b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d56b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d56ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d56be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d56c2:	d1c0      	bne.n	d5646 <__aeabi_ddiv+0x82>
   d56c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d56c8:	d10b      	bne.n	d56e2 <__aeabi_ddiv+0x11e>
   d56ca:	ea41 0100 	orr.w	r1, r1, r0
   d56ce:	f04f 0000 	mov.w	r0, #0
   d56d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d56d6:	e7b6      	b.n	d5646 <__aeabi_ddiv+0x82>
   d56d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d56dc:	bf04      	itt	eq
   d56de:	4301      	orreq	r1, r0
   d56e0:	2000      	moveq	r0, #0
   d56e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d56e6:	bf88      	it	hi
   d56e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d56ec:	f63f aeaf 	bhi.w	d544e <__aeabi_dmul+0xde>
   d56f0:	ebb5 0c03 	subs.w	ip, r5, r3
   d56f4:	bf04      	itt	eq
   d56f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d56fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d56fe:	f150 0000 	adcs.w	r0, r0, #0
   d5702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5706:	bd70      	pop	{r4, r5, r6, pc}
   d5708:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d570c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5710:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5714:	bfc2      	ittt	gt
   d5716:	ebd4 050c 	rsbsgt	r5, r4, ip
   d571a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d571e:	bd70      	popgt	{r4, r5, r6, pc}
   d5720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5724:	f04f 0e00 	mov.w	lr, #0
   d5728:	3c01      	subs	r4, #1
   d572a:	e690      	b.n	d544e <__aeabi_dmul+0xde>
   d572c:	ea45 0e06 	orr.w	lr, r5, r6
   d5730:	e68d      	b.n	d544e <__aeabi_dmul+0xde>
   d5732:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5736:	ea94 0f0c 	teq	r4, ip
   d573a:	bf08      	it	eq
   d573c:	ea95 0f0c 	teqeq	r5, ip
   d5740:	f43f af3b 	beq.w	d55ba <__aeabi_dmul+0x24a>
   d5744:	ea94 0f0c 	teq	r4, ip
   d5748:	d10a      	bne.n	d5760 <__aeabi_ddiv+0x19c>
   d574a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d574e:	f47f af34 	bne.w	d55ba <__aeabi_dmul+0x24a>
   d5752:	ea95 0f0c 	teq	r5, ip
   d5756:	f47f af25 	bne.w	d55a4 <__aeabi_dmul+0x234>
   d575a:	4610      	mov	r0, r2
   d575c:	4619      	mov	r1, r3
   d575e:	e72c      	b.n	d55ba <__aeabi_dmul+0x24a>
   d5760:	ea95 0f0c 	teq	r5, ip
   d5764:	d106      	bne.n	d5774 <__aeabi_ddiv+0x1b0>
   d5766:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d576a:	f43f aefd 	beq.w	d5568 <__aeabi_dmul+0x1f8>
   d576e:	4610      	mov	r0, r2
   d5770:	4619      	mov	r1, r3
   d5772:	e722      	b.n	d55ba <__aeabi_dmul+0x24a>
   d5774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5778:	bf18      	it	ne
   d577a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d577e:	f47f aec5 	bne.w	d550c <__aeabi_dmul+0x19c>
   d5782:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5786:	f47f af0d 	bne.w	d55a4 <__aeabi_dmul+0x234>
   d578a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d578e:	f47f aeeb 	bne.w	d5568 <__aeabi_dmul+0x1f8>
   d5792:	e712      	b.n	d55ba <__aeabi_dmul+0x24a>

000d5794 <__aeabi_d2uiz>:
   d5794:	004a      	lsls	r2, r1, #1
   d5796:	d211      	bcs.n	d57bc <__aeabi_d2uiz+0x28>
   d5798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d579c:	d211      	bcs.n	d57c2 <__aeabi_d2uiz+0x2e>
   d579e:	d50d      	bpl.n	d57bc <__aeabi_d2uiz+0x28>
   d57a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d57a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d57a8:	d40e      	bmi.n	d57c8 <__aeabi_d2uiz+0x34>
   d57aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d57ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d57b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d57b6:	fa23 f002 	lsr.w	r0, r3, r2
   d57ba:	4770      	bx	lr
   d57bc:	f04f 0000 	mov.w	r0, #0
   d57c0:	4770      	bx	lr
   d57c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d57c6:	d102      	bne.n	d57ce <__aeabi_d2uiz+0x3a>
   d57c8:	f04f 30ff 	mov.w	r0, #4294967295
   d57cc:	4770      	bx	lr
   d57ce:	f04f 0000 	mov.w	r0, #0
   d57d2:	4770      	bx	lr

000d57d4 <__aeabi_f2lz>:
   d57d4:	ee07 0a90 	vmov	s15, r0
   d57d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d57dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d57e0:	d401      	bmi.n	d57e6 <__aeabi_f2lz+0x12>
   d57e2:	f000 b80b 	b.w	d57fc <__aeabi_f2ulz>
   d57e6:	eef1 7a67 	vneg.f32	s15, s15
   d57ea:	b508      	push	{r3, lr}
   d57ec:	ee17 0a90 	vmov	r0, s15
   d57f0:	f000 f804 	bl	d57fc <__aeabi_f2ulz>
   d57f4:	4240      	negs	r0, r0
   d57f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d57fa:	bd08      	pop	{r3, pc}

000d57fc <__aeabi_f2ulz>:
   d57fc:	b5d0      	push	{r4, r6, r7, lr}
   d57fe:	f7ff fd5f 	bl	d52c0 <__aeabi_f2d>
   d5802:	4b0c      	ldr	r3, [pc, #48]	; (d5834 <__aeabi_f2ulz+0x38>)
   d5804:	2200      	movs	r2, #0
   d5806:	4606      	mov	r6, r0
   d5808:	460f      	mov	r7, r1
   d580a:	f7ff fdb1 	bl	d5370 <__aeabi_dmul>
   d580e:	f7ff ffc1 	bl	d5794 <__aeabi_d2uiz>
   d5812:	4604      	mov	r4, r0
   d5814:	f7ff fd32 	bl	d527c <__aeabi_ui2d>
   d5818:	4b07      	ldr	r3, [pc, #28]	; (d5838 <__aeabi_f2ulz+0x3c>)
   d581a:	2200      	movs	r2, #0
   d581c:	f7ff fda8 	bl	d5370 <__aeabi_dmul>
   d5820:	4602      	mov	r2, r0
   d5822:	460b      	mov	r3, r1
   d5824:	4630      	mov	r0, r6
   d5826:	4639      	mov	r1, r7
   d5828:	f7ff fbea 	bl	d5000 <__aeabi_dsub>
   d582c:	f7ff ffb2 	bl	d5794 <__aeabi_d2uiz>
   d5830:	4621      	mov	r1, r4
   d5832:	bdd0      	pop	{r4, r6, r7, pc}
   d5834:	3df00000 	.word	0x3df00000
   d5838:	41f00000 	.word	0x41f00000

000d583c <__cxa_atexit>:
   d583c:	b510      	push	{r4, lr}
   d583e:	4c05      	ldr	r4, [pc, #20]	; (d5854 <__cxa_atexit+0x18>)
   d5840:	4613      	mov	r3, r2
   d5842:	b12c      	cbz	r4, d5850 <__cxa_atexit+0x14>
   d5844:	460a      	mov	r2, r1
   d5846:	4601      	mov	r1, r0
   d5848:	2002      	movs	r0, #2
   d584a:	f3af 8000 	nop.w
   d584e:	bd10      	pop	{r4, pc}
   d5850:	4620      	mov	r0, r4
   d5852:	e7fc      	b.n	d584e <__cxa_atexit+0x12>
   d5854:	00000000 	.word	0x00000000

000d5858 <memcpy>:
   d5858:	440a      	add	r2, r1
   d585a:	4291      	cmp	r1, r2
   d585c:	f100 33ff 	add.w	r3, r0, #4294967295
   d5860:	d100      	bne.n	d5864 <memcpy+0xc>
   d5862:	4770      	bx	lr
   d5864:	b510      	push	{r4, lr}
   d5866:	f811 4b01 	ldrb.w	r4, [r1], #1
   d586a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d586e:	4291      	cmp	r1, r2
   d5870:	d1f9      	bne.n	d5866 <memcpy+0xe>
   d5872:	bd10      	pop	{r4, pc}

000d5874 <memset>:
   d5874:	4402      	add	r2, r0
   d5876:	4603      	mov	r3, r0
   d5878:	4293      	cmp	r3, r2
   d587a:	d100      	bne.n	d587e <memset+0xa>
   d587c:	4770      	bx	lr
   d587e:	f803 1b01 	strb.w	r1, [r3], #1
   d5882:	e7f9      	b.n	d5878 <memset+0x4>

000d5884 <srand>:
   d5884:	b538      	push	{r3, r4, r5, lr}
   d5886:	4b0d      	ldr	r3, [pc, #52]	; (d58bc <srand+0x38>)
   d5888:	681d      	ldr	r5, [r3, #0]
   d588a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d588c:	4604      	mov	r4, r0
   d588e:	b97b      	cbnz	r3, d58b0 <srand+0x2c>
   d5890:	2018      	movs	r0, #24
   d5892:	f7fe fe8d 	bl	d45b0 <malloc>
   d5896:	4a0a      	ldr	r2, [pc, #40]	; (d58c0 <srand+0x3c>)
   d5898:	4b0a      	ldr	r3, [pc, #40]	; (d58c4 <srand+0x40>)
   d589a:	63a8      	str	r0, [r5, #56]	; 0x38
   d589c:	e9c0 2300 	strd	r2, r3, [r0]
   d58a0:	4b09      	ldr	r3, [pc, #36]	; (d58c8 <srand+0x44>)
   d58a2:	6083      	str	r3, [r0, #8]
   d58a4:	230b      	movs	r3, #11
   d58a6:	8183      	strh	r3, [r0, #12]
   d58a8:	2201      	movs	r2, #1
   d58aa:	2300      	movs	r3, #0
   d58ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d58b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d58b2:	2200      	movs	r2, #0
   d58b4:	611c      	str	r4, [r3, #16]
   d58b6:	615a      	str	r2, [r3, #20]
   d58b8:	bd38      	pop	{r3, r4, r5, pc}
   d58ba:	bf00      	nop
   d58bc:	2003e5d0 	.word	0x2003e5d0
   d58c0:	abcd330e 	.word	0xabcd330e
   d58c4:	e66d1234 	.word	0xe66d1234
   d58c8:	0005deec 	.word	0x0005deec

000d58cc <strlen>:
   d58cc:	4603      	mov	r3, r0
   d58ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d58d2:	2a00      	cmp	r2, #0
   d58d4:	d1fb      	bne.n	d58ce <strlen+0x2>
   d58d6:	1a18      	subs	r0, r3, r0
   d58d8:	3801      	subs	r0, #1
   d58da:	4770      	bx	lr

000d58dc <dynalib_user>:
   d58dc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d58ec:	0000 0000 655a 6f72 7320 656c 7065 7420     ....Zero sleep t
   d58fc:	6d69 2c65 6120 6a64 7375 6974 676e 7420     ime, adjusting t
   d590c:	206f 3031 7320 6365 6e6f 7364 7320 656c     o 10 seconds sle
   d591c:	7065 7420 6d69 2e65 4700 696f 676e 7420     ep time..Going t
   d592c:	206f 6c73 6565 2070 6f66 2072 6425 6d20     o sleep for %d m
   d593c:	6e69 7475 7365 2520 2064 6573 6f63 646e     inutes %d second
   d594c:	2e73 4300 6e6f 656e 7463 6e69 2067 6f74     s..Connecting to
   d595c:	6320 6c65 756c 616c 2072 2e2e 202e 4300      cellular ... .C
   d596c:	756f 646c 276e 2074 6f63 6e6e 6365 2074     ouldn't connect 
   d597c:	6f74 6320 6c65 756c 616c 2e72 4f00 2e4b     to cellular..OK.
   d598c:	4300 6e6f 656e 7463 6e69 2067 6f74 6320     .Connecting to c
   d599c:	6f6c 6475 2e20 2e2e 0020 6f43 6c75 6e64     loud ... .Couldn
   d59ac:	7427 6320 6e6f 656e 7463 7420 206f 6c43     't connect to Cl
   d59bc:	756f 2e64 0000 0000                         oud.....

000d59c4 <_ZTVN5spark13EthernetClassE>:
	...
   d59cc:	464f 000d 4645 000d 463b 000d 4631 000d     OF..EF..;F..1F..
   d59dc:	4625 000d 4619 000d 460d 000d 4605 000d     %F...F...F...F..
   d59ec:	45fb 000d 45f1 000d 4efd 000d 6977 6972     .E...E...N..wiri
   d59fc:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d5a0c:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d5a1c:	6920 766e 6c61 6469 002e 7061 0070 5925      invalid..app.%Y
   d5a2c:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5a3c:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d5a48 <_ZTV9IPAddress>:
	...
   d5a50:	4b2b 000d 4b1b 000d 4b1d 000d               +K...K...K..

000d5a5c <_ZTV9USBSerial>:
	...
   d5a64:	4c03 000d 4c6b 000d 4c41 000d 4821 000d     .L..kL..AL..!H..
   d5a74:	4c33 000d 4c05 000d 4c15 000d 4c65 000d     3L...L...L..eL..
   d5a84:	4c25 000d 4bff 000d                         %L...K..

000d5a8c <_ZTVN5spark13CellularClassE>:
	...
   d5a94:	4d5f 000d 4d55 000d 4d4b 000d 4d0d 000d     _M..UM..KM...M..
   d5aa4:	4d3f 000d 40e3 000d 4d33 000d 4d2b 000d     ?M...@..3M..+M..
   d5ab4:	4d21 000d 4d17 000d 4efd 000d               !M...M...N..

000d5ac0 <_ZTV11USARTSerial>:
	...
   d5ac8:	4d99 000d 4e05 000d 4ddd 000d 4821 000d     .M...N...M..!H..
   d5ad8:	4dad 000d 4dc9 000d 4dbb 000d 4dd7 000d     .M...M...M...M..
   d5ae8:	4d9b 000d 4d9f 000d                         .M...M..

000d5af0 <_ZTVN5spark12NetworkClassE>:
	...
   d5af8:	4e95 000d 4e9f 000d 4ea9 000d 4eb3 000d     .N...N...N...N..
   d5b08:	4ebd 000d 4ec9 000d 4ed5 000d 4ee1 000d     .N...N...N...N..
   d5b18:	4ee9 000d 4ef3 000d 4efd 000d               .N...N...N..

000d5b24 <_ZSt7nothrow>:
	...

000d5b25 <link_const_variable_data_end>:
   d5b25:	00          	.byte	0x00
	...

000d5b28 <link_constructors_location>:
   d5b28:	000d4659 	.word	0x000d4659
   d5b2c:	000d47ad 	.word	0x000d47ad
   d5b30:	000d47f9 	.word	0x000d47f9
   d5b34:	000d492d 	.word	0x000d492d
   d5b38:	000d497d 	.word	0x000d497d
   d5b3c:	000d49b5 	.word	0x000d49b5
   d5b40:	000d4d69 	.word	0x000d4d69
   d5b44:	000d4fd1 	.word	0x000d4fd1

000d5b48 <link_constructors_end>:
	...
