
c:/Users/karaw/Documents/aquarealtime/resdev/software/testProject/target/2.0.0-rc.4/electron/testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002804  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082820  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  08082824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000e4  20000068  20000068  00030068  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808288c  0808288c  0002288c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080828b4  080828b4  000228b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009441a  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c783  00000000  00000000  000b6cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001868  00000000  00000000  000c3455  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003bb8  00000000  00000000  000c4cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000200bb  00000000  00000000  000c8875  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bfdd  00000000  00000000  000e8930  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a900f  00000000  00000000  0010490d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004198  00000000  00000000  001ad91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000128ba  00000000  00000000  001b1ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 808001c:	b508      	push	{r3, lr}
 808001e:	4b02      	ldr	r3, [pc, #8]	; (8080028 <link_dynalib_end+0xc>)
 8080020:	681b      	ldr	r3, [r3, #0]
 8080022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080024:	9301      	str	r3, [sp, #4]
 8080026:	bd08      	pop	{r3, pc}
 8080028:	0806002c 	.word	0x0806002c

0808002c <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 808002c:	b508      	push	{r3, lr}
 808002e:	4b02      	ldr	r3, [pc, #8]	; (8080038 <localtime_r+0xc>)
 8080030:	681b      	ldr	r3, [r3, #0]
 8080032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080034:	9301      	str	r3, [sp, #4]
 8080036:	bd08      	pop	{r3, pc}
 8080038:	0806002c 	.word	0x0806002c

0808003c <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 808003c:	b508      	push	{r3, lr}
 808003e:	4b02      	ldr	r3, [pc, #8]	; (8080048 <strftime+0xc>)
 8080040:	681b      	ldr	r3, [r3, #0]
 8080042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080044:	9301      	str	r3, [sp, #4]
 8080046:	bd08      	pop	{r3, pc}
 8080048:	0806002c 	.word	0x0806002c

0808004c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808004c:	4809      	ldr	r0, [pc, #36]	; (8080074 <module_user_pre_init+0x28>)
 808004e:	490a      	ldr	r1, [pc, #40]	; (8080078 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080050:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080052:	4288      	cmp	r0, r1
 8080054:	d005      	beq.n	8080062 <module_user_pre_init+0x16>
 8080056:	4a09      	ldr	r2, [pc, #36]	; (808007c <module_user_pre_init+0x30>)
 8080058:	4282      	cmp	r2, r0
 808005a:	d002      	beq.n	8080062 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f002 fa71 	bl	8082544 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080062:	4807      	ldr	r0, [pc, #28]	; (8080080 <module_user_pre_init+0x34>)
 8080064:	4a07      	ldr	r2, [pc, #28]	; (8080084 <module_user_pre_init+0x38>)
 8080066:	2100      	movs	r1, #0
 8080068:	1a12      	subs	r2, r2, r0
 808006a:	f002 fa79 	bl	8082560 <memset>
    return &link_heap_start;
}
 808006e:	4806      	ldr	r0, [pc, #24]	; (8080088 <module_user_pre_init+0x3c>)
 8080070:	bd08      	pop	{r3, pc}
 8080072:	bf00      	nop
 8080074:	20000000 	.word	0x20000000
 8080078:	08082824 	.word	0x08082824
 808007c:	20000068 	.word	0x20000068
 8080080:	20000068 	.word	0x20000068
 8080084:	2000014c 	.word	0x2000014c
 8080088:	2000014c 	.word	0x2000014c

0808008c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808008c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808008e:	f000 ffb7 	bl	8081000 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080092:	2500      	movs	r5, #0
 8080094:	4e05      	ldr	r6, [pc, #20]	; (80800ac <module_user_init+0x20>)
 8080096:	4c06      	ldr	r4, [pc, #24]	; (80800b0 <module_user_init+0x24>)
 8080098:	1ba4      	subs	r4, r4, r6
 808009a:	08a4      	lsrs	r4, r4, #2
 808009c:	42a5      	cmp	r5, r4
 808009e:	d100      	bne.n	80800a2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a2:	f856 3b04 	ldr.w	r3, [r6], #4
 80800a6:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800a8:	3501      	adds	r5, #1
 80800aa:	e7f7      	b.n	808009c <module_user_init+0x10>
 80800ac:	08082804 	.word	0x08082804
 80800b0:	08082820 	.word	0x08082820

080800b4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b4:	f000 b846 	b.w	8080144 <setup>

080800b8 <module_user_loop>:
}

void module_user_loop() {
 80800b8:	b508      	push	{r3, lr}
    loop();
 80800ba:	f000 f8c9 	bl	8080250 <loop>
    _post_loop();
}
 80800be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c2:	f000 bf5f 	b.w	8080f84 <_post_loop>

080800c6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800c6:	f000 bacd 	b.w	8080664 <malloc>

080800ca <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800ca:	f000 bad3 	b.w	8080674 <free>

080800ce <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800ce:	7800      	ldrb	r0, [r0, #0]
 80800d0:	fab0 f080 	clz	r0, r0
 80800d4:	0940      	lsrs	r0, r0, #5
 80800d6:	4770      	bx	lr

080800d8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d8:	2301      	movs	r3, #1
 80800da:	7003      	strb	r3, [r0, #0]
 80800dc:	4770      	bx	lr
	...

080800e0 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 80800e0:	2200      	movs	r2, #0
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 80800e2:	b510      	push	{r4, lr}
 80800e4:	b086      	sub	sp, #24
    const int ret = diag_get_source(id, &src, nullptr);
 80800e6:	2003      	movs	r0, #3
 80800e8:	a902      	add	r1, sp, #8
    const diag_source* src = nullptr;
 80800ea:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
 80800ec:	f000 fa0a 	bl	8080504 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 80800f0:	bb10      	cbnz	r0, 8080138 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x58>
        return ret;
    }
    return get(src, val);
 80800f2:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
 80800f4:	b10c      	cbz	r4, 80800fa <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1a>
 80800f6:	6923      	ldr	r3, [r4, #16]
 80800f8:	b923      	cbnz	r3, 8080104 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x24>
 80800fa:	2100      	movs	r1, #0
 80800fc:	200a      	movs	r0, #10
 80800fe:	4a0f      	ldr	r2, [pc, #60]	; (808013c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x5c>)
 8080100:	f000 f9f0 	bl	80804e4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8080104:	2300      	movs	r3, #0
 8080106:	f8ad 300e 	strh.w	r3, [sp, #14]
 808010a:	230c      	movs	r3, #12
 808010c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8080110:	ab01      	add	r3, sp, #4
 8080112:	9304      	str	r3, [sp, #16]
 8080114:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 8080116:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 8080118:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 808011a:	4620      	mov	r0, r4
 808011c:	6923      	ldr	r3, [r4, #16]
 808011e:	aa03      	add	r2, sp, #12
 8080120:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 8080122:	b948      	cbnz	r0, 8080138 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x58>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 8080124:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8080128:	f001 ff4e 	bl	8081fc8 <__aeabi_ui2f>
 808012c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8080130:	f001 ffa2 	bl	8082078 <__aeabi_fmul>

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 8080134:	b006      	add	sp, #24
 8080136:	bd10      	pop	{r4, pc}
            return -1.0f;
 8080138:	4801      	ldr	r0, [pc, #4]	; (8080140 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x60>)
 808013a:	e7fb      	b.n	8080134 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x54>
 808013c:	080803b5 	.word	0x080803b5
 8080140:	bf800000 	.word	0xbf800000

08080144 <setup>:
 */
  uint32_t sleepTime;
  int ctr;

// setup() runs once, when the device is first turned on.
void setup() {
 8080144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080146:	b097      	sub	sp, #92	; 0x5c
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 8080148:	f001 f838 	bl	80811bc <_Z16_fetch_usbserialv>
 808014c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080150:	f001 f828 	bl	80811a4 <_ZN9USBSerial5beginEl>
  Time.zone(-7);
 8080154:	4833      	ldr	r0, [pc, #204]	; (8080224 <setup+0xe0>)
 8080156:	f000 fd79 	bl	8080c4c <_ZN9TimeClass4zoneEf>
  sleepTime = 8 * 3600 * 1000; // 8 hours
 808015a:	4b33      	ldr	r3, [pc, #204]	; (8080228 <setup+0xe4>)
 808015c:	4a33      	ldr	r2, [pc, #204]	; (808022c <setup+0xe8>)
  ctr = 0;
 808015e:	4c34      	ldr	r4, [pc, #208]	; (8080230 <setup+0xec>)
  sleepTime = 8 * 3600 * 1000; // 8 hours
 8080160:	601a      	str	r2, [r3, #0]
  ctr = 0;
 8080162:	2300      	movs	r3, #0
 8080164:	6023      	str	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080166:	f000 f92d 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < 10000; Particle.process());
 808016a:	f242 770f 	movw	r7, #9999	; 0x270f
 808016e:	4605      	mov	r5, r0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080170:	4e30      	ldr	r6, [pc, #192]	; (8080234 <setup+0xf0>)
 8080172:	f000 f927 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
 8080176:	1b40      	subs	r0, r0, r5
 8080178:	42b8      	cmp	r0, r7
 808017a:	d805      	bhi.n	8080188 <setup+0x44>
		return HAL_Timer_Get_Milli_Seconds();
 808017c:	f000 f922 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8080180:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080182:	f000 fa4f 	bl	8080624 <spark_process>
    }
 8080186:	e7f4      	b.n	8080172 <setup+0x2e>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080188:	492b      	ldr	r1, [pc, #172]	; (8080238 <setup+0xf4>)
 808018a:	a80a      	add	r0, sp, #40	; 0x28
 808018c:	f000 fc4c 	bl	8080a28 <_ZN6StringC1EPKc>
  String dat = "Loop #: " + (String) ctr + " Time: " + Time.format(Time.now(), "%Y-%m-%d %H:%M:%S") + " BattSOC: " + (String) System.batteryCharge();
 8080190:	220a      	movs	r2, #10
 8080192:	6821      	ldr	r1, [r4, #0]
 8080194:	a806      	add	r0, sp, #24
 8080196:	f000 fc85 	bl	8080aa4 <_ZN6StringC1Eih>
 808019a:	a906      	add	r1, sp, #24
 808019c:	a80a      	add	r0, sp, #40	; 0x28
 808019e:	f000 fcc2 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 80801a2:	4926      	ldr	r1, [pc, #152]	; (808023c <setup+0xf8>)
 80801a4:	f000 fccb 	bl	8080b3e <_ZplRK15StringSumHelperPKc>
 80801a8:	4604      	mov	r4, r0
 80801aa:	f000 fe70 	bl	8080e8e <_ZN9TimeClass3nowEv>
 80801ae:	4b24      	ldr	r3, [pc, #144]	; (8080240 <setup+0xfc>)
 80801b0:	4602      	mov	r2, r0
 80801b2:	9300      	str	r3, [sp, #0]
 80801b4:	4923      	ldr	r1, [pc, #140]	; (8080244 <setup+0x100>)
 80801b6:	17c3      	asrs	r3, r0, #31
 80801b8:	a80e      	add	r0, sp, #56	; 0x38
 80801ba:	f000 fe09 	bl	8080dd0 <_ZN9TimeClass6formatExPKc>
 80801be:	a90e      	add	r1, sp, #56	; 0x38
 80801c0:	4620      	mov	r0, r4
 80801c2:	f000 fcb0 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 80801c6:	4920      	ldr	r1, [pc, #128]	; (8080248 <setup+0x104>)
 80801c8:	f000 fcb9 	bl	8080b3e <_ZplRK15StringSumHelperPKc>
 80801cc:	4604      	mov	r4, r0
 80801ce:	f7ff ff87 	bl	80800e0 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 80801d2:	2206      	movs	r2, #6
 80801d4:	4601      	mov	r1, r0
 80801d6:	a812      	add	r0, sp, #72	; 0x48
 80801d8:	f000 fc77 	bl	8080aca <_ZN6StringC1Efi>
 80801dc:	a912      	add	r1, sp, #72	; 0x48
 80801de:	4620      	mov	r0, r4
 80801e0:	f000 fca1 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 80801e4:	4601      	mov	r1, r0
 80801e6:	a802      	add	r0, sp, #8
 80801e8:	f000 fc40 	bl	8080a6c <_ZN6StringC1ERKS_>
 80801ec:	a812      	add	r0, sp, #72	; 0x48
 80801ee:	f000 fbd1 	bl	8080994 <_ZN6StringD1Ev>
 80801f2:	a80e      	add	r0, sp, #56	; 0x38
 80801f4:	f000 fbce 	bl	8080994 <_ZN6StringD1Ev>
 80801f8:	a806      	add	r0, sp, #24
 80801fa:	f000 fbcb 	bl	8080994 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80801fe:	a80a      	add	r0, sp, #40	; 0x28
 8080200:	f000 fbc8 	bl	8080994 <_ZN6StringD1Ev>
  Serial.println("======= SET UP ===========");
 8080204:	f000 ffda 	bl	80811bc <_Z16_fetch_usbserialv>
 8080208:	4910      	ldr	r1, [pc, #64]	; (808024c <setup+0x108>)
 808020a:	f000 fce1 	bl	8080bd0 <_ZN5Print7printlnEPKc>
  Serial.println(dat);
 808020e:	f000 ffd5 	bl	80811bc <_Z16_fetch_usbserialv>
 8080212:	9902      	ldr	r1, [sp, #8]
 8080214:	f000 fcdc 	bl	8080bd0 <_ZN5Print7printlnEPKc>
  String dat = "Loop #: " + (String) ctr + " Time: " + Time.format(Time.now(), "%Y-%m-%d %H:%M:%S") + " BattSOC: " + (String) System.batteryCharge();
 8080218:	a802      	add	r0, sp, #8
 808021a:	f000 fbbb 	bl	8080994 <_ZN6StringD1Ev>

}
 808021e:	b017      	add	sp, #92	; 0x5c
 8080220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080222:	bf00      	nop
 8080224:	c0e00000 	.word	0xc0e00000
 8080228:	20000070 	.word	0x20000070
 808022c:	01b77400 	.word	0x01b77400
 8080230:	2000006c 	.word	0x2000006c
 8080234:	20000140 	.word	0x20000140
 8080238:	08082628 	.word	0x08082628
 808023c:	08082631 	.word	0x08082631
 8080240:	08082639 	.word	0x08082639
 8080244:	20000088 	.word	0x20000088
 8080248:	0808264b 	.word	0x0808264b
 808024c:	08082656 	.word	0x08082656

08080250 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 8080250:	b5f0      	push	{r4, r5, r6, r7, lr}
  ctr++;
 8080252:	4c4a      	ldr	r4, [pc, #296]	; (808037c <loop+0x12c>)
void loop() {
 8080254:	b099      	sub	sp, #100	; 0x64
  ctr++;
 8080256:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
 8080258:	4949      	ldr	r1, [pc, #292]	; (8080380 <loop+0x130>)
 808025a:	3301      	adds	r3, #1
 808025c:	a80a      	add	r0, sp, #40	; 0x28
 808025e:	6023      	str	r3, [r4, #0]
 8080260:	f000 fbe2 	bl	8080a28 <_ZN6StringC1EPKc>
  // The core of your code will likely live here.
  String dat = "Loop #: " + (String) ctr + " Time: " + Time.format(Time.now(), "%Y-%m-%d %H:%M:%S") + " BattSOC: " + (String) System.batteryCharge();
 8080264:	220a      	movs	r2, #10
 8080266:	6821      	ldr	r1, [r4, #0]
 8080268:	a806      	add	r0, sp, #24
 808026a:	f000 fc1b 	bl	8080aa4 <_ZN6StringC1Eih>
 808026e:	a906      	add	r1, sp, #24
 8080270:	a80a      	add	r0, sp, #40	; 0x28
 8080272:	f000 fc58 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 8080276:	4943      	ldr	r1, [pc, #268]	; (8080384 <loop+0x134>)
 8080278:	f000 fc61 	bl	8080b3e <_ZplRK15StringSumHelperPKc>
 808027c:	4604      	mov	r4, r0
 808027e:	f000 fe06 	bl	8080e8e <_ZN9TimeClass3nowEv>
 8080282:	4b41      	ldr	r3, [pc, #260]	; (8080388 <loop+0x138>)
 8080284:	4602      	mov	r2, r0
 8080286:	4941      	ldr	r1, [pc, #260]	; (808038c <loop+0x13c>)
 8080288:	9300      	str	r3, [sp, #0]
 808028a:	17c3      	asrs	r3, r0, #31
 808028c:	a80e      	add	r0, sp, #56	; 0x38
 808028e:	f000 fd9f 	bl	8080dd0 <_ZN9TimeClass6formatExPKc>
 8080292:	4620      	mov	r0, r4
 8080294:	a90e      	add	r1, sp, #56	; 0x38
 8080296:	f000 fc46 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 808029a:	493d      	ldr	r1, [pc, #244]	; (8080390 <loop+0x140>)
 808029c:	f000 fc4f 	bl	8080b3e <_ZplRK15StringSumHelperPKc>
 80802a0:	4604      	mov	r4, r0
 80802a2:	f7ff ff1d 	bl	80800e0 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 80802a6:	2206      	movs	r2, #6
 80802a8:	4601      	mov	r1, r0
 80802aa:	a812      	add	r0, sp, #72	; 0x48
 80802ac:	f000 fc0d 	bl	8080aca <_ZN6StringC1Efi>
 80802b0:	4620      	mov	r0, r4
 80802b2:	a912      	add	r1, sp, #72	; 0x48
 80802b4:	f000 fc37 	bl	8080b26 <_ZplRK15StringSumHelperRK6String>
 80802b8:	4601      	mov	r1, r0
 80802ba:	a802      	add	r0, sp, #8
 80802bc:	f000 fbd6 	bl	8080a6c <_ZN6StringC1ERKS_>
 80802c0:	a812      	add	r0, sp, #72	; 0x48
 80802c2:	f000 fb67 	bl	8080994 <_ZN6StringD1Ev>
 80802c6:	a80e      	add	r0, sp, #56	; 0x38
 80802c8:	f000 fb64 	bl	8080994 <_ZN6StringD1Ev>
 80802cc:	a806      	add	r0, sp, #24
 80802ce:	f000 fb61 	bl	8080994 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80802d2:	a80a      	add	r0, sp, #40	; 0x28
 80802d4:	f000 fb5e 	bl	8080994 <_ZN6StringD1Ev>
  Serial.println(dat);
 80802d8:	f000 ff70 	bl	80811bc <_Z16_fetch_usbserialv>
 80802dc:	9902      	ldr	r1, [sp, #8]
 80802de:	f000 fc77 	bl	8080bd0 <_ZN5Print7printlnEPKc>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 80802e2:	ab13      	add	r3, sp, #76	; 0x4c
 80802e4:	9312      	str	r3, [sp, #72]	; 0x48
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 80802e6:	2301      	movs	r3, #1
 80802e8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80802ec:	2302      	movs	r3, #2
              valid_(true) {
 80802ee:	2500      	movs	r5, #0
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80802f0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        config_.size = sizeof(hal_sleep_config_t);
 80802f4:	4e27      	ldr	r6, [pc, #156]	; (8080394 <loop+0x144>)
  // Serial.printlnf("Loop #: %d, Time: %Y-%m-%d %H:%M:%S, BattSOC: %d",ctr,Time.format(Time.now(), "%Y-%m-%d %H:%M:%S"), System.batteryCharge());
  SystemSleepConfiguration config;
  config.mode(SystemSleepMode::ULTRA_LOW_POWER)
            .duration(sleepTime); 
 80802f6:	4b28      	ldr	r3, [pc, #160]	; (8080398 <loop+0x148>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 80802f8:	2010      	movs	r0, #16
 80802fa:	4928      	ldr	r1, [pc, #160]	; (808039c <loop+0x14c>)
        config_.wakeup_sources = nullptr;
 80802fc:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8080300:	681f      	ldr	r7, [r3, #0]
              valid_(true) {
 8080302:	f8ad 5051 	strh.w	r5, [sp, #81]	; 0x51
 8080306:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
        config_.size = sizeof(hal_sleep_config_t);
 808030a:	9613      	str	r6, [sp, #76]	; 0x4c
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 808030c:	f001 f92d 	bl	808156a <_ZnwjRKSt9nothrow_t>
 8080310:	4604      	mov	r4, r0
 8080312:	b380      	cbz	r0, 8080376 <loop+0x126>
 8080314:	2210      	movs	r2, #16
 8080316:	4629      	mov	r1, r5
 8080318:	f002 f922 	bl	8082560 <memset>
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 808031c:	2304      	movs	r3, #4
 808031e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 8080320:	9b16      	ldr	r3, [sp, #88]	; 0x58
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 8080322:	6026      	str	r6, [r4, #0]
            wakeupSource->ms = ms;
 8080324:	e9c4 3702 	strd	r3, r7, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080328:	9416      	str	r4, [sp, #88]	; 0x58
 808032a:	f000 f84b 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
  for (uint32_t ms = millis(); millis() - ms < 10000; Particle.process());
 808032e:	f242 760f 	movw	r6, #9999	; 0x270f
 8080332:	4604      	mov	r4, r0
 8080334:	4d1a      	ldr	r5, [pc, #104]	; (80803a0 <loop+0x150>)
 8080336:	f000 f845 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
 808033a:	1b00      	subs	r0, r0, r4
 808033c:	42b0      	cmp	r0, r6
 808033e:	d805      	bhi.n	808034c <loop+0xfc>
		return HAL_Timer_Get_Milli_Seconds();
 8080340:	f000 f840 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8080344:	6028      	str	r0, [r5, #0]
    		spark_process();
 8080346:	f000 f96d 	bl	8080624 <spark_process>
    }
 808034a:	e7f4      	b.n	8080336 <loop+0xe6>
  SystemSleepResult result = System.sleep(config);
 808034c:	a80e      	add	r0, sp, #56	; 0x38
 808034e:	a912      	add	r1, sp, #72	; 0x48
 8080350:	f000 f9f4 	bl	808073c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 8080354:	980e      	ldr	r0, [sp, #56]	; 0x38
 8080356:	b108      	cbz	r0, 808035c <loop+0x10c>
            free(wakeupSource_);
 8080358:	f000 f98c 	bl	8080674 <free>
        auto wakeupSource = config_.wakeup_sources;
 808035c:	9816      	ldr	r0, [sp, #88]	; 0x58
        while (wakeupSource) {
 808035e:	b128      	cbz	r0, 808036c <loop+0x11c>
            auto next = wakeupSource->next;
 8080360:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
 8080362:	210c      	movs	r1, #12
 8080364:	f001 f8ff 	bl	8081566 <_ZdlPvj>
            wakeupSource = next;
 8080368:	4620      	mov	r0, r4
        while (wakeupSource) {
 808036a:	e7f8      	b.n	808035e <loop+0x10e>
  String dat = "Loop #: " + (String) ctr + " Time: " + Time.format(Time.now(), "%Y-%m-%d %H:%M:%S") + " BattSOC: " + (String) System.batteryCharge();
 808036c:	a802      	add	r0, sp, #8
 808036e:	f000 fb11 	bl	8080994 <_ZN6StringD1Ev>

 8080372:	b019      	add	sp, #100	; 0x64
 8080374:	bdf0      	pop	{r4, r5, r6, r7, pc}
                valid_ = false;
 8080376:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
                return *this;
 808037a:	e7d6      	b.n	808032a <loop+0xda>
 808037c:	2000006c 	.word	0x2000006c
 8080380:	08082628 	.word	0x08082628
 8080384:	08082631 	.word	0x08082631
 8080388:	08082639 	.word	0x08082639
 808038c:	20000088 	.word	0x20000088
 8080390:	0808264b 	.word	0x0808264b
 8080394:	00030010 	.word	0x00030010
 8080398:	20000070 	.word	0x20000070
 808039c:	080827a8 	.word	0x080827a8
 80803a0:	20000140 	.word	0x20000140

080803a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80803a4:	b508      	push	{r3, lr}
 80803a6:	4b02      	ldr	r3, [pc, #8]	; (80803b0 <HAL_RNG_GetRandomNumber+0xc>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	685b      	ldr	r3, [r3, #4]
 80803ac:	9301      	str	r3, [sp, #4]
 80803ae:	bd08      	pop	{r3, pc}
 80803b0:	0804019c 	.word	0x0804019c

080803b4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80803b4:	b508      	push	{r3, lr}
 80803b6:	4b02      	ldr	r3, [pc, #8]	; (80803c0 <HAL_Delay_Microseconds+0xc>)
 80803b8:	681b      	ldr	r3, [r3, #0]
 80803ba:	68db      	ldr	r3, [r3, #12]
 80803bc:	9301      	str	r3, [sp, #4]
 80803be:	bd08      	pop	{r3, pc}
 80803c0:	0804019c 	.word	0x0804019c

080803c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80803c4:	b508      	push	{r3, lr}
 80803c6:	4b02      	ldr	r3, [pc, #8]	; (80803d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80803c8:	681b      	ldr	r3, [r3, #0]
 80803ca:	695b      	ldr	r3, [r3, #20]
 80803cc:	9301      	str	r3, [sp, #4]
 80803ce:	bd08      	pop	{r3, pc}
 80803d0:	0804019c 	.word	0x0804019c

080803d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80803d4:	b508      	push	{r3, lr}
 80803d6:	4b02      	ldr	r3, [pc, #8]	; (80803e0 <hal_rtc_time_is_valid+0xc>)
 80803d8:	681b      	ldr	r3, [r3, #0]
 80803da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80803dc:	9301      	str	r3, [sp, #4]
 80803de:	bd08      	pop	{r3, pc}
 80803e0:	0804019c 	.word	0x0804019c

080803e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80803e4:	b508      	push	{r3, lr}
 80803e6:	4b02      	ldr	r3, [pc, #8]	; (80803f0 <hal_rtc_get_time+0xc>)
 80803e8:	681b      	ldr	r3, [r3, #0]
 80803ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80803ec:	9301      	str	r3, [sp, #4]
 80803ee:	bd08      	pop	{r3, pc}
 80803f0:	0804019c 	.word	0x0804019c

080803f4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80803f4:	b508      	push	{r3, lr}
 80803f6:	4b02      	ldr	r3, [pc, #8]	; (8080400 <hal_usart_init+0xc>)
 80803f8:	681b      	ldr	r3, [r3, #0]
 80803fa:	699b      	ldr	r3, [r3, #24]
 80803fc:	9301      	str	r3, [sp, #4]
 80803fe:	bd08      	pop	{r3, pc}
 8080400:	080401c4 	.word	0x080401c4

08080404 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8080404:	b508      	push	{r3, lr}
 8080406:	4b02      	ldr	r3, [pc, #8]	; (8080410 <hal_usart_write+0xc>)
 8080408:	681b      	ldr	r3, [r3, #0]
 808040a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808040c:	9301      	str	r3, [sp, #4]
 808040e:	bd08      	pop	{r3, pc}
 8080410:	080401c4 	.word	0x080401c4

08080414 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8080414:	b508      	push	{r3, lr}
 8080416:	4b02      	ldr	r3, [pc, #8]	; (8080420 <hal_usart_available+0xc>)
 8080418:	681b      	ldr	r3, [r3, #0]
 808041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808041c:	9301      	str	r3, [sp, #4]
 808041e:	bd08      	pop	{r3, pc}
 8080420:	080401c4 	.word	0x080401c4

08080424 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8080424:	b508      	push	{r3, lr}
 8080426:	4b02      	ldr	r3, [pc, #8]	; (8080430 <hal_usart_read+0xc>)
 8080428:	681b      	ldr	r3, [r3, #0]
 808042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808042c:	9301      	str	r3, [sp, #4]
 808042e:	bd08      	pop	{r3, pc}
 8080430:	080401c4 	.word	0x080401c4

08080434 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8080434:	b508      	push	{r3, lr}
 8080436:	4b02      	ldr	r3, [pc, #8]	; (8080440 <hal_usart_peek+0xc>)
 8080438:	681b      	ldr	r3, [r3, #0]
 808043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808043c:	9301      	str	r3, [sp, #4]
 808043e:	bd08      	pop	{r3, pc}
 8080440:	080401c4 	.word	0x080401c4

08080444 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8080444:	b508      	push	{r3, lr}
 8080446:	4b02      	ldr	r3, [pc, #8]	; (8080450 <hal_usart_flush+0xc>)
 8080448:	681b      	ldr	r3, [r3, #0]
 808044a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808044c:	9301      	str	r3, [sp, #4]
 808044e:	bd08      	pop	{r3, pc}
 8080450:	080401c4 	.word	0x080401c4

08080454 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8080454:	b508      	push	{r3, lr}
 8080456:	4b02      	ldr	r3, [pc, #8]	; (8080460 <hal_usart_available_data_for_write+0xc>)
 8080458:	681b      	ldr	r3, [r3, #0]
 808045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808045c:	9301      	str	r3, [sp, #4]
 808045e:	bd08      	pop	{r3, pc}
 8080460:	080401c4 	.word	0x080401c4

08080464 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080464:	b508      	push	{r3, lr}
 8080466:	4b02      	ldr	r3, [pc, #8]	; (8080470 <inet_gethostbyname+0xc>)
 8080468:	681b      	ldr	r3, [r3, #0]
 808046a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808046c:	9301      	str	r3, [sp, #4]
 808046e:	bd08      	pop	{r3, pc}
 8080470:	08060020 	.word	0x08060020

08080474 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080474:	b508      	push	{r3, lr}
 8080476:	4b02      	ldr	r3, [pc, #8]	; (8080480 <HAL_USB_USART_Init+0xc>)
 8080478:	681b      	ldr	r3, [r3, #0]
 808047a:	681b      	ldr	r3, [r3, #0]
 808047c:	9301      	str	r3, [sp, #4]
 808047e:	bd08      	pop	{r3, pc}
 8080480:	0806001c 	.word	0x0806001c

08080484 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080484:	b508      	push	{r3, lr}
 8080486:	4b02      	ldr	r3, [pc, #8]	; (8080490 <HAL_USB_USART_Begin+0xc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	685b      	ldr	r3, [r3, #4]
 808048c:	9301      	str	r3, [sp, #4]
 808048e:	bd08      	pop	{r3, pc}
 8080490:	0806001c 	.word	0x0806001c

08080494 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080494:	b508      	push	{r3, lr}
 8080496:	4b02      	ldr	r3, [pc, #8]	; (80804a0 <HAL_USB_USART_Available_Data+0xc>)
 8080498:	681b      	ldr	r3, [r3, #0]
 808049a:	691b      	ldr	r3, [r3, #16]
 808049c:	9301      	str	r3, [sp, #4]
 808049e:	bd08      	pop	{r3, pc}
 80804a0:	0806001c 	.word	0x0806001c

080804a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80804a4:	b508      	push	{r3, lr}
 80804a6:	4b02      	ldr	r3, [pc, #8]	; (80804b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80804a8:	681b      	ldr	r3, [r3, #0]
 80804aa:	695b      	ldr	r3, [r3, #20]
 80804ac:	9301      	str	r3, [sp, #4]
 80804ae:	bd08      	pop	{r3, pc}
 80804b0:	0806001c 	.word	0x0806001c

080804b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804b4:	b508      	push	{r3, lr}
 80804b6:	4b02      	ldr	r3, [pc, #8]	; (80804c0 <HAL_USB_USART_Receive_Data+0xc>)
 80804b8:	681b      	ldr	r3, [r3, #0]
 80804ba:	699b      	ldr	r3, [r3, #24]
 80804bc:	9301      	str	r3, [sp, #4]
 80804be:	bd08      	pop	{r3, pc}
 80804c0:	0806001c 	.word	0x0806001c

080804c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804c4:	b508      	push	{r3, lr}
 80804c6:	4b02      	ldr	r3, [pc, #8]	; (80804d0 <HAL_USB_USART_Send_Data+0xc>)
 80804c8:	681b      	ldr	r3, [r3, #0]
 80804ca:	69db      	ldr	r3, [r3, #28]
 80804cc:	9301      	str	r3, [sp, #4]
 80804ce:	bd08      	pop	{r3, pc}
 80804d0:	0806001c 	.word	0x0806001c

080804d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <HAL_USB_USART_Flush_Data+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	6a1b      	ldr	r3, [r3, #32]
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	0806001c 	.word	0x0806001c

080804e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <panic_+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	080201a0 	.word	0x080201a0

080804f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b02      	ldr	r3, [pc, #8]	; (8080500 <log_message+0xc>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80804fc:	9301      	str	r3, [sp, #4]
 80804fe:	bd08      	pop	{r3, pc}
 8080500:	080201a0 	.word	0x080201a0

08080504 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b03      	ldr	r3, [pc, #12]	; (8080514 <diag_get_source+0x10>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 808050e:	9301      	str	r3, [sp, #4]
 8080510:	bd08      	pop	{r3, pc}
 8080512:	0000      	.short	0x0000
 8080514:	080201a0 	.word	0x080201a0

08080518 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <system_mode+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	681b      	ldr	r3, [r3, #0]
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401a4 	.word	0x080401a4

08080528 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <set_system_mode+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	685b      	ldr	r3, [r3, #4]
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401a4 	.word	0x080401a4

08080538 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <system_thread_get_state+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401a4 	.word	0x080401a4

08080548 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b03      	ldr	r3, [pc, #12]	; (8080558 <system_ctrl_set_app_request_handler+0x10>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080552:	9301      	str	r3, [sp, #4]
 8080554:	bd08      	pop	{r3, pc}
 8080556:	0000      	.short	0x0000
 8080558:	080401a4 	.word	0x080401a4

0808055c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808055c:	b508      	push	{r3, lr}
 808055e:	4b03      	ldr	r3, [pc, #12]	; (808056c <system_ctrl_set_result+0x10>)
 8080560:	681b      	ldr	r3, [r3, #0]
 8080562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080566:	9301      	str	r3, [sp, #4]
 8080568:	bd08      	pop	{r3, pc}
 808056a:	0000      	.short	0x0000
 808056c:	080401a4 	.word	0x080401a4

08080570 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 8080570:	b508      	push	{r3, lr}
 8080572:	4b03      	ldr	r3, [pc, #12]	; (8080580 <system_sleep_ext+0x10>)
 8080574:	681b      	ldr	r3, [r3, #0]
 8080576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 808057a:	9301      	str	r3, [sp, #4]
 808057c:	bd08      	pop	{r3, pc}
 808057e:	0000      	.short	0x0000
 8080580:	080401a4 	.word	0x080401a4

08080584 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080584:	b508      	push	{r3, lr}
 8080586:	4b02      	ldr	r3, [pc, #8]	; (8080590 <network_connect+0xc>)
 8080588:	681b      	ldr	r3, [r3, #0]
 808058a:	685b      	ldr	r3, [r3, #4]
 808058c:	9301      	str	r3, [sp, #4]
 808058e:	bd08      	pop	{r3, pc}
 8080590:	080401c8 	.word	0x080401c8

08080594 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080594:	b508      	push	{r3, lr}
 8080596:	4b02      	ldr	r3, [pc, #8]	; (80805a0 <network_connecting+0xc>)
 8080598:	681b      	ldr	r3, [r3, #0]
 808059a:	689b      	ldr	r3, [r3, #8]
 808059c:	9301      	str	r3, [sp, #4]
 808059e:	bd08      	pop	{r3, pc}
 80805a0:	080401c8 	.word	0x080401c8

080805a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80805a4:	b508      	push	{r3, lr}
 80805a6:	4b02      	ldr	r3, [pc, #8]	; (80805b0 <network_disconnect+0xc>)
 80805a8:	681b      	ldr	r3, [r3, #0]
 80805aa:	68db      	ldr	r3, [r3, #12]
 80805ac:	9301      	str	r3, [sp, #4]
 80805ae:	bd08      	pop	{r3, pc}
 80805b0:	080401c8 	.word	0x080401c8

080805b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80805b4:	b508      	push	{r3, lr}
 80805b6:	4b02      	ldr	r3, [pc, #8]	; (80805c0 <network_ready+0xc>)
 80805b8:	681b      	ldr	r3, [r3, #0]
 80805ba:	691b      	ldr	r3, [r3, #16]
 80805bc:	9301      	str	r3, [sp, #4]
 80805be:	bd08      	pop	{r3, pc}
 80805c0:	080401c8 	.word	0x080401c8

080805c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80805c4:	b508      	push	{r3, lr}
 80805c6:	4b02      	ldr	r3, [pc, #8]	; (80805d0 <network_on+0xc>)
 80805c8:	681b      	ldr	r3, [r3, #0]
 80805ca:	695b      	ldr	r3, [r3, #20]
 80805cc:	9301      	str	r3, [sp, #4]
 80805ce:	bd08      	pop	{r3, pc}
 80805d0:	080401c8 	.word	0x080401c8

080805d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80805d4:	b508      	push	{r3, lr}
 80805d6:	4b02      	ldr	r3, [pc, #8]	; (80805e0 <network_off+0xc>)
 80805d8:	681b      	ldr	r3, [r3, #0]
 80805da:	699b      	ldr	r3, [r3, #24]
 80805dc:	9301      	str	r3, [sp, #4]
 80805de:	bd08      	pop	{r3, pc}
 80805e0:	080401c8 	.word	0x080401c8

080805e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80805e4:	b508      	push	{r3, lr}
 80805e6:	4b02      	ldr	r3, [pc, #8]	; (80805f0 <network_listen+0xc>)
 80805e8:	681b      	ldr	r3, [r3, #0]
 80805ea:	69db      	ldr	r3, [r3, #28]
 80805ec:	9301      	str	r3, [sp, #4]
 80805ee:	bd08      	pop	{r3, pc}
 80805f0:	080401c8 	.word	0x080401c8

080805f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80805f4:	b508      	push	{r3, lr}
 80805f6:	4b02      	ldr	r3, [pc, #8]	; (8080600 <network_listening+0xc>)
 80805f8:	681b      	ldr	r3, [r3, #0]
 80805fa:	6a1b      	ldr	r3, [r3, #32]
 80805fc:	9301      	str	r3, [sp, #4]
 80805fe:	bd08      	pop	{r3, pc}
 8080600:	080401c8 	.word	0x080401c8

08080604 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080604:	b508      	push	{r3, lr}
 8080606:	4b02      	ldr	r3, [pc, #8]	; (8080610 <network_set_listen_timeout+0xc>)
 8080608:	681b      	ldr	r3, [r3, #0]
 808060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808060c:	9301      	str	r3, [sp, #4]
 808060e:	bd08      	pop	{r3, pc}
 8080610:	080401c8 	.word	0x080401c8

08080614 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080614:	b508      	push	{r3, lr}
 8080616:	4b02      	ldr	r3, [pc, #8]	; (8080620 <network_get_listen_timeout+0xc>)
 8080618:	681b      	ldr	r3, [r3, #0]
 808061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808061c:	9301      	str	r3, [sp, #4]
 808061e:	bd08      	pop	{r3, pc}
 8080620:	080401c8 	.word	0x080401c8

08080624 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080624:	b508      	push	{r3, lr}
 8080626:	4b02      	ldr	r3, [pc, #8]	; (8080630 <spark_process+0xc>)
 8080628:	681b      	ldr	r3, [r3, #0]
 808062a:	689b      	ldr	r3, [r3, #8]
 808062c:	9301      	str	r3, [sp, #4]
 808062e:	bd08      	pop	{r3, pc}
 8080630:	080401cc 	.word	0x080401cc

08080634 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080634:	b508      	push	{r3, lr}
 8080636:	4b02      	ldr	r3, [pc, #8]	; (8080640 <spark_cloud_flag_connected+0xc>)
 8080638:	681b      	ldr	r3, [r3, #0]
 808063a:	695b      	ldr	r3, [r3, #20]
 808063c:	9301      	str	r3, [sp, #4]
 808063e:	bd08      	pop	{r3, pc}
 8080640:	080401cc 	.word	0x080401cc

08080644 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080644:	b508      	push	{r3, lr}
 8080646:	4b02      	ldr	r3, [pc, #8]	; (8080650 <spark_sync_time_pending+0xc>)
 8080648:	681b      	ldr	r3, [r3, #0]
 808064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808064c:	9301      	str	r3, [sp, #4]
 808064e:	bd08      	pop	{r3, pc}
 8080650:	080401cc 	.word	0x080401cc

08080654 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080654:	b508      	push	{r3, lr}
 8080656:	4b02      	ldr	r3, [pc, #8]	; (8080660 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080658:	681b      	ldr	r3, [r3, #0]
 808065a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808065c:	9301      	str	r3, [sp, #4]
 808065e:	bd08      	pop	{r3, pc}
 8080660:	080401cc 	.word	0x080401cc

08080664 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080664:	b508      	push	{r3, lr}
 8080666:	4b02      	ldr	r3, [pc, #8]	; (8080670 <malloc+0xc>)
 8080668:	681b      	ldr	r3, [r3, #0]
 808066a:	681b      	ldr	r3, [r3, #0]
 808066c:	9301      	str	r3, [sp, #4]
 808066e:	bd08      	pop	{r3, pc}
 8080670:	080401a0 	.word	0x080401a0

08080674 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080674:	b508      	push	{r3, lr}
 8080676:	4b02      	ldr	r3, [pc, #8]	; (8080680 <free+0xc>)
 8080678:	681b      	ldr	r3, [r3, #0]
 808067a:	685b      	ldr	r3, [r3, #4]
 808067c:	9301      	str	r3, [sp, #4]
 808067e:	bd08      	pop	{r3, pc}
 8080680:	080401a0 	.word	0x080401a0

08080684 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080684:	b508      	push	{r3, lr}
 8080686:	4b02      	ldr	r3, [pc, #8]	; (8080690 <realloc+0xc>)
 8080688:	681b      	ldr	r3, [r3, #0]
 808068a:	689b      	ldr	r3, [r3, #8]
 808068c:	9301      	str	r3, [sp, #4]
 808068e:	bd08      	pop	{r3, pc}
 8080690:	080401a0 	.word	0x080401a0

08080694 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8080694:	b508      	push	{r3, lr}
 8080696:	4b02      	ldr	r3, [pc, #8]	; (80806a0 <siprintf+0xc>)
 8080698:	681b      	ldr	r3, [r3, #0]
 808069a:	691b      	ldr	r3, [r3, #16]
 808069c:	9301      	str	r3, [sp, #4]
 808069e:	bd08      	pop	{r3, pc}
 80806a0:	080401a0 	.word	0x080401a0

080806a4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80806a4:	b508      	push	{r3, lr}
 80806a6:	4b02      	ldr	r3, [pc, #8]	; (80806b0 <snprintf+0xc>)
 80806a8:	681b      	ldr	r3, [r3, #0]
 80806aa:	69db      	ldr	r3, [r3, #28]
 80806ac:	9301      	str	r3, [sp, #4]
 80806ae:	bd08      	pop	{r3, pc}
 80806b0:	080401a0 	.word	0x080401a0

080806b4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80806b4:	b508      	push	{r3, lr}
 80806b6:	4b02      	ldr	r3, [pc, #8]	; (80806c0 <newlib_impure_ptr_callback+0xc>)
 80806b8:	681b      	ldr	r3, [r3, #0]
 80806ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80806bc:	9301      	str	r3, [sp, #4]
 80806be:	bd08      	pop	{r3, pc}
 80806c0:	080401a0 	.word	0x080401a0

080806c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80806c4:	b510      	push	{r4, lr}
 80806c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80806c8:	6800      	ldr	r0, [r0, #0]
 80806ca:	b118      	cbz	r0, 80806d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80806cc:	f7ff ffd2 	bl	8080674 <free>
            wakeupSource_ = nullptr;
 80806d0:	2300      	movs	r3, #0
 80806d2:	6023      	str	r3, [r4, #0]
        }
    }
 80806d4:	bd10      	pop	{r4, pc}

080806d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80806d6:	b510      	push	{r4, lr}
 80806d8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80806da:	f7ff fff3 	bl	80806c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80806de:	4620      	mov	r0, r4
 80806e0:	bd10      	pop	{r4, pc}

080806e2 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80806e2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80806e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80806e8:	460d      	mov	r5, r1
        error_ = result.error_;
 80806ea:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80806ec:	460b      	mov	r3, r1
 80806ee:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80806f2:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 80806f4:	f8c0 2006 	str.w	r2, [r0, #6]
 80806f8:	889b      	ldrh	r3, [r3, #4]
 80806fa:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80806fc:	f7ff ffe2 	bl	80806c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8080700:	682b      	ldr	r3, [r5, #0]
 8080702:	b113      	cbz	r3, 808070a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8080704:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8080706:	2300      	movs	r3, #0
 8080708:	602b      	str	r3, [r5, #0]
    }
 808070a:	4620      	mov	r0, r4
 808070c:	bd38      	pop	{r3, r4, r5, pc}
	...

08080710 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 8080710:	b538      	push	{r3, r4, r5, lr}
 8080712:	460c      	mov	r4, r1
 8080714:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 8080716:	f7ff ffd5 	bl	80806c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
 808071a:	b144      	cbz	r4, 808072e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 808071c:	8820      	ldrh	r0, [r4, #0]
 808071e:	f7ff ffa1 	bl	8080664 <malloc>
 8080722:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 8080724:	b128      	cbz	r0, 8080732 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 8080726:	4621      	mov	r1, r4
 8080728:	8822      	ldrh	r2, [r4, #0]
 808072a:	f001 ff0b 	bl	8082544 <memcpy>
        return SYSTEM_ERROR_NONE;
 808072e:	2000      	movs	r0, #0
    }
 8080730:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
 8080732:	4801      	ldr	r0, [pc, #4]	; (8080738 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
 8080734:	e7fc      	b.n	8080730 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
 8080736:	bf00      	nop
 8080738:	fffffefc 	.word	0xfffffefc

0808073c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 808073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808073e:	4d2d      	ldr	r5, [pc, #180]	; (80807f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 8080740:	7d0b      	ldrb	r3, [r1, #20]
 8080742:	4604      	mov	r4, r0
 8080744:	b08b      	sub	sp, #44	; 0x2c
 8080746:	4608      	mov	r0, r1
 8080748:	1daf      	adds	r7, r5, #6
 808074a:	2b00      	cmp	r3, #0
 808074c:	d038      	beq.n	80807c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
 808074e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 8080750:	791b      	ldrb	r3, [r3, #4]
 8080752:	2b00      	cmp	r3, #0
 8080754:	d034      	beq.n	80807c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
 8080756:	2200      	movs	r2, #0
    SleepResult() {}
 8080758:	4b27      	ldr	r3, [pc, #156]	; (80807f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 808075a:	a902      	add	r1, sp, #8
 808075c:	3004      	adds	r0, #4
 808075e:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 8080760:	9202      	str	r2, [sp, #8]
 8080762:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
 8080766:	f88d 200e 	strb.w	r2, [sp, #14]
 808076a:	f7ff ff01 	bl	8080570 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 808076e:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 8080772:	b200      	sxth	r0, r0
 8080774:	f8c5 3006 	str.w	r3, [r5, #6]
 8080778:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 808077c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 8080780:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 8080782:	9902      	ldr	r1, [sp, #8]
 8080784:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 8080786:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 8080788:	f7ff ffc2 	bl	8080710 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
 808078c:	a802      	add	r0, sp, #8
 808078e:	f7ff ff99 	bl	80806c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
 8080792:	2300      	movs	r3, #0
 8080794:	6023      	str	r3, [r4, #0]
 8080796:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 8080798:	71a3      	strb	r3, [r4, #6]
 808079a:	8123      	strh	r3, [r4, #8]
 808079c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80807a0:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 80807a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 80807a6:	4620      	mov	r0, r4
        error_ = result.error_;
 80807a8:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 80807aa:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80807ac:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 80807ae:	f8c4 3006 	str.w	r3, [r4, #6]
 80807b2:	88bb      	ldrh	r3, [r7, #4]
 80807b4:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80807b6:	f7ff ffab 	bl	8080710 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80807ba:	4620      	mov	r0, r4
 80807bc:	b00b      	add	sp, #44	; 0x2c
 80807be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 80807c0:	2600      	movs	r6, #0
 80807c2:	2320      	movs	r3, #32
 80807c4:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80807c8:	4b0c      	ldr	r3, [pc, #48]	; (80807fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
 80807ca:	2032      	movs	r0, #50	; 0x32
 80807cc:	9300      	str	r3, [sp, #0]
 80807ce:	490c      	ldr	r1, [pc, #48]	; (8080800 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
 80807d0:	4633      	mov	r3, r6
 80807d2:	aa02      	add	r2, sp, #8
 80807d4:	f7ff fe8e 	bl	80804f4 <log_message>
    SleepResult() {}
 80807d8:	4b07      	ldr	r3, [pc, #28]	; (80807f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 80807da:	a902      	add	r1, sp, #8
 80807dc:	9304      	str	r3, [sp, #16]
        error_ = error;
 80807de:	f64f 63f2 	movw	r3, #65266	; 0xfef2
 80807e2:	4804      	ldr	r0, [pc, #16]	; (80807f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 80807e4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
 80807e6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
 80807ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80807ee:	f7ff ff78 	bl	80806e2 <_ZN17SystemSleepResultaSEOS_>
 80807f2:	e7cb      	b.n	808078c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
 80807f4:	20000074 	.word	0x20000074
 80807f8:	ffff0000 	.word	0xffff0000
 80807fc:	08082678 	.word	0x08082678
 8080800:	08082671 	.word	0x08082671

08080804 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080804:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8080806:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8080808:	b510      	push	{r4, lr}
 808080a:	4b08      	ldr	r3, [pc, #32]	; (808082c <_GLOBAL__sub_I_System+0x28>)
 808080c:	4c08      	ldr	r4, [pc, #32]	; (8080830 <_GLOBAL__sub_I_System+0x2c>)
 808080e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8080810:	4b08      	ldr	r3, [pc, #32]	; (8080834 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8080812:	6020      	str	r0, [r4, #0]
 8080814:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8080816:	71a0      	strb	r0, [r4, #6]
 8080818:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808081a:	f7ff fe85 	bl	8080528 <set_system_mode>
SystemClass System;
 808081e:	4620      	mov	r0, r4
 8080820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8080824:	4a04      	ldr	r2, [pc, #16]	; (8080838 <_GLOBAL__sub_I_System+0x34>)
 8080826:	4905      	ldr	r1, [pc, #20]	; (808083c <_GLOBAL__sub_I_System+0x38>)
 8080828:	f000 be98 	b.w	808155c <__aeabi_atexit>
 808082c:	20000080 	.word	0x20000080
 8080830:	20000074 	.word	0x20000074
 8080834:	ffff0000 	.word	0xffff0000
 8080838:	20000068 	.word	0x20000068
 808083c:	080806d7 	.word	0x080806d7

08080840 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8080840:	b510      	push	{r4, lr}
 8080842:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8080844:	f001 feca 	bl	80825dc <strlen>
 8080848:	1e43      	subs	r3, r0, #1
 808084a:	4620      	mov	r0, r4
 808084c:	4423      	add	r3, r4
	while(i<j){
 808084e:	4283      	cmp	r3, r0
 8080850:	d906      	bls.n	8080860 <_Z11str_reversePc+0x20>
		c = *i;
 8080852:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8080854:	7819      	ldrb	r1, [r3, #0]
 8080856:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808085a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 808085e:	e7f6      	b.n	808084e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8080860:	bd10      	pop	{r4, pc}

08080862 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8080862:	b570      	push	{r4, r5, r6, lr}
 8080864:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8080866:	1e91      	subs	r1, r2, #2
 8080868:	2922      	cmp	r1, #34	; 0x22
 808086a:	d822      	bhi.n	80808b2 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808086c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808086e:	b168      	cbz	r0, 808088c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8080870:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8080874:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8080878:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808087a:	2809      	cmp	r0, #9
                *ptr += '0';
 808087c:	bf94      	ite	ls
 808087e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8080880:	3157      	addhi	r1, #87	; 0x57
 8080882:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8080884:	4630      	mov	r0, r6
 8080886:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808088a:	e7f0      	b.n	808086e <ultoa+0xc>
 808088c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808088e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8080890:	4423      	add	r3, r4
 8080892:	4293      	cmp	r3, r2
 8080894:	d902      	bls.n	808089c <ultoa+0x3a>
            *ptr++ = '0';
 8080896:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808089a:	e7fa      	b.n	8080892 <ultoa+0x30>
 808089c:	1b5a      	subs	r2, r3, r5
 808089e:	42ab      	cmp	r3, r5
 80808a0:	bf38      	it	cc
 80808a2:	2200      	movcc	r2, #0

	*ptr = '\0';
 80808a4:	2300      	movs	r3, #0
	str_reverse(buffer);
 80808a6:	4620      	mov	r0, r4
	*ptr = '\0';
 80808a8:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80808aa:	f7ff ffc9 	bl	8080840 <_Z11str_reversePc>
	return buffer;
 80808ae:	4620      	mov	r0, r4
}
 80808b0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80808b2:	2000      	movs	r0, #0
 80808b4:	e7fc      	b.n	80808b0 <ultoa+0x4e>

080808b6 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80808b6:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80808b8:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80808ba:	460c      	mov	r4, r1
 80808bc:	4615      	mov	r5, r2
	if(a<0){
 80808be:	da0d      	bge.n	80808dc <itoa+0x26>
		*buffer = '-';
 80808c0:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80808c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80808c6:	bf0c      	ite	eq
 80808c8:	4618      	moveq	r0, r3
 80808ca:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80808cc:	2301      	movs	r3, #1
		*buffer = '-';
 80808ce:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80808d0:	462a      	mov	r2, r5
 80808d2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80808d4:	f7ff ffc5 	bl	8080862 <ultoa>
	}
	return buffer;
}
 80808d8:	4620      	mov	r0, r4
 80808da:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80808dc:	2301      	movs	r3, #1
 80808de:	e7f9      	b.n	80808d4 <itoa+0x1e>

080808e0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80808e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80808e4:	4607      	mov	r7, r0
 80808e6:	460d      	mov	r5, r1
 80808e8:	4616      	mov	r6, r2
 80808ea:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80808ec:	2200      	movs	r2, #0
 80808ee:	2300      	movs	r3, #0
 80808f0:	4638      	mov	r0, r7
 80808f2:	4629      	mov	r1, r5
 80808f4:	f001 fa6a 	bl	8081dcc <__aeabi_dcmplt>
 80808f8:	b120      	cbz	r0, 8080904 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80808fa:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80808fc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8080900:	f804 3b01 	strb.w	r3, [r4], #1
 8080904:	2300      	movs	r3, #0
    }
    long scale = 1;
 8080906:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808090a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 808090c:	b2d9      	uxtb	r1, r3
 808090e:	428e      	cmp	r6, r1
 8080910:	d903      	bls.n	808091a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 8080912:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 8080916:	3301      	adds	r3, #1
 8080918:	e7f8      	b.n	808090c <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 808091a:	4650      	mov	r0, sl
 808091c:	f000 ff7a 	bl	8081814 <__aeabi_i2d>
 8080920:	463a      	mov	r2, r7
 8080922:	462b      	mov	r3, r5
 8080924:	f000 ffe0 	bl	80818e8 <__aeabi_dmul>
 8080928:	4680      	mov	r8, r0
 808092a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 808092c:	f001 fdb6 	bl	808249c <__aeabi_d2ulz>
 8080930:	4605      	mov	r5, r0
 8080932:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 8080934:	f000 ffa2 	bl	808187c <__aeabi_ul2d>
 8080938:	4602      	mov	r2, r0
 808093a:	460b      	mov	r3, r1
 808093c:	4640      	mov	r0, r8
 808093e:	4649      	mov	r1, r9
 8080940:	f000 fe1a 	bl	8081578 <__aeabi_dsub>
 8080944:	2200      	movs	r2, #0
 8080946:	4b12      	ldr	r3, [pc, #72]	; (8080990 <_Z4dtoadhPc+0xb0>)
 8080948:	f001 fa54 	bl	8081df4 <__aeabi_dcmpge>
 808094c:	b110      	cbz	r0, 8080954 <_Z4dtoadhPc+0x74>
        fixed++;
 808094e:	3501      	adds	r5, #1
 8080950:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8080954:	4652      	mov	r2, sl
 8080956:	4628      	mov	r0, r5
 8080958:	4639      	mov	r1, r7
 808095a:	17d3      	asrs	r3, r2, #31
 808095c:	f001 fd52 	bl	8082404 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8080960:	2301      	movs	r3, #1
 8080962:	4615      	mov	r5, r2
 8080964:	4621      	mov	r1, r4
 8080966:	220a      	movs	r2, #10
 8080968:	f7ff ff7b 	bl	8080862 <ultoa>
    if (prec) {
 808096c:	b16e      	cbz	r6, 808098a <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808096e:	4620      	mov	r0, r4
 8080970:	f001 fe34 	bl	80825dc <strlen>
        *sout++ = '.';
 8080974:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 8080976:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8080978:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 808097a:	220a      	movs	r2, #10
 808097c:	4633      	mov	r3, r6
 808097e:	4628      	mov	r0, r5
    }
}
 8080980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 8080984:	3101      	adds	r1, #1
 8080986:	f7ff bf6c 	b.w	8080862 <ultoa>
}
 808098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808098e:	bf00      	nop
 8080990:	3fe00000 	.word	0x3fe00000

08080994 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080994:	b510      	push	{r4, lr}
 8080996:	4604      	mov	r4, r0
{
	free(buffer);
 8080998:	6800      	ldr	r0, [r0, #0]
 808099a:	f7ff fe6b 	bl	8080674 <free>
}
 808099e:	4620      	mov	r0, r4
 80809a0:	bd10      	pop	{r4, pc}

080809a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80809a2:	b510      	push	{r4, lr}
 80809a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80809a6:	6800      	ldr	r0, [r0, #0]
 80809a8:	b108      	cbz	r0, 80809ae <_ZN6String10invalidateEv+0xc>
 80809aa:	f7ff fe63 	bl	8080674 <free>
	buffer = NULL;
 80809ae:	2300      	movs	r3, #0
	capacity = len = 0;
 80809b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80809b4:	6023      	str	r3, [r4, #0]
}
 80809b6:	bd10      	pop	{r4, pc}

080809b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80809b8:	b538      	push	{r3, r4, r5, lr}
 80809ba:	4604      	mov	r4, r0
 80809bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80809be:	6800      	ldr	r0, [r0, #0]
 80809c0:	3101      	adds	r1, #1
 80809c2:	f7ff fe5f 	bl	8080684 <realloc>
	if (newbuffer) {
 80809c6:	b110      	cbz	r0, 80809ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80809c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80809cc:	2001      	movs	r0, #1
	}
	return 0;
}
 80809ce:	bd38      	pop	{r3, r4, r5, pc}

080809d0 <_ZN6String7reserveEj>:
{
 80809d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80809d2:	6803      	ldr	r3, [r0, #0]
{
 80809d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80809d6:	b123      	cbz	r3, 80809e2 <_ZN6String7reserveEj+0x12>
 80809d8:	6843      	ldr	r3, [r0, #4]
 80809da:	428b      	cmp	r3, r1
 80809dc:	d301      	bcc.n	80809e2 <_ZN6String7reserveEj+0x12>
 80809de:	2001      	movs	r0, #1
}
 80809e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80809e2:	4620      	mov	r0, r4
 80809e4:	f7ff ffe8 	bl	80809b8 <_ZN6String12changeBufferEj>
 80809e8:	2800      	cmp	r0, #0
 80809ea:	d0f9      	beq.n	80809e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80809ec:	68a3      	ldr	r3, [r4, #8]
 80809ee:	2b00      	cmp	r3, #0
 80809f0:	d1f5      	bne.n	80809de <_ZN6String7reserveEj+0xe>
 80809f2:	6822      	ldr	r2, [r4, #0]
 80809f4:	7013      	strb	r3, [r2, #0]
 80809f6:	e7f2      	b.n	80809de <_ZN6String7reserveEj+0xe>

080809f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80809f8:	b570      	push	{r4, r5, r6, lr}
 80809fa:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80809fc:	4611      	mov	r1, r2
{
 80809fe:	4604      	mov	r4, r0
 8080a00:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080a02:	f7ff ffe5 	bl	80809d0 <_ZN6String7reserveEj>
 8080a06:	b920      	cbnz	r0, 8080a12 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8080a08:	4620      	mov	r0, r4
 8080a0a:	f7ff ffca 	bl	80809a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8080a0e:	4620      	mov	r0, r4
 8080a10:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8080a12:	462a      	mov	r2, r5
 8080a14:	4631      	mov	r1, r6
 8080a16:	6820      	ldr	r0, [r4, #0]
	len = length;
 8080a18:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080a1a:	f001 fd93 	bl	8082544 <memcpy>
	buffer[len] = 0;
 8080a1e:	2100      	movs	r1, #0
 8080a20:	6822      	ldr	r2, [r4, #0]
 8080a22:	68a3      	ldr	r3, [r4, #8]
 8080a24:	54d1      	strb	r1, [r2, r3]
	return *this;
 8080a26:	e7f2      	b.n	8080a0e <_ZN6String4copyEPKcj+0x16>

08080a28 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8080a28:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8080a2a:	2300      	movs	r3, #0
String::String(const char *cstr)
 8080a2c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080a2e:	460d      	mov	r5, r1
	capacity = 0;
 8080a30:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080a34:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080a36:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8080a38:	b139      	cbz	r1, 8080a4a <_ZN6StringC1EPKc+0x22>
 8080a3a:	4608      	mov	r0, r1
 8080a3c:	f001 fdce 	bl	80825dc <strlen>
 8080a40:	4629      	mov	r1, r5
 8080a42:	4602      	mov	r2, r0
 8080a44:	4620      	mov	r0, r4
 8080a46:	f7ff ffd7 	bl	80809f8 <_ZN6String4copyEPKcj>
}
 8080a4a:	4620      	mov	r0, r4
 8080a4c:	bd38      	pop	{r3, r4, r5, pc}

08080a4e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8080a4e:	4288      	cmp	r0, r1
{
 8080a50:	b510      	push	{r4, lr}
 8080a52:	460b      	mov	r3, r1
 8080a54:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8080a56:	d004      	beq.n	8080a62 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8080a58:	6809      	ldr	r1, [r1, #0]
 8080a5a:	b121      	cbz	r1, 8080a66 <_ZN6StringaSERKS_+0x18>
 8080a5c:	689a      	ldr	r2, [r3, #8]
 8080a5e:	f7ff ffcb 	bl	80809f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080a62:	4620      	mov	r0, r4
 8080a64:	bd10      	pop	{r4, pc}
	else invalidate();
 8080a66:	f7ff ff9c 	bl	80809a2 <_ZN6String10invalidateEv>
 8080a6a:	e7fa      	b.n	8080a62 <_ZN6StringaSERKS_+0x14>

08080a6c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8080a6c:	2300      	movs	r3, #0
String::String(const String &value)
 8080a6e:	b510      	push	{r4, lr}
 8080a70:	4604      	mov	r4, r0
	capacity = 0;
 8080a72:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080a76:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080a78:	7303      	strb	r3, [r0, #12]
	*this = value;
 8080a7a:	f7ff ffe8 	bl	8080a4e <_ZN6StringaSERKS_>
}
 8080a7e:	4620      	mov	r0, r4
 8080a80:	bd10      	pop	{r4, pc}

08080a82 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8080a82:	b538      	push	{r3, r4, r5, lr}
 8080a84:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080a86:	460c      	mov	r4, r1
 8080a88:	b149      	cbz	r1, 8080a9e <_ZN6StringaSEPKc+0x1c>
 8080a8a:	4608      	mov	r0, r1
 8080a8c:	f001 fda6 	bl	80825dc <strlen>
 8080a90:	4621      	mov	r1, r4
 8080a92:	4602      	mov	r2, r0
 8080a94:	4628      	mov	r0, r5
 8080a96:	f7ff ffaf 	bl	80809f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8080a9a:	4628      	mov	r0, r5
 8080a9c:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8080a9e:	f7ff ff80 	bl	80809a2 <_ZN6String10invalidateEv>
 8080aa2:	e7fa      	b.n	8080a9a <_ZN6StringaSEPKc+0x18>

08080aa4 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 8080aa4:	b510      	push	{r4, lr}
	buffer = NULL;
 8080aa6:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 8080aa8:	4604      	mov	r4, r0
 8080aaa:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8080aac:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 8080ab0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080ab2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 8080ab4:	4608      	mov	r0, r1
	itoa(value, buf, base);
 8080ab6:	a901      	add	r1, sp, #4
 8080ab8:	f7ff fefd 	bl	80808b6 <itoa>
	*this = buf;
 8080abc:	4620      	mov	r0, r4
 8080abe:	a901      	add	r1, sp, #4
 8080ac0:	f7ff ffdf 	bl	8080a82 <_ZN6StringaSEPKc>
}
 8080ac4:	4620      	mov	r0, r4
 8080ac6:	b00a      	add	sp, #40	; 0x28
 8080ac8:	bd10      	pop	{r4, pc}

08080aca <_ZN6StringC1Efi>:
	buffer = NULL;
 8080aca:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 8080acc:	b530      	push	{r4, r5, lr}
 8080ace:	4604      	mov	r4, r0
 8080ad0:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 8080ad2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8080ad6:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080ad8:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8080ada:	b2d5      	uxtb	r5, r2
 8080adc:	4608      	mov	r0, r1
 8080ade:	f000 feab 	bl	8081838 <__aeabi_f2d>
 8080ae2:	462a      	mov	r2, r5
 8080ae4:	ab01      	add	r3, sp, #4
 8080ae6:	f7ff fefb 	bl	80808e0 <_Z4dtoadhPc>
        *this = buf;
 8080aea:	4620      	mov	r0, r4
 8080aec:	a901      	add	r1, sp, #4
 8080aee:	f7ff ffc8 	bl	8080a82 <_ZN6StringaSEPKc>
}
 8080af2:	4620      	mov	r0, r4
 8080af4:	b00b      	add	sp, #44	; 0x2c
 8080af6:	bd30      	pop	{r4, r5, pc}

08080af8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8080af8:	b570      	push	{r4, r5, r6, lr}
 8080afa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8080afc:	460e      	mov	r6, r1
 8080afe:	b909      	cbnz	r1, 8080b04 <_ZN6String6concatEPKcj+0xc>
 8080b00:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8080b02:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8080b04:	b16a      	cbz	r2, 8080b22 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8080b06:	6884      	ldr	r4, [r0, #8]
 8080b08:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8080b0a:	4621      	mov	r1, r4
 8080b0c:	f7ff ff60 	bl	80809d0 <_ZN6String7reserveEj>
 8080b10:	2800      	cmp	r0, #0
 8080b12:	d0f5      	beq.n	8080b00 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8080b14:	6828      	ldr	r0, [r5, #0]
 8080b16:	68ab      	ldr	r3, [r5, #8]
 8080b18:	4631      	mov	r1, r6
 8080b1a:	4418      	add	r0, r3
 8080b1c:	f001 fd56 	bl	80825cc <strcpy>
	len = newlen;
 8080b20:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8080b22:	2001      	movs	r0, #1
 8080b24:	e7ed      	b.n	8080b02 <_ZN6String6concatEPKcj+0xa>

08080b26 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080b26:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080b28:	688a      	ldr	r2, [r1, #8]
 8080b2a:	6809      	ldr	r1, [r1, #0]
{
 8080b2c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080b2e:	f7ff ffe3 	bl	8080af8 <_ZN6String6concatEPKcj>
 8080b32:	b910      	cbnz	r0, 8080b3a <_ZplRK15StringSumHelperRK6String+0x14>
 8080b34:	4620      	mov	r0, r4
 8080b36:	f7ff ff34 	bl	80809a2 <_ZN6String10invalidateEv>
	return a;
}
 8080b3a:	4620      	mov	r0, r4
 8080b3c:	bd10      	pop	{r4, pc}

08080b3e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8080b3e:	b538      	push	{r3, r4, r5, lr}
 8080b40:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8080b42:	460d      	mov	r5, r1
 8080b44:	b921      	cbnz	r1, 8080b50 <_ZplRK15StringSumHelperPKc+0x12>
 8080b46:	4620      	mov	r0, r4
 8080b48:	f7ff ff2b 	bl	80809a2 <_ZN6String10invalidateEv>
	return a;
}
 8080b4c:	4620      	mov	r0, r4
 8080b4e:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8080b50:	4608      	mov	r0, r1
 8080b52:	f001 fd43 	bl	80825dc <strlen>
 8080b56:	4629      	mov	r1, r5
 8080b58:	4602      	mov	r2, r0
 8080b5a:	4620      	mov	r0, r4
 8080b5c:	f7ff ffcc 	bl	8080af8 <_ZN6String6concatEPKcj>
 8080b60:	2800      	cmp	r0, #0
 8080b62:	d0f0      	beq.n	8080b46 <_ZplRK15StringSumHelperPKc+0x8>
 8080b64:	e7f2      	b.n	8080b4c <_ZplRK15StringSumHelperPKc+0xe>

08080b66 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080b68:	4606      	mov	r6, r0
 8080b6a:	460d      	mov	r5, r1
  size_t n = 0;
 8080b6c:	2400      	movs	r4, #0
 8080b6e:	188f      	adds	r7, r1, r2
  while (size--) {
 8080b70:	42bd      	cmp	r5, r7
 8080b72:	d00c      	beq.n	8080b8e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080b74:	6833      	ldr	r3, [r6, #0]
 8080b76:	4630      	mov	r0, r6
 8080b78:	689b      	ldr	r3, [r3, #8]
 8080b7a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080b7e:	4798      	blx	r3
     if (chunk>=0)
 8080b80:	1e03      	subs	r3, r0, #0
 8080b82:	db01      	blt.n	8080b88 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080b84:	441c      	add	r4, r3
  while (size--) {
 8080b86:	e7f3      	b.n	8080b70 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080b88:	2c00      	cmp	r4, #0
 8080b8a:	bf08      	it	eq
 8080b8c:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8080b8e:	4620      	mov	r0, r4
 8080b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080b92 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080b92:	b570      	push	{r4, r5, r6, lr}
 8080b94:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080b96:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080b98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8080b9a:	b149      	cbz	r1, 8080bb0 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080b9c:	f001 fd1e 	bl	80825dc <strlen>
 8080ba0:	682b      	ldr	r3, [r5, #0]
 8080ba2:	4602      	mov	r2, r0
 8080ba4:	4621      	mov	r1, r4
 8080ba6:	4628      	mov	r0, r5
    }
 8080ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8080bac:	68db      	ldr	r3, [r3, #12]
 8080bae:	4718      	bx	r3
    }
 8080bb0:	bd70      	pop	{r4, r5, r6, pc}

08080bb2 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080bb2:	6803      	ldr	r3, [r0, #0]
 8080bb4:	689b      	ldr	r3, [r3, #8]
 8080bb6:	4718      	bx	r3

08080bb8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080bb8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080bba:	210d      	movs	r1, #13
{
 8080bbc:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080bbe:	f7ff fff8 	bl	8080bb2 <_ZN5Print5printEc>
  n += print('\n');
 8080bc2:	210a      	movs	r1, #10
  size_t n = print('\r');
 8080bc4:	4604      	mov	r4, r0
  n += print('\n');
 8080bc6:	4628      	mov	r0, r5
 8080bc8:	f7ff fff3 	bl	8080bb2 <_ZN5Print5printEc>
  return n;
}
 8080bcc:	4420      	add	r0, r4
 8080bce:	bd38      	pop	{r3, r4, r5, pc}

08080bd0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080bd0:	b538      	push	{r3, r4, r5, lr}
 8080bd2:	4605      	mov	r5, r0
  return write(str);
 8080bd4:	f7ff ffdd 	bl	8080b92 <_ZN5Print5writeEPKc>
 8080bd8:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8080bda:	4628      	mov	r0, r5
 8080bdc:	f7ff ffec 	bl	8080bb8 <_ZN5Print7printlnEv>
  return n;
}
 8080be0:	4420      	add	r0, r4
 8080be2:	bd38      	pop	{r3, r4, r5, pc}

08080be4 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080be4:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080be6:	2a01      	cmp	r2, #1
 8080be8:	bf98      	it	ls
 8080bea:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080bec:	b530      	push	{r4, r5, lr}
 8080bee:	b08b      	sub	sp, #44	; 0x2c
 8080bf0:	460c      	mov	r4, r1
  *str = '\0';
 8080bf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8080bf6:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8080bf8:	4625      	mov	r5, r4
 8080bfa:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8080bfe:	fb04 5312 	mls	r3, r4, r2, r5
 8080c02:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080c04:	2b09      	cmp	r3, #9
 8080c06:	bf94      	ite	ls
 8080c08:	3330      	addls	r3, #48	; 0x30
 8080c0a:	3337      	addhi	r3, #55	; 0x37
 8080c0c:	b2db      	uxtb	r3, r3
  } while(n);
 8080c0e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080c10:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8080c14:	d9f0      	bls.n	8080bf8 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8080c16:	f7ff ffbc 	bl	8080b92 <_ZN5Print5writeEPKc>
}
 8080c1a:	b00b      	add	sp, #44	; 0x2c
 8080c1c:	bd30      	pop	{r4, r5, pc}
	...

08080c20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080c20:	4b01      	ldr	r3, [pc, #4]	; (8080c28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080c22:	4a02      	ldr	r2, [pc, #8]	; (8080c2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080c24:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8080c26:	4770      	bx	lr
 8080c28:	20000084 	.word	0x20000084
 8080c2c:	0808269f 	.word	0x0808269f

08080c30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8080c30:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8080c32:	2000      	movs	r0, #0
 8080c34:	f7ff fd06 	bl	8080644 <spark_sync_time_pending>
 8080c38:	b128      	cbz	r0, 8080c46 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c3a:	f7ff fcfb 	bl	8080634 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8080c3e:	f080 0001 	eor.w	r0, r0, #1
 8080c42:	b2c0      	uxtb	r0, r0
    }
 8080c44:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8080c46:	2001      	movs	r0, #1
 8080c48:	e7fc      	b.n	8080c44 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08080c4c <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8080c4c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8080c4e:	490a      	ldr	r1, [pc, #40]	; (8080c78 <_ZN9TimeClass4zoneEf+0x2c>)
{
 8080c50:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8080c52:	f001 fbaf 	bl	80823b4 <__aeabi_fcmplt>
 8080c56:	b968      	cbnz	r0, 8080c74 <_ZN9TimeClass4zoneEf+0x28>
 8080c58:	4620      	mov	r0, r4
 8080c5a:	4908      	ldr	r1, [pc, #32]	; (8080c7c <_ZN9TimeClass4zoneEf+0x30>)
 8080c5c:	f001 fbc8 	bl	80823f0 <__aeabi_fcmpgt>
 8080c60:	b940      	cbnz	r0, 8080c74 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8080c62:	4907      	ldr	r1, [pc, #28]	; (8080c80 <_ZN9TimeClass4zoneEf+0x34>)
 8080c64:	4620      	mov	r0, r4
 8080c66:	f001 fa07 	bl	8082078 <__aeabi_fmul>
 8080c6a:	f001 fbe3 	bl	8082434 <__aeabi_f2lz>
 8080c6e:	4b05      	ldr	r3, [pc, #20]	; (8080c84 <_ZN9TimeClass4zoneEf+0x38>)
 8080c70:	e9c3 0100 	strd	r0, r1, [r3]
}
 8080c74:	bd10      	pop	{r4, pc}
 8080c76:	bf00      	nop
 8080c78:	c1400000 	.word	0xc1400000
 8080c7c:	41600000 	.word	0x41600000
 8080c80:	45610000 	.word	0x45610000
 8080c84:	20000098 	.word	0x20000098

08080c88 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8080c88:	b530      	push	{r4, r5, lr}
 8080c8a:	4604      	mov	r4, r0
    t += time_zone_cache;
 8080c8c:	4818      	ldr	r0, [pc, #96]	; (8080cf0 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8080c8e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8080c90:	e9d0 1000 	ldrd	r1, r0, [r0]
 8080c94:	1852      	adds	r2, r2, r1
 8080c96:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8080c9a:	4816      	ldr	r0, [pc, #88]	; (8080cf4 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8080c9c:	2500      	movs	r5, #0
    t += dst_current_cache;
 8080c9e:	e9d0 1000 	ldrd	r1, r0, [r0]
 8080ca2:	1852      	adds	r2, r2, r1
 8080ca4:	eb40 0303 	adc.w	r3, r0, r3
 8080ca8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8080cac:	2224      	movs	r2, #36	; 0x24
 8080cae:	2100      	movs	r1, #0
 8080cb0:	eb0d 0002 	add.w	r0, sp, r2
 8080cb4:	f001 fc54 	bl	8082560 <memset>
    localtime_r(&t, &calendar_time);
 8080cb8:	a909      	add	r1, sp, #36	; 0x24
 8080cba:	4668      	mov	r0, sp
 8080cbc:	f7ff f9b6 	bl	808002c <localtime_r>
    char ascstr[26] = {};
 8080cc0:	2216      	movs	r2, #22
 8080cc2:	4629      	mov	r1, r5
 8080cc4:	a803      	add	r0, sp, #12
 8080cc6:	9502      	str	r5, [sp, #8]
 8080cc8:	f001 fc4a 	bl	8082560 <memset>
    asctime_r(&calendar_time, ascstr);
 8080ccc:	a902      	add	r1, sp, #8
 8080cce:	a809      	add	r0, sp, #36	; 0x24
 8080cd0:	f001 fc04 	bl	80824dc <asctime_r>
    int len = strlen(ascstr);
 8080cd4:	a802      	add	r0, sp, #8
 8080cd6:	f001 fc81 	bl	80825dc <strlen>
    ascstr[len-1] = 0; // remove final newline
 8080cda:	ab12      	add	r3, sp, #72	; 0x48
 8080cdc:	4418      	add	r0, r3
 8080cde:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8080ce2:	a902      	add	r1, sp, #8
 8080ce4:	4620      	mov	r0, r4
 8080ce6:	f7ff fe9f 	bl	8080a28 <_ZN6StringC1EPKc>
}
 8080cea:	4620      	mov	r0, r4
 8080cec:	b013      	add	sp, #76	; 0x4c
 8080cee:	bd30      	pop	{r4, r5, pc}
 8080cf0:	20000098 	.word	0x20000098
 8080cf4:	20000090 	.word	0x20000090

08080cf8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8080cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cfc:	b0a5      	sub	sp, #148	; 0x94
 8080cfe:	4607      	mov	r7, r0
 8080d00:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8080d02:	a814      	add	r0, sp, #80	; 0x50
{
 8080d04:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8080d06:	223f      	movs	r2, #63	; 0x3f
{
 8080d08:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8080d0a:	f001 fc6f 	bl	80825ec <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8080d0e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8080d10:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8080d12:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8080d16:	f001 fc61 	bl	80825dc <strlen>
 8080d1a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8080d1c:	bb5d      	cbnz	r5, 8080d76 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 8080d1e:	492a      	ldr	r1, [pc, #168]	; (8080dc8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8080d20:	a803      	add	r0, sp, #12
 8080d22:	f001 fc53 	bl	80825cc <strcpy>
{
 8080d26:	2500      	movs	r5, #0
 8080d28:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8080d2a:	f104 3bff 	add.w	fp, r4, #4294967295
 8080d2e:	45ab      	cmp	fp, r5
 8080d30:	d936      	bls.n	8080da0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8080d32:	46b1      	mov	r9, r6
 8080d34:	f819 3b01 	ldrb.w	r3, [r9], #1
 8080d38:	f105 0a01 	add.w	sl, r5, #1
 8080d3c:	2b25      	cmp	r3, #37	; 0x25
 8080d3e:	d117      	bne.n	8080d70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 8080d40:	7873      	ldrb	r3, [r6, #1]
 8080d42:	2b7a      	cmp	r3, #122	; 0x7a
 8080d44:	d114      	bne.n	8080d70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 8080d46:	a803      	add	r0, sp, #12
 8080d48:	f001 fc48 	bl	80825dc <strlen>
 8080d4c:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8080d4e:	ab14      	add	r3, sp, #80	; 0x50
 8080d50:	1828      	adds	r0, r5, r0
 8080d52:	4418      	add	r0, r3
 8080d54:	ebab 0205 	sub.w	r2, fp, r5
 8080d58:	1cb1      	adds	r1, r6, #2
 8080d5a:	f001 fbf3 	bl	8082544 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8080d5e:	4622      	mov	r2, r4
 8080d60:	a903      	add	r1, sp, #12
 8080d62:	4630      	mov	r0, r6
 8080d64:	f001 fbee 	bl	8082544 <memcpy>
            len = strlen(format_str);
 8080d68:	a814      	add	r0, sp, #80	; 0x50
 8080d6a:	f001 fc37 	bl	80825dc <strlen>
 8080d6e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 8080d70:	464e      	mov	r6, r9
 8080d72:	4655      	mov	r5, sl
 8080d74:	e7d9      	b.n	8080d2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8080d76:	213c      	movs	r1, #60	; 0x3c
 8080d78:	fb95 f3f1 	sdiv	r3, r5, r1
 8080d7c:	2b00      	cmp	r3, #0
 8080d7e:	bfb8      	it	lt
 8080d80:	425b      	neglt	r3, r3
 8080d82:	fbb3 f2f1 	udiv	r2, r3, r1
 8080d86:	fb01 3312 	mls	r3, r1, r2, r3
 8080d8a:	9300      	str	r3, [sp, #0]
 8080d8c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8080d90:	2110      	movs	r1, #16
 8080d92:	fb95 f3f3 	sdiv	r3, r5, r3
 8080d96:	4a0d      	ldr	r2, [pc, #52]	; (8080dcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 8080d98:	a803      	add	r0, sp, #12
 8080d9a:	f7ff fc83 	bl	80806a4 <snprintf>
 8080d9e:	e7c2      	b.n	8080d26 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8080da0:	2100      	movs	r1, #0
 8080da2:	222e      	movs	r2, #46	; 0x2e
 8080da4:	a808      	add	r0, sp, #32
 8080da6:	9107      	str	r1, [sp, #28]
 8080da8:	f001 fbda 	bl	8082560 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8080dac:	4643      	mov	r3, r8
 8080dae:	aa14      	add	r2, sp, #80	; 0x50
 8080db0:	2132      	movs	r1, #50	; 0x32
 8080db2:	a807      	add	r0, sp, #28
 8080db4:	f7ff f942 	bl	808003c <strftime>
    return String(buf);
 8080db8:	4638      	mov	r0, r7
 8080dba:	a907      	add	r1, sp, #28
 8080dbc:	f7ff fe34 	bl	8080a28 <_ZN6StringC1EPKc>
}
 8080dc0:	4638      	mov	r0, r7
 8080dc2:	b025      	add	sp, #148	; 0x94
 8080dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080dc8:	080826a3 	.word	0x080826a3
 8080dcc:	080826a5 	.word	0x080826a5

08080dd0 <_ZN9TimeClass6formatExPKc>:
{
 8080dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080dd2:	b08d      	sub	sp, #52	; 0x34
 8080dd4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8080dd6:	4604      	mov	r4, r0
 8080dd8:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8080ddc:	b915      	cbnz	r5, 8080de4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8080dde:	4b19      	ldr	r3, [pc, #100]	; (8080e44 <_ZN9TimeClass6formatExPKc+0x74>)
 8080de0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8080de2:	b12d      	cbz	r5, 8080df0 <_ZN9TimeClass6formatExPKc+0x20>
 8080de4:	4b18      	ldr	r3, [pc, #96]	; (8080e48 <_ZN9TimeClass6formatExPKc+0x78>)
 8080de6:	4628      	mov	r0, r5
 8080de8:	6819      	ldr	r1, [r3, #0]
 8080dea:	f001 fbe5 	bl	80825b8 <strcmp>
 8080dee:	b938      	cbnz	r0, 8080e00 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8080df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8080df4:	4620      	mov	r0, r4
 8080df6:	f7ff ff47 	bl	8080c88 <_ZN9TimeClass7timeStrEx>
}
 8080dfa:	4620      	mov	r0, r4
 8080dfc:	b00d      	add	sp, #52	; 0x34
 8080dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8080e00:	9900      	ldr	r1, [sp, #0]
 8080e02:	4e12      	ldr	r6, [pc, #72]	; (8080e4c <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8080e04:	4f12      	ldr	r7, [pc, #72]	; (8080e50 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8080e06:	e9d6 3200 	ldrd	r3, r2, [r6]
 8080e0a:	185b      	adds	r3, r3, r1
 8080e0c:	9901      	ldr	r1, [sp, #4]
 8080e0e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8080e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8080e16:	181b      	adds	r3, r3, r0
 8080e18:	eb41 0202 	adc.w	r2, r1, r2
 8080e1c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8080e20:	2100      	movs	r1, #0
 8080e22:	2224      	movs	r2, #36	; 0x24
 8080e24:	a803      	add	r0, sp, #12
 8080e26:	f001 fb9b 	bl	8082560 <memset>
    localtime_r(&t, &calendar_time);
 8080e2a:	a903      	add	r1, sp, #12
 8080e2c:	4668      	mov	r0, sp
 8080e2e:	f7ff f8fd 	bl	808002c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8080e32:	6832      	ldr	r2, [r6, #0]
 8080e34:	683b      	ldr	r3, [r7, #0]
 8080e36:	4620      	mov	r0, r4
 8080e38:	4413      	add	r3, r2
 8080e3a:	a903      	add	r1, sp, #12
 8080e3c:	462a      	mov	r2, r5
 8080e3e:	f7ff ff5b 	bl	8080cf8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8080e42:	e7da      	b.n	8080dfa <_ZN9TimeClass6formatExPKc+0x2a>
 8080e44:	2000008c 	.word	0x2000008c
 8080e48:	20000000 	.word	0x20000000
 8080e4c:	20000098 	.word	0x20000098
 8080e50:	20000090 	.word	0x20000090

08080e54 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8080e54:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8080e56:	2000      	movs	r0, #0
 8080e58:	f7ff fabc 	bl	80803d4 <hal_rtc_time_is_valid>
    if (rtcstate)
 8080e5c:	4604      	mov	r4, r0
 8080e5e:	b9a0      	cbnz	r0, 8080e8a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8080e60:	f7ff fb5a 	bl	8080518 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8080e64:	2801      	cmp	r0, #1
 8080e66:	d110      	bne.n	8080e8a <_ZN9TimeClass7isValidEv+0x36>
 8080e68:	4620      	mov	r0, r4
 8080e6a:	f7ff fb65 	bl	8080538 <system_thread_get_state>
 8080e6e:	b960      	cbnz	r0, 8080e8a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8080e70:	f7ff fede 	bl	8080c30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080e74:	b910      	cbnz	r0, 8080e7c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8080e76:	f7ff fbd5 	bl	8080624 <spark_process>
        while (_while() && !_condition()) {
 8080e7a:	e7f9      	b.n	8080e70 <_ZN9TimeClass7isValidEv+0x1c>
 8080e7c:	f7ff fed8 	bl	8080c30 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8080e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8080e84:	2000      	movs	r0, #0
 8080e86:	f7ff baa5 	b.w	80803d4 <hal_rtc_time_is_valid>
}
 8080e8a:	4620      	mov	r0, r4
 8080e8c:	bd10      	pop	{r4, pc}

08080e8e <_ZN9TimeClass3nowEv>:
{
 8080e8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8080e90:	f7ff ffe0 	bl	8080e54 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8080e94:	2210      	movs	r2, #16
 8080e96:	2100      	movs	r1, #0
 8080e98:	4668      	mov	r0, sp
 8080e9a:	f001 fb61 	bl	8082560 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8080e9e:	2100      	movs	r1, #0
 8080ea0:	4668      	mov	r0, sp
 8080ea2:	f7ff fa9f 	bl	80803e4 <hal_rtc_get_time>
}
 8080ea6:	9800      	ldr	r0, [sp, #0]
 8080ea8:	b005      	add	sp, #20
 8080eaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080eb0:	4b02      	ldr	r3, [pc, #8]	; (8080ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080eb2:	681a      	ldr	r2, [r3, #0]
 8080eb4:	4b02      	ldr	r3, [pc, #8]	; (8080ec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080eb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8080eb8:	4770      	bx	lr
 8080eba:	bf00      	nop
 8080ebc:	20000000 	.word	0x20000000
 8080ec0:	2000008c 	.word	0x2000008c

08080ec4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080ec4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080ec6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8080ec8:	4604      	mov	r4, r0
      if (_M_manager)
 8080eca:	b113      	cbz	r3, 8080ed2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080ecc:	2203      	movs	r2, #3
 8080ece:	4601      	mov	r1, r0
 8080ed0:	4798      	blx	r3
    }
 8080ed2:	4620      	mov	r0, r4
 8080ed4:	bd10      	pop	{r4, pc}

08080ed6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080ed6:	b510      	push	{r4, lr}
 8080ed8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080eda:	f7ff fff3 	bl	8080ec4 <_ZNSt14_Function_baseD1Ev>
 8080ede:	4620      	mov	r0, r4
 8080ee0:	bd10      	pop	{r4, pc}
	...

08080ee4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8080ee4:	2300      	movs	r3, #0
 8080ee6:	4803      	ldr	r0, [pc, #12]	; (8080ef4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080ee8:	4a03      	ldr	r2, [pc, #12]	; (8080ef8 <_GLOBAL__sub_I_RGB+0x14>)
 8080eea:	4904      	ldr	r1, [pc, #16]	; (8080efc <_GLOBAL__sub_I_RGB+0x18>)
 8080eec:	6083      	str	r3, [r0, #8]
 8080eee:	f000 bb35 	b.w	808155c <__aeabi_atexit>
 8080ef2:	bf00      	nop
 8080ef4:	200000a0 	.word	0x200000a0
 8080ef8:	20000068 	.word	0x20000068
 8080efc:	08080ed7 	.word	0x08080ed7

08080f00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8080f00:	4b01      	ldr	r3, [pc, #4]	; (8080f08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8080f02:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8080f04:	4770      	bx	lr
 8080f06:	bf00      	nop
 8080f08:	20000004 	.word	0x20000004

08080f0c <serialEventRun>:
{
 8080f0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080f0e:	4b17      	ldr	r3, [pc, #92]	; (8080f6c <serialEventRun+0x60>)
 8080f10:	b143      	cbz	r3, 8080f24 <serialEventRun+0x18>
 8080f12:	f000 f953 	bl	80811bc <_Z16_fetch_usbserialv>
 8080f16:	6803      	ldr	r3, [r0, #0]
 8080f18:	691b      	ldr	r3, [r3, #16]
 8080f1a:	4798      	blx	r3
 8080f1c:	2800      	cmp	r0, #0
 8080f1e:	dd01      	ble.n	8080f24 <serialEventRun+0x18>
        serialEvent();
 8080f20:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8080f24:	4b12      	ldr	r3, [pc, #72]	; (8080f70 <serialEventRun+0x64>)
 8080f26:	b143      	cbz	r3, 8080f3a <serialEventRun+0x2e>
 8080f28:	f000 fa5c 	bl	80813e4 <_Z22__fetch_global_Serial1v>
 8080f2c:	6803      	ldr	r3, [r0, #0]
 8080f2e:	691b      	ldr	r3, [r3, #16]
 8080f30:	4798      	blx	r3
 8080f32:	2800      	cmp	r0, #0
 8080f34:	dd01      	ble.n	8080f3a <serialEventRun+0x2e>
        serialEvent1();
 8080f36:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8080f3a:	4b0e      	ldr	r3, [pc, #56]	; (8080f74 <serialEventRun+0x68>)
 8080f3c:	b10b      	cbz	r3, 8080f42 <serialEventRun+0x36>
 8080f3e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8080f42:	4b0d      	ldr	r3, [pc, #52]	; (8080f78 <serialEventRun+0x6c>)
 8080f44:	b10b      	cbz	r3, 8080f4a <serialEventRun+0x3e>
 8080f46:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8080f4a:	4b0c      	ldr	r3, [pc, #48]	; (8080f7c <serialEventRun+0x70>)
 8080f4c:	b10b      	cbz	r3, 8080f52 <serialEventRun+0x46>
 8080f4e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080f52:	4b0b      	ldr	r3, [pc, #44]	; (8080f80 <serialEventRun+0x74>)
 8080f54:	b143      	cbz	r3, 8080f68 <serialEventRun+0x5c>
 8080f56:	f000 f961 	bl	808121c <_Z17_fetch_usbserial1v>
 8080f5a:	6803      	ldr	r3, [r0, #0]
 8080f5c:	691b      	ldr	r3, [r3, #16]
 8080f5e:	4798      	blx	r3
 8080f60:	2800      	cmp	r0, #0
 8080f62:	dd01      	ble.n	8080f68 <serialEventRun+0x5c>
        usbSerialEvent1();
 8080f64:	f3af 8000 	nop.w
}
 8080f68:	bd08      	pop	{r3, pc}
 8080f6a:	bf00      	nop
	...

08080f84 <_post_loop>:
{
 8080f84:	b508      	push	{r3, lr}
	serialEventRun();
 8080f86:	f7ff ffc1 	bl	8080f0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080f8a:	f7ff fa1b 	bl	80803c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080f8e:	4b01      	ldr	r3, [pc, #4]	; (8080f94 <_post_loop+0x10>)
 8080f90:	6018      	str	r0, [r3, #0]
}
 8080f92:	bd08      	pop	{r3, pc}
 8080f94:	20000140 	.word	0x20000140

08080f98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080f98:	4802      	ldr	r0, [pc, #8]	; (8080fa4 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080f9a:	4a03      	ldr	r2, [pc, #12]	; (8080fa8 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080f9c:	4903      	ldr	r1, [pc, #12]	; (8080fac <_Z33system_initialize_user_backup_ramv+0x14>)
 8080f9e:	1a12      	subs	r2, r2, r0
 8080fa0:	f001 bad0 	b.w	8082544 <memcpy>
 8080fa4:	40024000 	.word	0x40024000
 8080fa8:	40024004 	.word	0x40024004
 8080fac:	08082820 	.word	0x08082820

08080fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080fb0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080fb2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080fb4:	461a      	mov	r2, r3
 8080fb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080fba:	9300      	str	r3, [sp, #0]
 8080fbc:	f7ff face 	bl	808055c <system_ctrl_set_result>
}
 8080fc0:	b003      	add	sp, #12
 8080fc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080fc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8080fc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080fca:	8843      	ldrh	r3, [r0, #2]
 8080fcc:	2b0a      	cmp	r3, #10
 8080fce:	d008      	beq.n	8080fe2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080fd0:	2b50      	cmp	r3, #80	; 0x50
 8080fd2:	d10b      	bne.n	8080fec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8080fd4:	4b09      	ldr	r3, [pc, #36]	; (8080ffc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080fd6:	681b      	ldr	r3, [r3, #0]
 8080fd8:	b14b      	cbz	r3, 8080fee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8080fda:	b003      	add	sp, #12
 8080fdc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8080fe0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8080fe2:	f7ff ffe5 	bl	8080fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8080fe6:	b003      	add	sp, #12
 8080fe8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080fec:	2300      	movs	r3, #0
 8080fee:	461a      	mov	r2, r3
 8080ff0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080ff4:	9300      	str	r3, [sp, #0]
 8080ff6:	f7ff fab1 	bl	808055c <system_ctrl_set_result>
}
 8080ffa:	e7f4      	b.n	8080fe6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8080ffc:	200000b4 	.word	0x200000b4

08081000 <module_user_init_hook>:
{
 8081000:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081002:	4c12      	ldr	r4, [pc, #72]	; (808104c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8081004:	2100      	movs	r1, #0
 8081006:	4812      	ldr	r0, [pc, #72]	; (8081050 <module_user_init_hook+0x50>)
 8081008:	f7ff fb54 	bl	80806b4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808100c:	4d11      	ldr	r5, [pc, #68]	; (8081054 <module_user_init_hook+0x54>)
 808100e:	6823      	ldr	r3, [r4, #0]
 8081010:	42ab      	cmp	r3, r5
 8081012:	bf0c      	ite	eq
 8081014:	2201      	moveq	r2, #1
 8081016:	2200      	movne	r2, #0
 8081018:	4b0f      	ldr	r3, [pc, #60]	; (8081058 <module_user_init_hook+0x58>)
 808101a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808101c:	d002      	beq.n	8081024 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808101e:	f7ff ffbb 	bl	8080f98 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081022:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081024:	f7ff f9be 	bl	80803a4 <HAL_RNG_GetRandomNumber>
 8081028:	4604      	mov	r4, r0
    srand(seed);
 808102a:	f001 faa1 	bl	8082570 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808102e:	4b0b      	ldr	r3, [pc, #44]	; (808105c <module_user_init_hook+0x5c>)
 8081030:	b113      	cbz	r3, 8081038 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8081032:	4620      	mov	r0, r4
 8081034:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081038:	2100      	movs	r1, #0
 808103a:	4808      	ldr	r0, [pc, #32]	; (808105c <module_user_init_hook+0x5c>)
 808103c:	f7ff fb0a 	bl	8080654 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081044:	2100      	movs	r1, #0
 8081046:	4806      	ldr	r0, [pc, #24]	; (8081060 <module_user_init_hook+0x60>)
 8081048:	f7ff ba7e 	b.w	8080548 <system_ctrl_set_app_request_handler>
 808104c:	40024000 	.word	0x40024000
 8081050:	08080f01 	.word	0x08080f01
 8081054:	9a271c1e 	.word	0x9a271c1e
 8081058:	200000b0 	.word	0x200000b0
 808105c:	00000000 	.word	0x00000000
 8081060:	08080fc9 	.word	0x08080fc9

08081064 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081064:	4770      	bx	lr

08081066 <_ZN9IPAddressD0Ev>:
 8081066:	b510      	push	{r4, lr}
 8081068:	4604      	mov	r4, r0
 808106a:	2108      	movs	r1, #8
 808106c:	f000 fa7b 	bl	8081566 <_ZdlPvj>
 8081070:	4620      	mov	r0, r4
 8081072:	bd10      	pop	{r4, pc}

08081074 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081076:	460e      	mov	r6, r1
 8081078:	2400      	movs	r4, #0
 808107a:	f100 0708 	add.w	r7, r0, #8
 808107e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081080:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8081084:	220a      	movs	r2, #10
 8081086:	4630      	mov	r0, r6
 8081088:	f7ff fdac 	bl	8080be4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808108c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808108e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8081090:	d101      	bne.n	8081096 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8081092:	4620      	mov	r0, r4
 8081094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8081096:	2c00      	cmp	r4, #0
 8081098:	d0f2      	beq.n	8081080 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808109a:	212e      	movs	r1, #46	; 0x2e
 808109c:	4630      	mov	r0, r6
 808109e:	f7ff fd88 	bl	8080bb2 <_ZN5Print5printEc>
 80810a2:	4404      	add	r4, r0
 80810a4:	e7ec      	b.n	8081080 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080810a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80810a8:	4a02      	ldr	r2, [pc, #8]	; (80810b4 <_ZN9IPAddressC1Ev+0xc>)
 80810aa:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80810ac:	2200      	movs	r2, #0
 80810ae:	6042      	str	r2, [r0, #4]
}
 80810b0:	4770      	bx	lr
 80810b2:	bf00      	nop
 80810b4:	080826d4 	.word	0x080826d4

080810b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80810b8:	4a02      	ldr	r2, [pc, #8]	; (80810c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80810ba:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80810bc:	680a      	ldr	r2, [r1, #0]
 80810be:	6042      	str	r2, [r0, #4]
}
 80810c0:	4770      	bx	lr
 80810c2:	bf00      	nop
 80810c4:	080826d4 	.word	0x080826d4

080810c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80810c8:	4a01      	ldr	r2, [pc, #4]	; (80810d0 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80810ca:	e9c0 2100 	strd	r2, r1, [r0]
}
 80810ce:	4770      	bx	lr
 80810d0:	080826d4 	.word	0x080826d4

080810d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80810d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80810d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80810da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80810de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80810e2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80810e6:	6044      	str	r4, [r0, #4]
}
 80810e8:	bd10      	pop	{r4, pc}
	...

080810ec <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80810ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80810ee:	4d04      	ldr	r5, [pc, #16]	; (8081100 <_ZN9IPAddressC1Ehhhh+0x14>)
 80810f0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80810f2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80810f6:	9500      	str	r5, [sp, #0]
 80810f8:	f7ff ffec 	bl	80810d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80810fc:	b003      	add	sp, #12
 80810fe:	bd30      	pop	{r4, r5, pc}
 8081100:	080826d4 	.word	0x080826d4

08081104 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081104:	7441      	strb	r1, [r0, #17]
}
 8081106:	4770      	bx	lr

08081108 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081108:	4770      	bx	lr

0808110a <_ZN9USBSerial4readEv>:
{
 808110a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808110c:	2100      	movs	r1, #0
 808110e:	7c00      	ldrb	r0, [r0, #16]
 8081110:	f7ff f9d0 	bl	80804b4 <HAL_USB_USART_Receive_Data>
}
 8081114:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081118:	bd08      	pop	{r3, pc}

0808111a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808111a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808111c:	2101      	movs	r1, #1
 808111e:	7c00      	ldrb	r0, [r0, #16]
 8081120:	f7ff f9c8 	bl	80804b4 <HAL_USB_USART_Receive_Data>
}
 8081124:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8081128:	bd08      	pop	{r3, pc}

0808112a <_ZN9USBSerial17availableForWriteEv>:
{
 808112a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808112c:	7c00      	ldrb	r0, [r0, #16]
 808112e:	f7ff f9b9 	bl	80804a4 <HAL_USB_USART_Available_Data_For_Write>
}
 8081132:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081136:	bd08      	pop	{r3, pc}

08081138 <_ZN9USBSerial9availableEv>:
{
 8081138:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808113a:	7c00      	ldrb	r0, [r0, #16]
 808113c:	f7ff f9aa 	bl	8080494 <HAL_USB_USART_Available_Data>
}
 8081140:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081144:	bd08      	pop	{r3, pc}

08081146 <_ZN9USBSerial5writeEh>:
{
 8081146:	b538      	push	{r3, r4, r5, lr}
 8081148:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808114a:	7c00      	ldrb	r0, [r0, #16]
{
 808114c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808114e:	f7ff f9a9 	bl	80804a4 <HAL_USB_USART_Available_Data_For_Write>
 8081152:	2800      	cmp	r0, #0
 8081154:	dc01      	bgt.n	808115a <_ZN9USBSerial5writeEh+0x14>
 8081156:	7c60      	ldrb	r0, [r4, #17]
 8081158:	b128      	cbz	r0, 8081166 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808115a:	4629      	mov	r1, r5
 808115c:	7c20      	ldrb	r0, [r4, #16]
 808115e:	f7ff f9b1 	bl	80804c4 <HAL_USB_USART_Send_Data>
 8081162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8081166:	bd38      	pop	{r3, r4, r5, pc}

08081168 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8081168:	7c00      	ldrb	r0, [r0, #16]
 808116a:	f7ff b9b3 	b.w	80804d4 <HAL_USB_USART_Flush_Data>

0808116e <_ZN9USBSerialD0Ev>:
 808116e:	b510      	push	{r4, lr}
 8081170:	4604      	mov	r4, r0
 8081172:	2114      	movs	r1, #20
 8081174:	f000 f9f7 	bl	8081566 <_ZdlPvj>
 8081178:	4620      	mov	r0, r4
 808117a:	bd10      	pop	{r4, pc}

0808117c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808117c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081182:	4604      	mov	r4, r0
 8081184:	4608      	mov	r0, r1
 8081186:	2100      	movs	r1, #0
 8081188:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808118c:	4b04      	ldr	r3, [pc, #16]	; (80811a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808118e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081190:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8081192:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8081194:	4611      	mov	r1, r2
  _blocking = true;
 8081196:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8081198:	f7ff f96c 	bl	8080474 <HAL_USB_USART_Init>
}
 808119c:	4620      	mov	r0, r4
 808119e:	bd10      	pop	{r4, pc}
 80811a0:	080826e8 	.word	0x080826e8

080811a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80811a4:	2200      	movs	r2, #0
 80811a6:	7c00      	ldrb	r0, [r0, #16]
 80811a8:	f7ff b96c 	b.w	8080484 <HAL_USB_USART_Begin>

080811ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80811ac:	b510      	push	{r4, lr}
 80811ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80811b0:	2214      	movs	r2, #20
 80811b2:	2100      	movs	r1, #0
 80811b4:	f001 f9d4 	bl	8082560 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80811b8:	4620      	mov	r0, r4
 80811ba:	bd10      	pop	{r4, pc}

080811bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80811bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80811be:	4d0f      	ldr	r5, [pc, #60]	; (80811fc <_Z16_fetch_usbserialv+0x40>)
{
 80811c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80811c2:	a801      	add	r0, sp, #4
 80811c4:	f7ff fff2 	bl	80811ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80811c8:	7829      	ldrb	r1, [r5, #0]
 80811ca:	f3bf 8f5b 	dmb	ish
 80811ce:	f011 0401 	ands.w	r4, r1, #1
 80811d2:	d110      	bne.n	80811f6 <_Z16_fetch_usbserialv+0x3a>
 80811d4:	4628      	mov	r0, r5
 80811d6:	f7fe ff7a 	bl	80800ce <__cxa_guard_acquire>
 80811da:	b160      	cbz	r0, 80811f6 <_Z16_fetch_usbserialv+0x3a>
 80811dc:	4621      	mov	r1, r4
 80811de:	aa01      	add	r2, sp, #4
 80811e0:	4807      	ldr	r0, [pc, #28]	; (8081200 <_Z16_fetch_usbserialv+0x44>)
 80811e2:	f7ff ffcb 	bl	808117c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80811e6:	4628      	mov	r0, r5
 80811e8:	f7fe ff76 	bl	80800d8 <__cxa_guard_release>
 80811ec:	4a05      	ldr	r2, [pc, #20]	; (8081204 <_Z16_fetch_usbserialv+0x48>)
 80811ee:	4906      	ldr	r1, [pc, #24]	; (8081208 <_Z16_fetch_usbserialv+0x4c>)
 80811f0:	4803      	ldr	r0, [pc, #12]	; (8081200 <_Z16_fetch_usbserialv+0x44>)
 80811f2:	f000 f9b3 	bl	808155c <__aeabi_atexit>
	return _usbserial;
}
 80811f6:	4802      	ldr	r0, [pc, #8]	; (8081200 <_Z16_fetch_usbserialv+0x44>)
 80811f8:	b007      	add	sp, #28
 80811fa:	bd30      	pop	{r4, r5, pc}
 80811fc:	200000b8 	.word	0x200000b8
 8081200:	200000c0 	.word	0x200000c0
 8081204:	20000068 	.word	0x20000068
 8081208:	08081109 	.word	0x08081109

0808120c <_Z23acquireUSBSerial1Bufferv>:
 808120c:	b510      	push	{r4, lr}
 808120e:	4604      	mov	r4, r0
 8081210:	2214      	movs	r2, #20
 8081212:	2100      	movs	r1, #0
 8081214:	f001 f9a4 	bl	8082560 <memset>
 8081218:	4620      	mov	r0, r4
 808121a:	bd10      	pop	{r4, pc}

0808121c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808121c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808121e:	4c0f      	ldr	r4, [pc, #60]	; (808125c <_Z17_fetch_usbserial1v+0x40>)
{
 8081220:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081222:	a801      	add	r0, sp, #4
 8081224:	f7ff fff2 	bl	808120c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081228:	7823      	ldrb	r3, [r4, #0]
 808122a:	f3bf 8f5b 	dmb	ish
 808122e:	07db      	lsls	r3, r3, #31
 8081230:	d410      	bmi.n	8081254 <_Z17_fetch_usbserial1v+0x38>
 8081232:	4620      	mov	r0, r4
 8081234:	f7fe ff4b 	bl	80800ce <__cxa_guard_acquire>
 8081238:	b160      	cbz	r0, 8081254 <_Z17_fetch_usbserial1v+0x38>
 808123a:	2101      	movs	r1, #1
 808123c:	aa01      	add	r2, sp, #4
 808123e:	4808      	ldr	r0, [pc, #32]	; (8081260 <_Z17_fetch_usbserial1v+0x44>)
 8081240:	f7ff ff9c 	bl	808117c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081244:	4620      	mov	r0, r4
 8081246:	f7fe ff47 	bl	80800d8 <__cxa_guard_release>
 808124a:	4a06      	ldr	r2, [pc, #24]	; (8081264 <_Z17_fetch_usbserial1v+0x48>)
 808124c:	4906      	ldr	r1, [pc, #24]	; (8081268 <_Z17_fetch_usbserial1v+0x4c>)
 808124e:	4804      	ldr	r0, [pc, #16]	; (8081260 <_Z17_fetch_usbserial1v+0x44>)
 8081250:	f000 f984 	bl	808155c <__aeabi_atexit>
  return _usbserial1;
}
 8081254:	4802      	ldr	r0, [pc, #8]	; (8081260 <_Z17_fetch_usbserial1v+0x44>)
 8081256:	b006      	add	sp, #24
 8081258:	bd10      	pop	{r4, pc}
 808125a:	bf00      	nop
 808125c:	200000bc 	.word	0x200000bc
 8081260:	200000d4 	.word	0x200000d4
 8081264:	20000068 	.word	0x20000068
 8081268:	08081109 	.word	0x08081109

0808126c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808126c:	2200      	movs	r2, #0
 808126e:	6840      	ldr	r0, [r0, #4]
 8081270:	4611      	mov	r1, r2
 8081272:	f7ff b99f 	b.w	80805b4 <network_ready>

08081276 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081276:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8081278:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808127a:	b085      	sub	sp, #20
 808127c:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808127e:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8081280:	460f      	mov	r7, r1
 8081282:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8081284:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081286:	f001 f9a9 	bl	80825dc <strlen>
 808128a:	687b      	ldr	r3, [r7, #4]
 808128c:	b281      	uxth	r1, r0
 808128e:	9600      	str	r6, [sp, #0]
 8081290:	4628      	mov	r0, r5
 8081292:	aa03      	add	r2, sp, #12
 8081294:	f7ff f8e6 	bl	8080464 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081298:	b130      	cbz	r0, 80812a8 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808129a:	4631      	mov	r1, r6
 808129c:	4620      	mov	r0, r4
 808129e:	f7ff ff13 	bl	80810c8 <_ZN9IPAddressC1Em>
    }
 80812a2:	4620      	mov	r0, r4
 80812a4:	b005      	add	sp, #20
 80812a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80812a8:	4620      	mov	r0, r4
 80812aa:	a903      	add	r1, sp, #12
 80812ac:	f7ff ff04 	bl	80810b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80812b0:	e7f7      	b.n	80812a2 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080812b2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80812b2:	2200      	movs	r2, #0
 80812b4:	6840      	ldr	r0, [r0, #4]
 80812b6:	4611      	mov	r1, r2
 80812b8:	f7ff b99c 	b.w	80805f4 <network_listening>

080812bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80812bc:	2200      	movs	r2, #0
 80812be:	6840      	ldr	r0, [r0, #4]
 80812c0:	4611      	mov	r1, r2
 80812c2:	f7ff b9a7 	b.w	8080614 <network_get_listen_timeout>

080812c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80812c6:	2200      	movs	r2, #0
 80812c8:	6840      	ldr	r0, [r0, #4]
 80812ca:	f7ff b99b 	b.w	8080604 <network_set_listen_timeout>

080812ce <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80812ce:	2200      	movs	r2, #0
 80812d0:	6840      	ldr	r0, [r0, #4]
 80812d2:	f081 0101 	eor.w	r1, r1, #1
 80812d6:	f7ff b985 	b.w	80805e4 <network_listen>

080812da <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80812da:	2300      	movs	r3, #0
 80812dc:	6840      	ldr	r0, [r0, #4]
 80812de:	461a      	mov	r2, r3
 80812e0:	4619      	mov	r1, r3
 80812e2:	f7ff b977 	b.w	80805d4 <network_off>

080812e6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80812e6:	2300      	movs	r3, #0
 80812e8:	6840      	ldr	r0, [r0, #4]
 80812ea:	461a      	mov	r2, r3
 80812ec:	4619      	mov	r1, r3
 80812ee:	f7ff b969 	b.w	80805c4 <network_on>

080812f2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80812f2:	2200      	movs	r2, #0
 80812f4:	6840      	ldr	r0, [r0, #4]
 80812f6:	4611      	mov	r1, r2
 80812f8:	f7ff b94c 	b.w	8080594 <network_connecting>

080812fc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80812fc:	2200      	movs	r2, #0
 80812fe:	2102      	movs	r1, #2
 8081300:	6840      	ldr	r0, [r0, #4]
 8081302:	f7ff b94f 	b.w	80805a4 <network_disconnect>

08081306 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8081306:	2300      	movs	r3, #0
 8081308:	6840      	ldr	r0, [r0, #4]
 808130a:	461a      	mov	r2, r3
 808130c:	f7ff b93a 	b.w	8080584 <network_connect>

08081310 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081310:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081312:	2428      	movs	r4, #40	; 0x28
 8081314:	4b07      	ldr	r3, [pc, #28]	; (8081334 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081316:	4622      	mov	r2, r4
 8081318:	4618      	mov	r0, r3
 808131a:	2100      	movs	r1, #0
 808131c:	f001 f920 	bl	8082560 <memset>
        cid = -1;
 8081320:	f04f 32ff 	mov.w	r2, #4294967295
 8081324:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081326:	2204      	movs	r2, #4
 8081328:	4b03      	ldr	r3, [pc, #12]	; (8081338 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808132a:	8004      	strh	r4, [r0, #0]
 808132c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808132e:	4a03      	ldr	r2, [pc, #12]	; (808133c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8081330:	601a      	str	r2, [r3, #0]
 8081332:	bd10      	pop	{r4, pc}
 8081334:	200000f0 	.word	0x200000f0
 8081338:	200000e8 	.word	0x200000e8
 808133c:	08082718 	.word	0x08082718

08081340 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8081340:	4770      	bx	lr

08081342 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081342:	7441      	strb	r1, [r0, #17]
}
 8081344:	4770      	bx	lr

08081346 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8081346:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8081348:	7c00      	ldrb	r0, [r0, #16]
 808134a:	f7ff f883 	bl	8080454 <hal_usart_available_data_for_write>
}
 808134e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081352:	bd08      	pop	{r3, pc}

08081354 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081354:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8081356:	7c00      	ldrb	r0, [r0, #16]
 8081358:	f7ff f85c 	bl	8080414 <hal_usart_available>
}
 808135c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081360:	bd08      	pop	{r3, pc}

08081362 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8081362:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8081364:	7c00      	ldrb	r0, [r0, #16]
 8081366:	f7ff f865 	bl	8080434 <hal_usart_peek>
}
 808136a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808136e:	bd08      	pop	{r3, pc}

08081370 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081370:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8081372:	7c00      	ldrb	r0, [r0, #16]
 8081374:	f7ff f856 	bl	8080424 <hal_usart_read>
}
 8081378:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808137c:	bd08      	pop	{r3, pc}

0808137e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808137e:	7c00      	ldrb	r0, [r0, #16]
 8081380:	f7ff b860 	b.w	8080444 <hal_usart_flush>

08081384 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081384:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8081386:	7c46      	ldrb	r6, [r0, #17]
{
 8081388:	4604      	mov	r4, r0
 808138a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808138c:	b12e      	cbz	r6, 808139a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808138e:	4629      	mov	r1, r5
 8081390:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8081396:	f7ff b835 	b.w	8080404 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808139a:	7c00      	ldrb	r0, [r0, #16]
 808139c:	f7ff f85a 	bl	8080454 <hal_usart_available_data_for_write>
 80813a0:	2800      	cmp	r0, #0
 80813a2:	dcf4      	bgt.n	808138e <_ZN11USARTSerial5writeEh+0xa>
}
 80813a4:	4630      	mov	r0, r6
 80813a6:	bd70      	pop	{r4, r5, r6, pc}

080813a8 <_ZN11USARTSerialD0Ev>:
 80813a8:	b510      	push	{r4, lr}
 80813aa:	4604      	mov	r4, r0
 80813ac:	2114      	movs	r1, #20
 80813ae:	f000 f8da 	bl	8081566 <_ZdlPvj>
 80813b2:	4620      	mov	r0, r4
 80813b4:	bd10      	pop	{r4, pc}
	...

080813b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80813b8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80813bc:	b510      	push	{r4, lr}
 80813be:	4604      	mov	r4, r0
 80813c0:	4608      	mov	r0, r1
 80813c2:	4611      	mov	r1, r2
 80813c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80813c8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80813cc:	4a04      	ldr	r2, [pc, #16]	; (80813e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80813ce:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80813d0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80813d2:	2201      	movs	r2, #1
 80813d4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80813d6:	461a      	mov	r2, r3
 80813d8:	f7ff f80c 	bl	80803f4 <hal_usart_init>
}
 80813dc:	4620      	mov	r0, r4
 80813de:	bd10      	pop	{r4, pc}
 80813e0:	0808274c 	.word	0x0808274c

080813e4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80813e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80813e6:	4c1a      	ldr	r4, [pc, #104]	; (8081450 <_Z22__fetch_global_Serial1v+0x6c>)
 80813e8:	6826      	ldr	r6, [r4, #0]
 80813ea:	b94e      	cbnz	r6, 8081400 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80813ec:	2084      	movs	r0, #132	; 0x84
 80813ee:	f7fe fe6a 	bl	80800c6 <_Znwj>
 80813f2:	4605      	mov	r5, r0
 80813f4:	b118      	cbz	r0, 80813fe <_Z22__fetch_global_Serial1v+0x1a>
 80813f6:	2284      	movs	r2, #132	; 0x84
 80813f8:	4631      	mov	r1, r6
 80813fa:	f001 f8b1 	bl	8082560 <memset>
 80813fe:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 8081400:	4d14      	ldr	r5, [pc, #80]	; (8081454 <_Z22__fetch_global_Serial1v+0x70>)
 8081402:	682f      	ldr	r7, [r5, #0]
 8081404:	b94f      	cbnz	r7, 808141a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 8081406:	2084      	movs	r0, #132	; 0x84
 8081408:	f7fe fe5d 	bl	80800c6 <_Znwj>
 808140c:	4606      	mov	r6, r0
 808140e:	b118      	cbz	r0, 8081418 <_Z22__fetch_global_Serial1v+0x34>
 8081410:	2284      	movs	r2, #132	; 0x84
 8081412:	4639      	mov	r1, r7
 8081414:	f001 f8a4 	bl	8082560 <memset>
 8081418:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 808141a:	4f0f      	ldr	r7, [pc, #60]	; (8081458 <_Z22__fetch_global_Serial1v+0x74>)
 808141c:	7839      	ldrb	r1, [r7, #0]
 808141e:	f3bf 8f5b 	dmb	ish
 8081422:	f011 0601 	ands.w	r6, r1, #1
 8081426:	d111      	bne.n	808144c <_Z22__fetch_global_Serial1v+0x68>
 8081428:	4638      	mov	r0, r7
 808142a:	f7fe fe50 	bl	80800ce <__cxa_guard_acquire>
 808142e:	b168      	cbz	r0, 808144c <_Z22__fetch_global_Serial1v+0x68>
 8081430:	4631      	mov	r1, r6
 8081432:	6822      	ldr	r2, [r4, #0]
 8081434:	682b      	ldr	r3, [r5, #0]
 8081436:	4809      	ldr	r0, [pc, #36]	; (808145c <_Z22__fetch_global_Serial1v+0x78>)
 8081438:	f7ff ffbe 	bl	80813b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808143c:	4638      	mov	r0, r7
 808143e:	f7fe fe4b 	bl	80800d8 <__cxa_guard_release>
 8081442:	4a07      	ldr	r2, [pc, #28]	; (8081460 <_Z22__fetch_global_Serial1v+0x7c>)
 8081444:	4907      	ldr	r1, [pc, #28]	; (8081464 <_Z22__fetch_global_Serial1v+0x80>)
 8081446:	4805      	ldr	r0, [pc, #20]	; (808145c <_Z22__fetch_global_Serial1v+0x78>)
 8081448:	f000 f888 	bl	808155c <__aeabi_atexit>
#endif
	return serial1;
}
 808144c:	4803      	ldr	r0, [pc, #12]	; (808145c <_Z22__fetch_global_Serial1v+0x78>)
 808144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081450:	2000011c 	.word	0x2000011c
 8081454:	20000120 	.word	0x20000120
 8081458:	20000118 	.word	0x20000118
 808145c:	20000124 	.word	0x20000124
 8081460:	20000068 	.word	0x20000068
 8081464:	08081341 	.word	0x08081341

08081468 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081468:	2300      	movs	r3, #0
 808146a:	6840      	ldr	r0, [r0, #4]
 808146c:	461a      	mov	r2, r3
 808146e:	f7ff b889 	b.w	8080584 <network_connect>

08081472 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081472:	2200      	movs	r2, #0
 8081474:	2102      	movs	r1, #2
 8081476:	6840      	ldr	r0, [r0, #4]
 8081478:	f7ff b894 	b.w	80805a4 <network_disconnect>

0808147c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808147c:	2200      	movs	r2, #0
 808147e:	6840      	ldr	r0, [r0, #4]
 8081480:	4611      	mov	r1, r2
 8081482:	f7ff b887 	b.w	8080594 <network_connecting>

08081486 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081486:	2200      	movs	r2, #0
 8081488:	6840      	ldr	r0, [r0, #4]
 808148a:	4611      	mov	r1, r2
 808148c:	f7ff b892 	b.w	80805b4 <network_ready>

08081490 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081490:	2300      	movs	r3, #0
 8081492:	6840      	ldr	r0, [r0, #4]
 8081494:	461a      	mov	r2, r3
 8081496:	4619      	mov	r1, r3
 8081498:	f7ff b894 	b.w	80805c4 <network_on>

0808149c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808149c:	2300      	movs	r3, #0
 808149e:	6840      	ldr	r0, [r0, #4]
 80814a0:	461a      	mov	r2, r3
 80814a2:	4619      	mov	r1, r3
 80814a4:	f7ff b896 	b.w	80805d4 <network_off>

080814a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80814a8:	2200      	movs	r2, #0
 80814aa:	6840      	ldr	r0, [r0, #4]
 80814ac:	f081 0101 	eor.w	r1, r1, #1
 80814b0:	f7ff b898 	b.w	80805e4 <network_listen>

080814b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80814b4:	2200      	movs	r2, #0
 80814b6:	6840      	ldr	r0, [r0, #4]
 80814b8:	f7ff b8a4 	b.w	8080604 <network_set_listen_timeout>

080814bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80814bc:	2200      	movs	r2, #0
 80814be:	6840      	ldr	r0, [r0, #4]
 80814c0:	4611      	mov	r1, r2
 80814c2:	f7ff b8a7 	b.w	8080614 <network_get_listen_timeout>

080814c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80814c6:	2200      	movs	r2, #0
 80814c8:	6840      	ldr	r0, [r0, #4]
 80814ca:	4611      	mov	r1, r2
 80814cc:	f7ff b892 	b.w	80805f4 <network_listening>

080814d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80814d0:	b570      	push	{r4, r5, r6, lr}
 80814d2:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80814d4:	2600      	movs	r6, #0
 80814d6:	b086      	sub	sp, #24
 80814d8:	4604      	mov	r4, r0
    IPAddress addr;
 80814da:	a804      	add	r0, sp, #16
 80814dc:	f7ff fde4 	bl	80810a8 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80814e0:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 80814e2:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80814e4:	f001 f87a 	bl	80825dc <strlen>
 80814e8:	4b0a      	ldr	r3, [pc, #40]	; (8081514 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 80814ea:	9600      	str	r6, [sp, #0]
 80814ec:	b281      	uxth	r1, r0
 80814ee:	685b      	ldr	r3, [r3, #4]
 80814f0:	4628      	mov	r0, r5
 80814f2:	aa03      	add	r2, sp, #12
 80814f4:	f7fe ffb6 	bl	8080464 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80814f8:	b130      	cbz	r0, 8081508 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80814fa:	4631      	mov	r1, r6
 80814fc:	4620      	mov	r0, r4
 80814fe:	f7ff fde3 	bl	80810c8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8081502:	4620      	mov	r0, r4
 8081504:	b006      	add	sp, #24
 8081506:	bd70      	pop	{r4, r5, r6, pc}
 8081508:	4620      	mov	r0, r4
 808150a:	a903      	add	r1, sp, #12
 808150c:	f7ff fdd4 	bl	80810b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8081510:	e7f7      	b.n	8081502 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8081512:	bf00      	nop
 8081514:	200000e8 	.word	0x200000e8

08081518 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081518:	4b02      	ldr	r3, [pc, #8]	; (8081524 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808151a:	4a03      	ldr	r2, [pc, #12]	; (8081528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808151c:	601a      	str	r2, [r3, #0]
 808151e:	2200      	movs	r2, #0
 8081520:	605a      	str	r2, [r3, #4]

} // spark
 8081522:	4770      	bx	lr
 8081524:	20000138 	.word	0x20000138
 8081528:	0808277c 	.word	0x0808277c

0808152c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808152c:	2300      	movs	r3, #0
 808152e:	b513      	push	{r0, r1, r4, lr}
 8081530:	4c07      	ldr	r4, [pc, #28]	; (8081550 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081532:	461a      	mov	r2, r3
 8081534:	4619      	mov	r1, r3
 8081536:	4620      	mov	r0, r4
 8081538:	9300      	str	r3, [sp, #0]
 808153a:	f7ff fdd7 	bl	80810ec <_ZN9IPAddressC1Ehhhh>
 808153e:	4620      	mov	r0, r4
 8081540:	4a04      	ldr	r2, [pc, #16]	; (8081554 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081542:	4905      	ldr	r1, [pc, #20]	; (8081558 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081544:	b002      	add	sp, #8
 8081546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808154a:	f000 b807 	b.w	808155c <__aeabi_atexit>
 808154e:	bf00      	nop
 8081550:	20000144 	.word	0x20000144
 8081554:	20000068 	.word	0x20000068
 8081558:	08081065 	.word	0x08081065

0808155c <__aeabi_atexit>:
 808155c:	460b      	mov	r3, r1
 808155e:	4601      	mov	r1, r0
 8081560:	4618      	mov	r0, r3
 8081562:	f000 bfe1 	b.w	8082528 <__cxa_atexit>

08081566 <_ZdlPvj>:
 8081566:	f7fe bdb0 	b.w	80800ca <_ZdlPv>

0808156a <_ZnwjRKSt9nothrow_t>:
 808156a:	f7fe bdac 	b.w	80800c6 <_Znwj>
	...

08081570 <__aeabi_drsub>:
 8081570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081574:	e002      	b.n	808157c <__adddf3>
 8081576:	bf00      	nop

08081578 <__aeabi_dsub>:
 8081578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808157c <__adddf3>:
 808157c:	b530      	push	{r4, r5, lr}
 808157e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081582:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8081586:	ea94 0f05 	teq	r4, r5
 808158a:	bf08      	it	eq
 808158c:	ea90 0f02 	teqeq	r0, r2
 8081590:	bf1f      	itttt	ne
 8081592:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081596:	ea55 0c02 	orrsne.w	ip, r5, r2
 808159a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808159e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80815a2:	f000 80e2 	beq.w	808176a <__adddf3+0x1ee>
 80815a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80815aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80815ae:	bfb8      	it	lt
 80815b0:	426d      	neglt	r5, r5
 80815b2:	dd0c      	ble.n	80815ce <__adddf3+0x52>
 80815b4:	442c      	add	r4, r5
 80815b6:	ea80 0202 	eor.w	r2, r0, r2
 80815ba:	ea81 0303 	eor.w	r3, r1, r3
 80815be:	ea82 0000 	eor.w	r0, r2, r0
 80815c2:	ea83 0101 	eor.w	r1, r3, r1
 80815c6:	ea80 0202 	eor.w	r2, r0, r2
 80815ca:	ea81 0303 	eor.w	r3, r1, r3
 80815ce:	2d36      	cmp	r5, #54	; 0x36
 80815d0:	bf88      	it	hi
 80815d2:	bd30      	pophi	{r4, r5, pc}
 80815d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80815d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80815dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80815e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80815e4:	d002      	beq.n	80815ec <__adddf3+0x70>
 80815e6:	4240      	negs	r0, r0
 80815e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80815ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80815f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80815f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80815f8:	d002      	beq.n	8081600 <__adddf3+0x84>
 80815fa:	4252      	negs	r2, r2
 80815fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081600:	ea94 0f05 	teq	r4, r5
 8081604:	f000 80a7 	beq.w	8081756 <__adddf3+0x1da>
 8081608:	f1a4 0401 	sub.w	r4, r4, #1
 808160c:	f1d5 0e20 	rsbs	lr, r5, #32
 8081610:	db0d      	blt.n	808162e <__adddf3+0xb2>
 8081612:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081616:	fa22 f205 	lsr.w	r2, r2, r5
 808161a:	1880      	adds	r0, r0, r2
 808161c:	f141 0100 	adc.w	r1, r1, #0
 8081620:	fa03 f20e 	lsl.w	r2, r3, lr
 8081624:	1880      	adds	r0, r0, r2
 8081626:	fa43 f305 	asr.w	r3, r3, r5
 808162a:	4159      	adcs	r1, r3
 808162c:	e00e      	b.n	808164c <__adddf3+0xd0>
 808162e:	f1a5 0520 	sub.w	r5, r5, #32
 8081632:	f10e 0e20 	add.w	lr, lr, #32
 8081636:	2a01      	cmp	r2, #1
 8081638:	fa03 fc0e 	lsl.w	ip, r3, lr
 808163c:	bf28      	it	cs
 808163e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081642:	fa43 f305 	asr.w	r3, r3, r5
 8081646:	18c0      	adds	r0, r0, r3
 8081648:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808164c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081650:	d507      	bpl.n	8081662 <__adddf3+0xe6>
 8081652:	f04f 0e00 	mov.w	lr, #0
 8081656:	f1dc 0c00 	rsbs	ip, ip, #0
 808165a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808165e:	eb6e 0101 	sbc.w	r1, lr, r1
 8081662:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081666:	d31b      	bcc.n	80816a0 <__adddf3+0x124>
 8081668:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808166c:	d30c      	bcc.n	8081688 <__adddf3+0x10c>
 808166e:	0849      	lsrs	r1, r1, #1
 8081670:	ea5f 0030 	movs.w	r0, r0, rrx
 8081674:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081678:	f104 0401 	add.w	r4, r4, #1
 808167c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081680:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081684:	f080 809a 	bcs.w	80817bc <__adddf3+0x240>
 8081688:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808168c:	bf08      	it	eq
 808168e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081692:	f150 0000 	adcs.w	r0, r0, #0
 8081696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808169a:	ea41 0105 	orr.w	r1, r1, r5
 808169e:	bd30      	pop	{r4, r5, pc}
 80816a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80816a4:	4140      	adcs	r0, r0
 80816a6:	eb41 0101 	adc.w	r1, r1, r1
 80816aa:	3c01      	subs	r4, #1
 80816ac:	bf28      	it	cs
 80816ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80816b2:	d2e9      	bcs.n	8081688 <__adddf3+0x10c>
 80816b4:	f091 0f00 	teq	r1, #0
 80816b8:	bf04      	itt	eq
 80816ba:	4601      	moveq	r1, r0
 80816bc:	2000      	moveq	r0, #0
 80816be:	fab1 f381 	clz	r3, r1
 80816c2:	bf08      	it	eq
 80816c4:	3320      	addeq	r3, #32
 80816c6:	f1a3 030b 	sub.w	r3, r3, #11
 80816ca:	f1b3 0220 	subs.w	r2, r3, #32
 80816ce:	da0c      	bge.n	80816ea <__adddf3+0x16e>
 80816d0:	320c      	adds	r2, #12
 80816d2:	dd08      	ble.n	80816e6 <__adddf3+0x16a>
 80816d4:	f102 0c14 	add.w	ip, r2, #20
 80816d8:	f1c2 020c 	rsb	r2, r2, #12
 80816dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80816e0:	fa21 f102 	lsr.w	r1, r1, r2
 80816e4:	e00c      	b.n	8081700 <__adddf3+0x184>
 80816e6:	f102 0214 	add.w	r2, r2, #20
 80816ea:	bfd8      	it	le
 80816ec:	f1c2 0c20 	rsble	ip, r2, #32
 80816f0:	fa01 f102 	lsl.w	r1, r1, r2
 80816f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80816f8:	bfdc      	itt	le
 80816fa:	ea41 010c 	orrle.w	r1, r1, ip
 80816fe:	4090      	lslle	r0, r2
 8081700:	1ae4      	subs	r4, r4, r3
 8081702:	bfa2      	ittt	ge
 8081704:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081708:	4329      	orrge	r1, r5
 808170a:	bd30      	popge	{r4, r5, pc}
 808170c:	ea6f 0404 	mvn.w	r4, r4
 8081710:	3c1f      	subs	r4, #31
 8081712:	da1c      	bge.n	808174e <__adddf3+0x1d2>
 8081714:	340c      	adds	r4, #12
 8081716:	dc0e      	bgt.n	8081736 <__adddf3+0x1ba>
 8081718:	f104 0414 	add.w	r4, r4, #20
 808171c:	f1c4 0220 	rsb	r2, r4, #32
 8081720:	fa20 f004 	lsr.w	r0, r0, r4
 8081724:	fa01 f302 	lsl.w	r3, r1, r2
 8081728:	ea40 0003 	orr.w	r0, r0, r3
 808172c:	fa21 f304 	lsr.w	r3, r1, r4
 8081730:	ea45 0103 	orr.w	r1, r5, r3
 8081734:	bd30      	pop	{r4, r5, pc}
 8081736:	f1c4 040c 	rsb	r4, r4, #12
 808173a:	f1c4 0220 	rsb	r2, r4, #32
 808173e:	fa20 f002 	lsr.w	r0, r0, r2
 8081742:	fa01 f304 	lsl.w	r3, r1, r4
 8081746:	ea40 0003 	orr.w	r0, r0, r3
 808174a:	4629      	mov	r1, r5
 808174c:	bd30      	pop	{r4, r5, pc}
 808174e:	fa21 f004 	lsr.w	r0, r1, r4
 8081752:	4629      	mov	r1, r5
 8081754:	bd30      	pop	{r4, r5, pc}
 8081756:	f094 0f00 	teq	r4, #0
 808175a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808175e:	bf06      	itte	eq
 8081760:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081764:	3401      	addeq	r4, #1
 8081766:	3d01      	subne	r5, #1
 8081768:	e74e      	b.n	8081608 <__adddf3+0x8c>
 808176a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808176e:	bf18      	it	ne
 8081770:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081774:	d029      	beq.n	80817ca <__adddf3+0x24e>
 8081776:	ea94 0f05 	teq	r4, r5
 808177a:	bf08      	it	eq
 808177c:	ea90 0f02 	teqeq	r0, r2
 8081780:	d005      	beq.n	808178e <__adddf3+0x212>
 8081782:	ea54 0c00 	orrs.w	ip, r4, r0
 8081786:	bf04      	itt	eq
 8081788:	4619      	moveq	r1, r3
 808178a:	4610      	moveq	r0, r2
 808178c:	bd30      	pop	{r4, r5, pc}
 808178e:	ea91 0f03 	teq	r1, r3
 8081792:	bf1e      	ittt	ne
 8081794:	2100      	movne	r1, #0
 8081796:	2000      	movne	r0, #0
 8081798:	bd30      	popne	{r4, r5, pc}
 808179a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808179e:	d105      	bne.n	80817ac <__adddf3+0x230>
 80817a0:	0040      	lsls	r0, r0, #1
 80817a2:	4149      	adcs	r1, r1
 80817a4:	bf28      	it	cs
 80817a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80817aa:	bd30      	pop	{r4, r5, pc}
 80817ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80817b0:	bf3c      	itt	cc
 80817b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80817b6:	bd30      	popcc	{r4, r5, pc}
 80817b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80817bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80817c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80817c4:	f04f 0000 	mov.w	r0, #0
 80817c8:	bd30      	pop	{r4, r5, pc}
 80817ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80817ce:	bf1a      	itte	ne
 80817d0:	4619      	movne	r1, r3
 80817d2:	4610      	movne	r0, r2
 80817d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80817d8:	bf1c      	itt	ne
 80817da:	460b      	movne	r3, r1
 80817dc:	4602      	movne	r2, r0
 80817de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80817e2:	bf06      	itte	eq
 80817e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80817e8:	ea91 0f03 	teqeq	r1, r3
 80817ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80817f0:	bd30      	pop	{r4, r5, pc}
 80817f2:	bf00      	nop

080817f4 <__aeabi_ui2d>:
 80817f4:	f090 0f00 	teq	r0, #0
 80817f8:	bf04      	itt	eq
 80817fa:	2100      	moveq	r1, #0
 80817fc:	4770      	bxeq	lr
 80817fe:	b530      	push	{r4, r5, lr}
 8081800:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081804:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081808:	f04f 0500 	mov.w	r5, #0
 808180c:	f04f 0100 	mov.w	r1, #0
 8081810:	e750      	b.n	80816b4 <__adddf3+0x138>
 8081812:	bf00      	nop

08081814 <__aeabi_i2d>:
 8081814:	f090 0f00 	teq	r0, #0
 8081818:	bf04      	itt	eq
 808181a:	2100      	moveq	r1, #0
 808181c:	4770      	bxeq	lr
 808181e:	b530      	push	{r4, r5, lr}
 8081820:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081824:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081828:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808182c:	bf48      	it	mi
 808182e:	4240      	negmi	r0, r0
 8081830:	f04f 0100 	mov.w	r1, #0
 8081834:	e73e      	b.n	80816b4 <__adddf3+0x138>
 8081836:	bf00      	nop

08081838 <__aeabi_f2d>:
 8081838:	0042      	lsls	r2, r0, #1
 808183a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808183e:	ea4f 0131 	mov.w	r1, r1, rrx
 8081842:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8081846:	bf1f      	itttt	ne
 8081848:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808184c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081850:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8081854:	4770      	bxne	lr
 8081856:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808185a:	bf08      	it	eq
 808185c:	4770      	bxeq	lr
 808185e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8081862:	bf04      	itt	eq
 8081864:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8081868:	4770      	bxeq	lr
 808186a:	b530      	push	{r4, r5, lr}
 808186c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8081870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081878:	e71c      	b.n	80816b4 <__adddf3+0x138>
 808187a:	bf00      	nop

0808187c <__aeabi_ul2d>:
 808187c:	ea50 0201 	orrs.w	r2, r0, r1
 8081880:	bf08      	it	eq
 8081882:	4770      	bxeq	lr
 8081884:	b530      	push	{r4, r5, lr}
 8081886:	f04f 0500 	mov.w	r5, #0
 808188a:	e00a      	b.n	80818a2 <__aeabi_l2d+0x16>

0808188c <__aeabi_l2d>:
 808188c:	ea50 0201 	orrs.w	r2, r0, r1
 8081890:	bf08      	it	eq
 8081892:	4770      	bxeq	lr
 8081894:	b530      	push	{r4, r5, lr}
 8081896:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808189a:	d502      	bpl.n	80818a2 <__aeabi_l2d+0x16>
 808189c:	4240      	negs	r0, r0
 808189e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80818a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80818a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80818aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80818ae:	f43f aed8 	beq.w	8081662 <__adddf3+0xe6>
 80818b2:	f04f 0203 	mov.w	r2, #3
 80818b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80818ba:	bf18      	it	ne
 80818bc:	3203      	addne	r2, #3
 80818be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80818c2:	bf18      	it	ne
 80818c4:	3203      	addne	r2, #3
 80818c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80818ca:	f1c2 0320 	rsb	r3, r2, #32
 80818ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80818d2:	fa20 f002 	lsr.w	r0, r0, r2
 80818d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80818da:	ea40 000e 	orr.w	r0, r0, lr
 80818de:	fa21 f102 	lsr.w	r1, r1, r2
 80818e2:	4414      	add	r4, r2
 80818e4:	e6bd      	b.n	8081662 <__adddf3+0xe6>
 80818e6:	bf00      	nop

080818e8 <__aeabi_dmul>:
 80818e8:	b570      	push	{r4, r5, r6, lr}
 80818ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80818ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80818f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80818f6:	bf1d      	ittte	ne
 80818f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80818fc:	ea94 0f0c 	teqne	r4, ip
 8081900:	ea95 0f0c 	teqne	r5, ip
 8081904:	f000 f8de 	bleq	8081ac4 <__aeabi_dmul+0x1dc>
 8081908:	442c      	add	r4, r5
 808190a:	ea81 0603 	eor.w	r6, r1, r3
 808190e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8081912:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8081916:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808191a:	bf18      	it	ne
 808191c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8081920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8081928:	d038      	beq.n	808199c <__aeabi_dmul+0xb4>
 808192a:	fba0 ce02 	umull	ip, lr, r0, r2
 808192e:	f04f 0500 	mov.w	r5, #0
 8081932:	fbe1 e502 	umlal	lr, r5, r1, r2
 8081936:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808193a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808193e:	f04f 0600 	mov.w	r6, #0
 8081942:	fbe1 5603 	umlal	r5, r6, r1, r3
 8081946:	f09c 0f00 	teq	ip, #0
 808194a:	bf18      	it	ne
 808194c:	f04e 0e01 	orrne.w	lr, lr, #1
 8081950:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8081954:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081958:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808195c:	d204      	bcs.n	8081968 <__aeabi_dmul+0x80>
 808195e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8081962:	416d      	adcs	r5, r5
 8081964:	eb46 0606 	adc.w	r6, r6, r6
 8081968:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808196c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8081970:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8081974:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8081978:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808197c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081980:	bf88      	it	hi
 8081982:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081986:	d81e      	bhi.n	80819c6 <__aeabi_dmul+0xde>
 8081988:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808198c:	bf08      	it	eq
 808198e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8081992:	f150 0000 	adcs.w	r0, r0, #0
 8081996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808199a:	bd70      	pop	{r4, r5, r6, pc}
 808199c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80819a0:	ea46 0101 	orr.w	r1, r6, r1
 80819a4:	ea40 0002 	orr.w	r0, r0, r2
 80819a8:	ea81 0103 	eor.w	r1, r1, r3
 80819ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80819b0:	bfc2      	ittt	gt
 80819b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80819b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80819ba:	bd70      	popgt	{r4, r5, r6, pc}
 80819bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80819c0:	f04f 0e00 	mov.w	lr, #0
 80819c4:	3c01      	subs	r4, #1
 80819c6:	f300 80ab 	bgt.w	8081b20 <__aeabi_dmul+0x238>
 80819ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80819ce:	bfde      	ittt	le
 80819d0:	2000      	movle	r0, #0
 80819d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80819d6:	bd70      	pople	{r4, r5, r6, pc}
 80819d8:	f1c4 0400 	rsb	r4, r4, #0
 80819dc:	3c20      	subs	r4, #32
 80819de:	da35      	bge.n	8081a4c <__aeabi_dmul+0x164>
 80819e0:	340c      	adds	r4, #12
 80819e2:	dc1b      	bgt.n	8081a1c <__aeabi_dmul+0x134>
 80819e4:	f104 0414 	add.w	r4, r4, #20
 80819e8:	f1c4 0520 	rsb	r5, r4, #32
 80819ec:	fa00 f305 	lsl.w	r3, r0, r5
 80819f0:	fa20 f004 	lsr.w	r0, r0, r4
 80819f4:	fa01 f205 	lsl.w	r2, r1, r5
 80819f8:	ea40 0002 	orr.w	r0, r0, r2
 80819fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8081a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081a08:	fa21 f604 	lsr.w	r6, r1, r4
 8081a0c:	eb42 0106 	adc.w	r1, r2, r6
 8081a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a14:	bf08      	it	eq
 8081a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a1a:	bd70      	pop	{r4, r5, r6, pc}
 8081a1c:	f1c4 040c 	rsb	r4, r4, #12
 8081a20:	f1c4 0520 	rsb	r5, r4, #32
 8081a24:	fa00 f304 	lsl.w	r3, r0, r4
 8081a28:	fa20 f005 	lsr.w	r0, r0, r5
 8081a2c:	fa01 f204 	lsl.w	r2, r1, r4
 8081a30:	ea40 0002 	orr.w	r0, r0, r2
 8081a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081a38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081a3c:	f141 0100 	adc.w	r1, r1, #0
 8081a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a44:	bf08      	it	eq
 8081a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a4a:	bd70      	pop	{r4, r5, r6, pc}
 8081a4c:	f1c4 0520 	rsb	r5, r4, #32
 8081a50:	fa00 f205 	lsl.w	r2, r0, r5
 8081a54:	ea4e 0e02 	orr.w	lr, lr, r2
 8081a58:	fa20 f304 	lsr.w	r3, r0, r4
 8081a5c:	fa01 f205 	lsl.w	r2, r1, r5
 8081a60:	ea43 0302 	orr.w	r3, r3, r2
 8081a64:	fa21 f004 	lsr.w	r0, r1, r4
 8081a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081a6c:	fa21 f204 	lsr.w	r2, r1, r4
 8081a70:	ea20 0002 	bic.w	r0, r0, r2
 8081a74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8081a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081a7c:	bf08      	it	eq
 8081a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081a82:	bd70      	pop	{r4, r5, r6, pc}
 8081a84:	f094 0f00 	teq	r4, #0
 8081a88:	d10f      	bne.n	8081aaa <__aeabi_dmul+0x1c2>
 8081a8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8081a8e:	0040      	lsls	r0, r0, #1
 8081a90:	eb41 0101 	adc.w	r1, r1, r1
 8081a94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081a98:	bf08      	it	eq
 8081a9a:	3c01      	subeq	r4, #1
 8081a9c:	d0f7      	beq.n	8081a8e <__aeabi_dmul+0x1a6>
 8081a9e:	ea41 0106 	orr.w	r1, r1, r6
 8081aa2:	f095 0f00 	teq	r5, #0
 8081aa6:	bf18      	it	ne
 8081aa8:	4770      	bxne	lr
 8081aaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8081aae:	0052      	lsls	r2, r2, #1
 8081ab0:	eb43 0303 	adc.w	r3, r3, r3
 8081ab4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8081ab8:	bf08      	it	eq
 8081aba:	3d01      	subeq	r5, #1
 8081abc:	d0f7      	beq.n	8081aae <__aeabi_dmul+0x1c6>
 8081abe:	ea43 0306 	orr.w	r3, r3, r6
 8081ac2:	4770      	bx	lr
 8081ac4:	ea94 0f0c 	teq	r4, ip
 8081ac8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081acc:	bf18      	it	ne
 8081ace:	ea95 0f0c 	teqne	r5, ip
 8081ad2:	d00c      	beq.n	8081aee <__aeabi_dmul+0x206>
 8081ad4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081ad8:	bf18      	it	ne
 8081ada:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081ade:	d1d1      	bne.n	8081a84 <__aeabi_dmul+0x19c>
 8081ae0:	ea81 0103 	eor.w	r1, r1, r3
 8081ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081ae8:	f04f 0000 	mov.w	r0, #0
 8081aec:	bd70      	pop	{r4, r5, r6, pc}
 8081aee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081af2:	bf06      	itte	eq
 8081af4:	4610      	moveq	r0, r2
 8081af6:	4619      	moveq	r1, r3
 8081af8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081afc:	d019      	beq.n	8081b32 <__aeabi_dmul+0x24a>
 8081afe:	ea94 0f0c 	teq	r4, ip
 8081b02:	d102      	bne.n	8081b0a <__aeabi_dmul+0x222>
 8081b04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8081b08:	d113      	bne.n	8081b32 <__aeabi_dmul+0x24a>
 8081b0a:	ea95 0f0c 	teq	r5, ip
 8081b0e:	d105      	bne.n	8081b1c <__aeabi_dmul+0x234>
 8081b10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8081b14:	bf1c      	itt	ne
 8081b16:	4610      	movne	r0, r2
 8081b18:	4619      	movne	r1, r3
 8081b1a:	d10a      	bne.n	8081b32 <__aeabi_dmul+0x24a>
 8081b1c:	ea81 0103 	eor.w	r1, r1, r3
 8081b20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081b24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081b28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081b2c:	f04f 0000 	mov.w	r0, #0
 8081b30:	bd70      	pop	{r4, r5, r6, pc}
 8081b32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8081b36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8081b3a:	bd70      	pop	{r4, r5, r6, pc}

08081b3c <__aeabi_ddiv>:
 8081b3c:	b570      	push	{r4, r5, r6, lr}
 8081b3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081b42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081b46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081b4a:	bf1d      	ittte	ne
 8081b4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081b50:	ea94 0f0c 	teqne	r4, ip
 8081b54:	ea95 0f0c 	teqne	r5, ip
 8081b58:	f000 f8a7 	bleq	8081caa <__aeabi_ddiv+0x16e>
 8081b5c:	eba4 0405 	sub.w	r4, r4, r5
 8081b60:	ea81 0e03 	eor.w	lr, r1, r3
 8081b64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8081b68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081b6c:	f000 8088 	beq.w	8081c80 <__aeabi_ddiv+0x144>
 8081b70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081b74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8081b78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8081b7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8081b80:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8081b84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8081b88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8081b8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8081b90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8081b94:	429d      	cmp	r5, r3
 8081b96:	bf08      	it	eq
 8081b98:	4296      	cmpeq	r6, r2
 8081b9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8081b9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8081ba2:	d202      	bcs.n	8081baa <__aeabi_ddiv+0x6e>
 8081ba4:	085b      	lsrs	r3, r3, #1
 8081ba6:	ea4f 0232 	mov.w	r2, r2, rrx
 8081baa:	1ab6      	subs	r6, r6, r2
 8081bac:	eb65 0503 	sbc.w	r5, r5, r3
 8081bb0:	085b      	lsrs	r3, r3, #1
 8081bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8081bba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8081bbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8081bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081bc6:	bf22      	ittt	cs
 8081bc8:	1ab6      	subcs	r6, r6, r2
 8081bca:	4675      	movcs	r5, lr
 8081bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8081bd0:	085b      	lsrs	r3, r3, #1
 8081bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bd6:	ebb6 0e02 	subs.w	lr, r6, r2
 8081bda:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081bde:	bf22      	ittt	cs
 8081be0:	1ab6      	subcs	r6, r6, r2
 8081be2:	4675      	movcs	r5, lr
 8081be4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8081be8:	085b      	lsrs	r3, r3, #1
 8081bea:	ea4f 0232 	mov.w	r2, r2, rrx
 8081bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8081bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081bf6:	bf22      	ittt	cs
 8081bf8:	1ab6      	subcs	r6, r6, r2
 8081bfa:	4675      	movcs	r5, lr
 8081bfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8081c00:	085b      	lsrs	r3, r3, #1
 8081c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8081c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8081c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8081c0e:	bf22      	ittt	cs
 8081c10:	1ab6      	subcs	r6, r6, r2
 8081c12:	4675      	movcs	r5, lr
 8081c14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8081c18:	ea55 0e06 	orrs.w	lr, r5, r6
 8081c1c:	d018      	beq.n	8081c50 <__aeabi_ddiv+0x114>
 8081c1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8081c22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8081c26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8081c2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8081c2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8081c32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8081c36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8081c3a:	d1c0      	bne.n	8081bbe <__aeabi_ddiv+0x82>
 8081c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081c40:	d10b      	bne.n	8081c5a <__aeabi_ddiv+0x11e>
 8081c42:	ea41 0100 	orr.w	r1, r1, r0
 8081c46:	f04f 0000 	mov.w	r0, #0
 8081c4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8081c4e:	e7b6      	b.n	8081bbe <__aeabi_ddiv+0x82>
 8081c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081c54:	bf04      	itt	eq
 8081c56:	4301      	orreq	r1, r0
 8081c58:	2000      	moveq	r0, #0
 8081c5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081c5e:	bf88      	it	hi
 8081c60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081c64:	f63f aeaf 	bhi.w	80819c6 <__aeabi_dmul+0xde>
 8081c68:	ebb5 0c03 	subs.w	ip, r5, r3
 8081c6c:	bf04      	itt	eq
 8081c6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8081c72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081c76:	f150 0000 	adcs.w	r0, r0, #0
 8081c7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081c7e:	bd70      	pop	{r4, r5, r6, pc}
 8081c80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8081c84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8081c88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8081c8c:	bfc2      	ittt	gt
 8081c8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8081c92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8081c96:	bd70      	popgt	{r4, r5, r6, pc}
 8081c98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081c9c:	f04f 0e00 	mov.w	lr, #0
 8081ca0:	3c01      	subs	r4, #1
 8081ca2:	e690      	b.n	80819c6 <__aeabi_dmul+0xde>
 8081ca4:	ea45 0e06 	orr.w	lr, r5, r6
 8081ca8:	e68d      	b.n	80819c6 <__aeabi_dmul+0xde>
 8081caa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8081cae:	ea94 0f0c 	teq	r4, ip
 8081cb2:	bf08      	it	eq
 8081cb4:	ea95 0f0c 	teqeq	r5, ip
 8081cb8:	f43f af3b 	beq.w	8081b32 <__aeabi_dmul+0x24a>
 8081cbc:	ea94 0f0c 	teq	r4, ip
 8081cc0:	d10a      	bne.n	8081cd8 <__aeabi_ddiv+0x19c>
 8081cc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081cc6:	f47f af34 	bne.w	8081b32 <__aeabi_dmul+0x24a>
 8081cca:	ea95 0f0c 	teq	r5, ip
 8081cce:	f47f af25 	bne.w	8081b1c <__aeabi_dmul+0x234>
 8081cd2:	4610      	mov	r0, r2
 8081cd4:	4619      	mov	r1, r3
 8081cd6:	e72c      	b.n	8081b32 <__aeabi_dmul+0x24a>
 8081cd8:	ea95 0f0c 	teq	r5, ip
 8081cdc:	d106      	bne.n	8081cec <__aeabi_ddiv+0x1b0>
 8081cde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8081ce2:	f43f aefd 	beq.w	8081ae0 <__aeabi_dmul+0x1f8>
 8081ce6:	4610      	mov	r0, r2
 8081ce8:	4619      	mov	r1, r3
 8081cea:	e722      	b.n	8081b32 <__aeabi_dmul+0x24a>
 8081cec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8081cf0:	bf18      	it	ne
 8081cf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8081cf6:	f47f aec5 	bne.w	8081a84 <__aeabi_dmul+0x19c>
 8081cfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8081cfe:	f47f af0d 	bne.w	8081b1c <__aeabi_dmul+0x234>
 8081d02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8081d06:	f47f aeeb 	bne.w	8081ae0 <__aeabi_dmul+0x1f8>
 8081d0a:	e712      	b.n	8081b32 <__aeabi_dmul+0x24a>

08081d0c <__gedf2>:
 8081d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8081d10:	e006      	b.n	8081d20 <__cmpdf2+0x4>
 8081d12:	bf00      	nop

08081d14 <__ledf2>:
 8081d14:	f04f 0c01 	mov.w	ip, #1
 8081d18:	e002      	b.n	8081d20 <__cmpdf2+0x4>
 8081d1a:	bf00      	nop

08081d1c <__cmpdf2>:
 8081d1c:	f04f 0c01 	mov.w	ip, #1
 8081d20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8081d24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8081d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8081d30:	bf18      	it	ne
 8081d32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8081d36:	d01b      	beq.n	8081d70 <__cmpdf2+0x54>
 8081d38:	b001      	add	sp, #4
 8081d3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8081d3e:	bf0c      	ite	eq
 8081d40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8081d44:	ea91 0f03 	teqne	r1, r3
 8081d48:	bf02      	ittt	eq
 8081d4a:	ea90 0f02 	teqeq	r0, r2
 8081d4e:	2000      	moveq	r0, #0
 8081d50:	4770      	bxeq	lr
 8081d52:	f110 0f00 	cmn.w	r0, #0
 8081d56:	ea91 0f03 	teq	r1, r3
 8081d5a:	bf58      	it	pl
 8081d5c:	4299      	cmppl	r1, r3
 8081d5e:	bf08      	it	eq
 8081d60:	4290      	cmpeq	r0, r2
 8081d62:	bf2c      	ite	cs
 8081d64:	17d8      	asrcs	r0, r3, #31
 8081d66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8081d6a:	f040 0001 	orr.w	r0, r0, #1
 8081d6e:	4770      	bx	lr
 8081d70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8081d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d78:	d102      	bne.n	8081d80 <__cmpdf2+0x64>
 8081d7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8081d7e:	d107      	bne.n	8081d90 <__cmpdf2+0x74>
 8081d80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8081d84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8081d88:	d1d6      	bne.n	8081d38 <__cmpdf2+0x1c>
 8081d8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8081d8e:	d0d3      	beq.n	8081d38 <__cmpdf2+0x1c>
 8081d90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8081d94:	4770      	bx	lr
 8081d96:	bf00      	nop

08081d98 <__aeabi_cdrcmple>:
 8081d98:	4684      	mov	ip, r0
 8081d9a:	4610      	mov	r0, r2
 8081d9c:	4662      	mov	r2, ip
 8081d9e:	468c      	mov	ip, r1
 8081da0:	4619      	mov	r1, r3
 8081da2:	4663      	mov	r3, ip
 8081da4:	e000      	b.n	8081da8 <__aeabi_cdcmpeq>
 8081da6:	bf00      	nop

08081da8 <__aeabi_cdcmpeq>:
 8081da8:	b501      	push	{r0, lr}
 8081daa:	f7ff ffb7 	bl	8081d1c <__cmpdf2>
 8081dae:	2800      	cmp	r0, #0
 8081db0:	bf48      	it	mi
 8081db2:	f110 0f00 	cmnmi.w	r0, #0
 8081db6:	bd01      	pop	{r0, pc}

08081db8 <__aeabi_dcmpeq>:
 8081db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081dbc:	f7ff fff4 	bl	8081da8 <__aeabi_cdcmpeq>
 8081dc0:	bf0c      	ite	eq
 8081dc2:	2001      	moveq	r0, #1
 8081dc4:	2000      	movne	r0, #0
 8081dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8081dca:	bf00      	nop

08081dcc <__aeabi_dcmplt>:
 8081dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081dd0:	f7ff ffea 	bl	8081da8 <__aeabi_cdcmpeq>
 8081dd4:	bf34      	ite	cc
 8081dd6:	2001      	movcc	r0, #1
 8081dd8:	2000      	movcs	r0, #0
 8081dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8081dde:	bf00      	nop

08081de0 <__aeabi_dcmple>:
 8081de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081de4:	f7ff ffe0 	bl	8081da8 <__aeabi_cdcmpeq>
 8081de8:	bf94      	ite	ls
 8081dea:	2001      	movls	r0, #1
 8081dec:	2000      	movhi	r0, #0
 8081dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8081df2:	bf00      	nop

08081df4 <__aeabi_dcmpge>:
 8081df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081df8:	f7ff ffce 	bl	8081d98 <__aeabi_cdrcmple>
 8081dfc:	bf94      	ite	ls
 8081dfe:	2001      	movls	r0, #1
 8081e00:	2000      	movhi	r0, #0
 8081e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8081e06:	bf00      	nop

08081e08 <__aeabi_dcmpgt>:
 8081e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081e0c:	f7ff ffc4 	bl	8081d98 <__aeabi_cdrcmple>
 8081e10:	bf34      	ite	cc
 8081e12:	2001      	movcc	r0, #1
 8081e14:	2000      	movcs	r0, #0
 8081e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8081e1a:	bf00      	nop

08081e1c <__aeabi_d2uiz>:
 8081e1c:	004a      	lsls	r2, r1, #1
 8081e1e:	d211      	bcs.n	8081e44 <__aeabi_d2uiz+0x28>
 8081e20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8081e24:	d211      	bcs.n	8081e4a <__aeabi_d2uiz+0x2e>
 8081e26:	d50d      	bpl.n	8081e44 <__aeabi_d2uiz+0x28>
 8081e28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8081e2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8081e30:	d40e      	bmi.n	8081e50 <__aeabi_d2uiz+0x34>
 8081e32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8081e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8081e3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8081e3e:	fa23 f002 	lsr.w	r0, r3, r2
 8081e42:	4770      	bx	lr
 8081e44:	f04f 0000 	mov.w	r0, #0
 8081e48:	4770      	bx	lr
 8081e4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8081e4e:	d102      	bne.n	8081e56 <__aeabi_d2uiz+0x3a>
 8081e50:	f04f 30ff 	mov.w	r0, #4294967295
 8081e54:	4770      	bx	lr
 8081e56:	f04f 0000 	mov.w	r0, #0
 8081e5a:	4770      	bx	lr

08081e5c <__aeabi_frsub>:
 8081e5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8081e60:	e002      	b.n	8081e68 <__addsf3>
 8081e62:	bf00      	nop

08081e64 <__aeabi_fsub>:
 8081e64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08081e68 <__addsf3>:
 8081e68:	0042      	lsls	r2, r0, #1
 8081e6a:	bf1f      	itttt	ne
 8081e6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8081e70:	ea92 0f03 	teqne	r2, r3
 8081e74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8081e78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8081e7c:	d06a      	beq.n	8081f54 <__addsf3+0xec>
 8081e7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8081e82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8081e86:	bfc1      	itttt	gt
 8081e88:	18d2      	addgt	r2, r2, r3
 8081e8a:	4041      	eorgt	r1, r0
 8081e8c:	4048      	eorgt	r0, r1
 8081e8e:	4041      	eorgt	r1, r0
 8081e90:	bfb8      	it	lt
 8081e92:	425b      	neglt	r3, r3
 8081e94:	2b19      	cmp	r3, #25
 8081e96:	bf88      	it	hi
 8081e98:	4770      	bxhi	lr
 8081e9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8081e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081ea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8081ea6:	bf18      	it	ne
 8081ea8:	4240      	negne	r0, r0
 8081eaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081eae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8081eb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8081eb6:	bf18      	it	ne
 8081eb8:	4249      	negne	r1, r1
 8081eba:	ea92 0f03 	teq	r2, r3
 8081ebe:	d03f      	beq.n	8081f40 <__addsf3+0xd8>
 8081ec0:	f1a2 0201 	sub.w	r2, r2, #1
 8081ec4:	fa41 fc03 	asr.w	ip, r1, r3
 8081ec8:	eb10 000c 	adds.w	r0, r0, ip
 8081ecc:	f1c3 0320 	rsb	r3, r3, #32
 8081ed0:	fa01 f103 	lsl.w	r1, r1, r3
 8081ed4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8081ed8:	d502      	bpl.n	8081ee0 <__addsf3+0x78>
 8081eda:	4249      	negs	r1, r1
 8081edc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8081ee0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8081ee4:	d313      	bcc.n	8081f0e <__addsf3+0xa6>
 8081ee6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8081eea:	d306      	bcc.n	8081efa <__addsf3+0x92>
 8081eec:	0840      	lsrs	r0, r0, #1
 8081eee:	ea4f 0131 	mov.w	r1, r1, rrx
 8081ef2:	f102 0201 	add.w	r2, r2, #1
 8081ef6:	2afe      	cmp	r2, #254	; 0xfe
 8081ef8:	d251      	bcs.n	8081f9e <__addsf3+0x136>
 8081efa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8081efe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8081f02:	bf08      	it	eq
 8081f04:	f020 0001 	biceq.w	r0, r0, #1
 8081f08:	ea40 0003 	orr.w	r0, r0, r3
 8081f0c:	4770      	bx	lr
 8081f0e:	0049      	lsls	r1, r1, #1
 8081f10:	eb40 0000 	adc.w	r0, r0, r0
 8081f14:	3a01      	subs	r2, #1
 8081f16:	bf28      	it	cs
 8081f18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8081f1c:	d2ed      	bcs.n	8081efa <__addsf3+0x92>
 8081f1e:	fab0 fc80 	clz	ip, r0
 8081f22:	f1ac 0c08 	sub.w	ip, ip, #8
 8081f26:	ebb2 020c 	subs.w	r2, r2, ip
 8081f2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8081f2e:	bfaa      	itet	ge
 8081f30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8081f34:	4252      	neglt	r2, r2
 8081f36:	4318      	orrge	r0, r3
 8081f38:	bfbc      	itt	lt
 8081f3a:	40d0      	lsrlt	r0, r2
 8081f3c:	4318      	orrlt	r0, r3
 8081f3e:	4770      	bx	lr
 8081f40:	f092 0f00 	teq	r2, #0
 8081f44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8081f48:	bf06      	itte	eq
 8081f4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8081f4e:	3201      	addeq	r2, #1
 8081f50:	3b01      	subne	r3, #1
 8081f52:	e7b5      	b.n	8081ec0 <__addsf3+0x58>
 8081f54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8081f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8081f5c:	bf18      	it	ne
 8081f5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8081f62:	d021      	beq.n	8081fa8 <__addsf3+0x140>
 8081f64:	ea92 0f03 	teq	r2, r3
 8081f68:	d004      	beq.n	8081f74 <__addsf3+0x10c>
 8081f6a:	f092 0f00 	teq	r2, #0
 8081f6e:	bf08      	it	eq
 8081f70:	4608      	moveq	r0, r1
 8081f72:	4770      	bx	lr
 8081f74:	ea90 0f01 	teq	r0, r1
 8081f78:	bf1c      	itt	ne
 8081f7a:	2000      	movne	r0, #0
 8081f7c:	4770      	bxne	lr
 8081f7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8081f82:	d104      	bne.n	8081f8e <__addsf3+0x126>
 8081f84:	0040      	lsls	r0, r0, #1
 8081f86:	bf28      	it	cs
 8081f88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8081f8c:	4770      	bx	lr
 8081f8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8081f92:	bf3c      	itt	cc
 8081f94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8081f98:	4770      	bxcc	lr
 8081f9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8081f9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8081fa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081fa6:	4770      	bx	lr
 8081fa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8081fac:	bf16      	itet	ne
 8081fae:	4608      	movne	r0, r1
 8081fb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8081fb4:	4601      	movne	r1, r0
 8081fb6:	0242      	lsls	r2, r0, #9
 8081fb8:	bf06      	itte	eq
 8081fba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8081fbe:	ea90 0f01 	teqeq	r0, r1
 8081fc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8081fc6:	4770      	bx	lr

08081fc8 <__aeabi_ui2f>:
 8081fc8:	f04f 0300 	mov.w	r3, #0
 8081fcc:	e004      	b.n	8081fd8 <__aeabi_i2f+0x8>
 8081fce:	bf00      	nop

08081fd0 <__aeabi_i2f>:
 8081fd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8081fd4:	bf48      	it	mi
 8081fd6:	4240      	negmi	r0, r0
 8081fd8:	ea5f 0c00 	movs.w	ip, r0
 8081fdc:	bf08      	it	eq
 8081fde:	4770      	bxeq	lr
 8081fe0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8081fe4:	4601      	mov	r1, r0
 8081fe6:	f04f 0000 	mov.w	r0, #0
 8081fea:	e01c      	b.n	8082026 <__aeabi_l2f+0x2a>

08081fec <__aeabi_ul2f>:
 8081fec:	ea50 0201 	orrs.w	r2, r0, r1
 8081ff0:	bf08      	it	eq
 8081ff2:	4770      	bxeq	lr
 8081ff4:	f04f 0300 	mov.w	r3, #0
 8081ff8:	e00a      	b.n	8082010 <__aeabi_l2f+0x14>
 8081ffa:	bf00      	nop

08081ffc <__aeabi_l2f>:
 8081ffc:	ea50 0201 	orrs.w	r2, r0, r1
 8082000:	bf08      	it	eq
 8082002:	4770      	bxeq	lr
 8082004:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082008:	d502      	bpl.n	8082010 <__aeabi_l2f+0x14>
 808200a:	4240      	negs	r0, r0
 808200c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082010:	ea5f 0c01 	movs.w	ip, r1
 8082014:	bf02      	ittt	eq
 8082016:	4684      	moveq	ip, r0
 8082018:	4601      	moveq	r1, r0
 808201a:	2000      	moveq	r0, #0
 808201c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082020:	bf08      	it	eq
 8082022:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082026:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808202a:	fabc f28c 	clz	r2, ip
 808202e:	3a08      	subs	r2, #8
 8082030:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082034:	db10      	blt.n	8082058 <__aeabi_l2f+0x5c>
 8082036:	fa01 fc02 	lsl.w	ip, r1, r2
 808203a:	4463      	add	r3, ip
 808203c:	fa00 fc02 	lsl.w	ip, r0, r2
 8082040:	f1c2 0220 	rsb	r2, r2, #32
 8082044:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082048:	fa20 f202 	lsr.w	r2, r0, r2
 808204c:	eb43 0002 	adc.w	r0, r3, r2
 8082050:	bf08      	it	eq
 8082052:	f020 0001 	biceq.w	r0, r0, #1
 8082056:	4770      	bx	lr
 8082058:	f102 0220 	add.w	r2, r2, #32
 808205c:	fa01 fc02 	lsl.w	ip, r1, r2
 8082060:	f1c2 0220 	rsb	r2, r2, #32
 8082064:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082068:	fa21 f202 	lsr.w	r2, r1, r2
 808206c:	eb43 0002 	adc.w	r0, r3, r2
 8082070:	bf08      	it	eq
 8082072:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082076:	4770      	bx	lr

08082078 <__aeabi_fmul>:
 8082078:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808207c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082080:	bf1e      	ittt	ne
 8082082:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082086:	ea92 0f0c 	teqne	r2, ip
 808208a:	ea93 0f0c 	teqne	r3, ip
 808208e:	d06f      	beq.n	8082170 <__aeabi_fmul+0xf8>
 8082090:	441a      	add	r2, r3
 8082092:	ea80 0c01 	eor.w	ip, r0, r1
 8082096:	0240      	lsls	r0, r0, #9
 8082098:	bf18      	it	ne
 808209a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808209e:	d01e      	beq.n	80820de <__aeabi_fmul+0x66>
 80820a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80820a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80820a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80820ac:	fba0 3101 	umull	r3, r1, r0, r1
 80820b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80820b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80820b8:	bf3e      	ittt	cc
 80820ba:	0049      	lslcc	r1, r1, #1
 80820bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80820c0:	005b      	lslcc	r3, r3, #1
 80820c2:	ea40 0001 	orr.w	r0, r0, r1
 80820c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80820ca:	2afd      	cmp	r2, #253	; 0xfd
 80820cc:	d81d      	bhi.n	808210a <__aeabi_fmul+0x92>
 80820ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80820d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80820d6:	bf08      	it	eq
 80820d8:	f020 0001 	biceq.w	r0, r0, #1
 80820dc:	4770      	bx	lr
 80820de:	f090 0f00 	teq	r0, #0
 80820e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80820e6:	bf08      	it	eq
 80820e8:	0249      	lsleq	r1, r1, #9
 80820ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80820ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80820f2:	3a7f      	subs	r2, #127	; 0x7f
 80820f4:	bfc2      	ittt	gt
 80820f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80820fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80820fe:	4770      	bxgt	lr
 8082100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082104:	f04f 0300 	mov.w	r3, #0
 8082108:	3a01      	subs	r2, #1
 808210a:	dc5d      	bgt.n	80821c8 <__aeabi_fmul+0x150>
 808210c:	f112 0f19 	cmn.w	r2, #25
 8082110:	bfdc      	itt	le
 8082112:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8082116:	4770      	bxle	lr
 8082118:	f1c2 0200 	rsb	r2, r2, #0
 808211c:	0041      	lsls	r1, r0, #1
 808211e:	fa21 f102 	lsr.w	r1, r1, r2
 8082122:	f1c2 0220 	rsb	r2, r2, #32
 8082126:	fa00 fc02 	lsl.w	ip, r0, r2
 808212a:	ea5f 0031 	movs.w	r0, r1, rrx
 808212e:	f140 0000 	adc.w	r0, r0, #0
 8082132:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082136:	bf08      	it	eq
 8082138:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808213c:	4770      	bx	lr
 808213e:	f092 0f00 	teq	r2, #0
 8082142:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082146:	bf02      	ittt	eq
 8082148:	0040      	lsleq	r0, r0, #1
 808214a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808214e:	3a01      	subeq	r2, #1
 8082150:	d0f9      	beq.n	8082146 <__aeabi_fmul+0xce>
 8082152:	ea40 000c 	orr.w	r0, r0, ip
 8082156:	f093 0f00 	teq	r3, #0
 808215a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808215e:	bf02      	ittt	eq
 8082160:	0049      	lsleq	r1, r1, #1
 8082162:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082166:	3b01      	subeq	r3, #1
 8082168:	d0f9      	beq.n	808215e <__aeabi_fmul+0xe6>
 808216a:	ea41 010c 	orr.w	r1, r1, ip
 808216e:	e78f      	b.n	8082090 <__aeabi_fmul+0x18>
 8082170:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082174:	ea92 0f0c 	teq	r2, ip
 8082178:	bf18      	it	ne
 808217a:	ea93 0f0c 	teqne	r3, ip
 808217e:	d00a      	beq.n	8082196 <__aeabi_fmul+0x11e>
 8082180:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082184:	bf18      	it	ne
 8082186:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808218a:	d1d8      	bne.n	808213e <__aeabi_fmul+0xc6>
 808218c:	ea80 0001 	eor.w	r0, r0, r1
 8082190:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082194:	4770      	bx	lr
 8082196:	f090 0f00 	teq	r0, #0
 808219a:	bf17      	itett	ne
 808219c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80821a0:	4608      	moveq	r0, r1
 80821a2:	f091 0f00 	teqne	r1, #0
 80821a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80821aa:	d014      	beq.n	80821d6 <__aeabi_fmul+0x15e>
 80821ac:	ea92 0f0c 	teq	r2, ip
 80821b0:	d101      	bne.n	80821b6 <__aeabi_fmul+0x13e>
 80821b2:	0242      	lsls	r2, r0, #9
 80821b4:	d10f      	bne.n	80821d6 <__aeabi_fmul+0x15e>
 80821b6:	ea93 0f0c 	teq	r3, ip
 80821ba:	d103      	bne.n	80821c4 <__aeabi_fmul+0x14c>
 80821bc:	024b      	lsls	r3, r1, #9
 80821be:	bf18      	it	ne
 80821c0:	4608      	movne	r0, r1
 80821c2:	d108      	bne.n	80821d6 <__aeabi_fmul+0x15e>
 80821c4:	ea80 0001 	eor.w	r0, r0, r1
 80821c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80821cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80821d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80821d4:	4770      	bx	lr
 80821d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80821da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80821de:	4770      	bx	lr

080821e0 <__aeabi_fdiv>:
 80821e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80821e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80821e8:	bf1e      	ittt	ne
 80821ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80821ee:	ea92 0f0c 	teqne	r2, ip
 80821f2:	ea93 0f0c 	teqne	r3, ip
 80821f6:	d069      	beq.n	80822cc <__aeabi_fdiv+0xec>
 80821f8:	eba2 0203 	sub.w	r2, r2, r3
 80821fc:	ea80 0c01 	eor.w	ip, r0, r1
 8082200:	0249      	lsls	r1, r1, #9
 8082202:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8082206:	d037      	beq.n	8082278 <__aeabi_fdiv+0x98>
 8082208:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808220c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8082210:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8082214:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082218:	428b      	cmp	r3, r1
 808221a:	bf38      	it	cc
 808221c:	005b      	lslcc	r3, r3, #1
 808221e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8082222:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8082226:	428b      	cmp	r3, r1
 8082228:	bf24      	itt	cs
 808222a:	1a5b      	subcs	r3, r3, r1
 808222c:	ea40 000c 	orrcs.w	r0, r0, ip
 8082230:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8082234:	bf24      	itt	cs
 8082236:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808223a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808223e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8082242:	bf24      	itt	cs
 8082244:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8082248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808224c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8082250:	bf24      	itt	cs
 8082252:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8082256:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808225a:	011b      	lsls	r3, r3, #4
 808225c:	bf18      	it	ne
 808225e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8082262:	d1e0      	bne.n	8082226 <__aeabi_fdiv+0x46>
 8082264:	2afd      	cmp	r2, #253	; 0xfd
 8082266:	f63f af50 	bhi.w	808210a <__aeabi_fmul+0x92>
 808226a:	428b      	cmp	r3, r1
 808226c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082270:	bf08      	it	eq
 8082272:	f020 0001 	biceq.w	r0, r0, #1
 8082276:	4770      	bx	lr
 8082278:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808227c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082280:	327f      	adds	r2, #127	; 0x7f
 8082282:	bfc2      	ittt	gt
 8082284:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082288:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808228c:	4770      	bxgt	lr
 808228e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082292:	f04f 0300 	mov.w	r3, #0
 8082296:	3a01      	subs	r2, #1
 8082298:	e737      	b.n	808210a <__aeabi_fmul+0x92>
 808229a:	f092 0f00 	teq	r2, #0
 808229e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80822a2:	bf02      	ittt	eq
 80822a4:	0040      	lsleq	r0, r0, #1
 80822a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80822aa:	3a01      	subeq	r2, #1
 80822ac:	d0f9      	beq.n	80822a2 <__aeabi_fdiv+0xc2>
 80822ae:	ea40 000c 	orr.w	r0, r0, ip
 80822b2:	f093 0f00 	teq	r3, #0
 80822b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80822ba:	bf02      	ittt	eq
 80822bc:	0049      	lsleq	r1, r1, #1
 80822be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80822c2:	3b01      	subeq	r3, #1
 80822c4:	d0f9      	beq.n	80822ba <__aeabi_fdiv+0xda>
 80822c6:	ea41 010c 	orr.w	r1, r1, ip
 80822ca:	e795      	b.n	80821f8 <__aeabi_fdiv+0x18>
 80822cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80822d0:	ea92 0f0c 	teq	r2, ip
 80822d4:	d108      	bne.n	80822e8 <__aeabi_fdiv+0x108>
 80822d6:	0242      	lsls	r2, r0, #9
 80822d8:	f47f af7d 	bne.w	80821d6 <__aeabi_fmul+0x15e>
 80822dc:	ea93 0f0c 	teq	r3, ip
 80822e0:	f47f af70 	bne.w	80821c4 <__aeabi_fmul+0x14c>
 80822e4:	4608      	mov	r0, r1
 80822e6:	e776      	b.n	80821d6 <__aeabi_fmul+0x15e>
 80822e8:	ea93 0f0c 	teq	r3, ip
 80822ec:	d104      	bne.n	80822f8 <__aeabi_fdiv+0x118>
 80822ee:	024b      	lsls	r3, r1, #9
 80822f0:	f43f af4c 	beq.w	808218c <__aeabi_fmul+0x114>
 80822f4:	4608      	mov	r0, r1
 80822f6:	e76e      	b.n	80821d6 <__aeabi_fmul+0x15e>
 80822f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80822fc:	bf18      	it	ne
 80822fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082302:	d1ca      	bne.n	808229a <__aeabi_fdiv+0xba>
 8082304:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8082308:	f47f af5c 	bne.w	80821c4 <__aeabi_fmul+0x14c>
 808230c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8082310:	f47f af3c 	bne.w	808218c <__aeabi_fmul+0x114>
 8082314:	e75f      	b.n	80821d6 <__aeabi_fmul+0x15e>
 8082316:	bf00      	nop

08082318 <__gesf2>:
 8082318:	f04f 3cff 	mov.w	ip, #4294967295
 808231c:	e006      	b.n	808232c <__cmpsf2+0x4>
 808231e:	bf00      	nop

08082320 <__lesf2>:
 8082320:	f04f 0c01 	mov.w	ip, #1
 8082324:	e002      	b.n	808232c <__cmpsf2+0x4>
 8082326:	bf00      	nop

08082328 <__cmpsf2>:
 8082328:	f04f 0c01 	mov.w	ip, #1
 808232c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082330:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082334:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082338:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808233c:	bf18      	it	ne
 808233e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082342:	d011      	beq.n	8082368 <__cmpsf2+0x40>
 8082344:	b001      	add	sp, #4
 8082346:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808234a:	bf18      	it	ne
 808234c:	ea90 0f01 	teqne	r0, r1
 8082350:	bf58      	it	pl
 8082352:	ebb2 0003 	subspl.w	r0, r2, r3
 8082356:	bf88      	it	hi
 8082358:	17c8      	asrhi	r0, r1, #31
 808235a:	bf38      	it	cc
 808235c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8082360:	bf18      	it	ne
 8082362:	f040 0001 	orrne.w	r0, r0, #1
 8082366:	4770      	bx	lr
 8082368:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808236c:	d102      	bne.n	8082374 <__cmpsf2+0x4c>
 808236e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8082372:	d105      	bne.n	8082380 <__cmpsf2+0x58>
 8082374:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8082378:	d1e4      	bne.n	8082344 <__cmpsf2+0x1c>
 808237a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808237e:	d0e1      	beq.n	8082344 <__cmpsf2+0x1c>
 8082380:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082384:	4770      	bx	lr
 8082386:	bf00      	nop

08082388 <__aeabi_cfrcmple>:
 8082388:	4684      	mov	ip, r0
 808238a:	4608      	mov	r0, r1
 808238c:	4661      	mov	r1, ip
 808238e:	e7ff      	b.n	8082390 <__aeabi_cfcmpeq>

08082390 <__aeabi_cfcmpeq>:
 8082390:	b50f      	push	{r0, r1, r2, r3, lr}
 8082392:	f7ff ffc9 	bl	8082328 <__cmpsf2>
 8082396:	2800      	cmp	r0, #0
 8082398:	bf48      	it	mi
 808239a:	f110 0f00 	cmnmi.w	r0, #0
 808239e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080823a0 <__aeabi_fcmpeq>:
 80823a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80823a4:	f7ff fff4 	bl	8082390 <__aeabi_cfcmpeq>
 80823a8:	bf0c      	ite	eq
 80823aa:	2001      	moveq	r0, #1
 80823ac:	2000      	movne	r0, #0
 80823ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80823b2:	bf00      	nop

080823b4 <__aeabi_fcmplt>:
 80823b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80823b8:	f7ff ffea 	bl	8082390 <__aeabi_cfcmpeq>
 80823bc:	bf34      	ite	cc
 80823be:	2001      	movcc	r0, #1
 80823c0:	2000      	movcs	r0, #0
 80823c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80823c6:	bf00      	nop

080823c8 <__aeabi_fcmple>:
 80823c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80823cc:	f7ff ffe0 	bl	8082390 <__aeabi_cfcmpeq>
 80823d0:	bf94      	ite	ls
 80823d2:	2001      	movls	r0, #1
 80823d4:	2000      	movhi	r0, #0
 80823d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80823da:	bf00      	nop

080823dc <__aeabi_fcmpge>:
 80823dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80823e0:	f7ff ffd2 	bl	8082388 <__aeabi_cfrcmple>
 80823e4:	bf94      	ite	ls
 80823e6:	2001      	movls	r0, #1
 80823e8:	2000      	movhi	r0, #0
 80823ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80823ee:	bf00      	nop

080823f0 <__aeabi_fcmpgt>:
 80823f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80823f4:	f7ff ffc8 	bl	8082388 <__aeabi_cfrcmple>
 80823f8:	bf34      	ite	cc
 80823fa:	2001      	movcc	r0, #1
 80823fc:	2000      	movcs	r0, #0
 80823fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8082402:	bf00      	nop

08082404 <__aeabi_uldivmod>:
 8082404:	b953      	cbnz	r3, 808241c <__aeabi_uldivmod+0x18>
 8082406:	b94a      	cbnz	r2, 808241c <__aeabi_uldivmod+0x18>
 8082408:	2900      	cmp	r1, #0
 808240a:	bf08      	it	eq
 808240c:	2800      	cmpeq	r0, #0
 808240e:	bf1c      	itt	ne
 8082410:	f04f 31ff 	movne.w	r1, #4294967295
 8082414:	f04f 30ff 	movne.w	r0, #4294967295
 8082418:	f000 b85e 	b.w	80824d8 <__aeabi_idiv0>
 808241c:	f1ad 0c08 	sub.w	ip, sp, #8
 8082420:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8082424:	f7fd fdfa 	bl	808001c <__udivmoddi4>
 8082428:	f8dd e004 	ldr.w	lr, [sp, #4]
 808242c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8082430:	b004      	add	sp, #16
 8082432:	4770      	bx	lr

08082434 <__aeabi_f2lz>:
 8082434:	b510      	push	{r4, lr}
 8082436:	2100      	movs	r1, #0
 8082438:	4604      	mov	r4, r0
 808243a:	f7ff ffbb 	bl	80823b4 <__aeabi_fcmplt>
 808243e:	b920      	cbnz	r0, 808244a <__aeabi_f2lz+0x16>
 8082440:	4620      	mov	r0, r4
 8082442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082446:	f000 b809 	b.w	808245c <__aeabi_f2ulz>
 808244a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808244e:	f000 f805 	bl	808245c <__aeabi_f2ulz>
 8082452:	4240      	negs	r0, r0
 8082454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082458:	bd10      	pop	{r4, pc}
 808245a:	bf00      	nop

0808245c <__aeabi_f2ulz>:
 808245c:	b5d0      	push	{r4, r6, r7, lr}
 808245e:	f7ff f9eb 	bl	8081838 <__aeabi_f2d>
 8082462:	2200      	movs	r2, #0
 8082464:	4b0b      	ldr	r3, [pc, #44]	; (8082494 <__aeabi_f2ulz+0x38>)
 8082466:	4606      	mov	r6, r0
 8082468:	460f      	mov	r7, r1
 808246a:	f7ff fa3d 	bl	80818e8 <__aeabi_dmul>
 808246e:	f7ff fcd5 	bl	8081e1c <__aeabi_d2uiz>
 8082472:	4604      	mov	r4, r0
 8082474:	f7ff f9be 	bl	80817f4 <__aeabi_ui2d>
 8082478:	2200      	movs	r2, #0
 808247a:	4b07      	ldr	r3, [pc, #28]	; (8082498 <__aeabi_f2ulz+0x3c>)
 808247c:	f7ff fa34 	bl	80818e8 <__aeabi_dmul>
 8082480:	4602      	mov	r2, r0
 8082482:	460b      	mov	r3, r1
 8082484:	4630      	mov	r0, r6
 8082486:	4639      	mov	r1, r7
 8082488:	f7ff f876 	bl	8081578 <__aeabi_dsub>
 808248c:	f7ff fcc6 	bl	8081e1c <__aeabi_d2uiz>
 8082490:	4621      	mov	r1, r4
 8082492:	bdd0      	pop	{r4, r6, r7, pc}
 8082494:	3df00000 	.word	0x3df00000
 8082498:	41f00000 	.word	0x41f00000

0808249c <__aeabi_d2ulz>:
 808249c:	b5d0      	push	{r4, r6, r7, lr}
 808249e:	2200      	movs	r2, #0
 80824a0:	4b0b      	ldr	r3, [pc, #44]	; (80824d0 <__aeabi_d2ulz+0x34>)
 80824a2:	4606      	mov	r6, r0
 80824a4:	460f      	mov	r7, r1
 80824a6:	f7ff fa1f 	bl	80818e8 <__aeabi_dmul>
 80824aa:	f7ff fcb7 	bl	8081e1c <__aeabi_d2uiz>
 80824ae:	4604      	mov	r4, r0
 80824b0:	f7ff f9a0 	bl	80817f4 <__aeabi_ui2d>
 80824b4:	2200      	movs	r2, #0
 80824b6:	4b07      	ldr	r3, [pc, #28]	; (80824d4 <__aeabi_d2ulz+0x38>)
 80824b8:	f7ff fa16 	bl	80818e8 <__aeabi_dmul>
 80824bc:	4602      	mov	r2, r0
 80824be:	460b      	mov	r3, r1
 80824c0:	4630      	mov	r0, r6
 80824c2:	4639      	mov	r1, r7
 80824c4:	f7ff f858 	bl	8081578 <__aeabi_dsub>
 80824c8:	f7ff fca8 	bl	8081e1c <__aeabi_d2uiz>
 80824cc:	4621      	mov	r1, r4
 80824ce:	bdd0      	pop	{r4, r6, r7, pc}
 80824d0:	3df00000 	.word	0x3df00000
 80824d4:	41f00000 	.word	0x41f00000

080824d8 <__aeabi_idiv0>:
 80824d8:	4770      	bx	lr
 80824da:	bf00      	nop

080824dc <asctime_r>:
 80824dc:	b510      	push	{r4, lr}
 80824de:	460c      	mov	r4, r1
 80824e0:	6941      	ldr	r1, [r0, #20]
 80824e2:	b086      	sub	sp, #24
 80824e4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80824e8:	6903      	ldr	r3, [r0, #16]
 80824ea:	6982      	ldr	r2, [r0, #24]
 80824ec:	9104      	str	r1, [sp, #16]
 80824ee:	6801      	ldr	r1, [r0, #0]
 80824f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80824f4:	9103      	str	r1, [sp, #12]
 80824f6:	6841      	ldr	r1, [r0, #4]
 80824f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80824fc:	9102      	str	r1, [sp, #8]
 80824fe:	6881      	ldr	r1, [r0, #8]
 8082500:	9101      	str	r1, [sp, #4]
 8082502:	68c1      	ldr	r1, [r0, #12]
 8082504:	4620      	mov	r0, r4
 8082506:	9100      	str	r1, [sp, #0]
 8082508:	4904      	ldr	r1, [pc, #16]	; (808251c <asctime_r+0x40>)
 808250a:	440b      	add	r3, r1
 808250c:	4904      	ldr	r1, [pc, #16]	; (8082520 <asctime_r+0x44>)
 808250e:	440a      	add	r2, r1
 8082510:	4904      	ldr	r1, [pc, #16]	; (8082524 <asctime_r+0x48>)
 8082512:	f7fe f8bf 	bl	8080694 <siprintf>
 8082516:	4620      	mov	r0, r4
 8082518:	b006      	add	sp, #24
 808251a:	bd10      	pop	{r4, pc}
 808251c:	080827de 	.word	0x080827de
 8082520:	080827c9 	.word	0x080827c9
 8082524:	080827a9 	.word	0x080827a9

08082528 <__cxa_atexit>:
 8082528:	b510      	push	{r4, lr}
 808252a:	4604      	mov	r4, r0
 808252c:	4804      	ldr	r0, [pc, #16]	; (8082540 <__cxa_atexit+0x18>)
 808252e:	4613      	mov	r3, r2
 8082530:	b120      	cbz	r0, 808253c <__cxa_atexit+0x14>
 8082532:	460a      	mov	r2, r1
 8082534:	2002      	movs	r0, #2
 8082536:	4621      	mov	r1, r4
 8082538:	f3af 8000 	nop.w
 808253c:	bd10      	pop	{r4, pc}
 808253e:	bf00      	nop
 8082540:	00000000 	.word	0x00000000

08082544 <memcpy>:
 8082544:	440a      	add	r2, r1
 8082546:	4291      	cmp	r1, r2
 8082548:	f100 33ff 	add.w	r3, r0, #4294967295
 808254c:	d100      	bne.n	8082550 <memcpy+0xc>
 808254e:	4770      	bx	lr
 8082550:	b510      	push	{r4, lr}
 8082552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082556:	4291      	cmp	r1, r2
 8082558:	f803 4f01 	strb.w	r4, [r3, #1]!
 808255c:	d1f9      	bne.n	8082552 <memcpy+0xe>
 808255e:	bd10      	pop	{r4, pc}

08082560 <memset>:
 8082560:	4603      	mov	r3, r0
 8082562:	4402      	add	r2, r0
 8082564:	4293      	cmp	r3, r2
 8082566:	d100      	bne.n	808256a <memset+0xa>
 8082568:	4770      	bx	lr
 808256a:	f803 1b01 	strb.w	r1, [r3], #1
 808256e:	e7f9      	b.n	8082564 <memset+0x4>

08082570 <srand>:
 8082570:	b538      	push	{r3, r4, r5, lr}
 8082572:	4b0d      	ldr	r3, [pc, #52]	; (80825a8 <srand+0x38>)
 8082574:	4604      	mov	r4, r0
 8082576:	681d      	ldr	r5, [r3, #0]
 8082578:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808257a:	b97b      	cbnz	r3, 808259c <srand+0x2c>
 808257c:	2018      	movs	r0, #24
 808257e:	f7fe f871 	bl	8080664 <malloc>
 8082582:	4a0a      	ldr	r2, [pc, #40]	; (80825ac <srand+0x3c>)
 8082584:	4b0a      	ldr	r3, [pc, #40]	; (80825b0 <srand+0x40>)
 8082586:	63a8      	str	r0, [r5, #56]	; 0x38
 8082588:	e9c0 2300 	strd	r2, r3, [r0]
 808258c:	4b09      	ldr	r3, [pc, #36]	; (80825b4 <srand+0x44>)
 808258e:	2201      	movs	r2, #1
 8082590:	6083      	str	r3, [r0, #8]
 8082592:	230b      	movs	r3, #11
 8082594:	8183      	strh	r3, [r0, #12]
 8082596:	2300      	movs	r3, #0
 8082598:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808259c:	2200      	movs	r2, #0
 808259e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80825a0:	611c      	str	r4, [r3, #16]
 80825a2:	615a      	str	r2, [r3, #20]
 80825a4:	bd38      	pop	{r3, r4, r5, pc}
 80825a6:	bf00      	nop
 80825a8:	20000004 	.word	0x20000004
 80825ac:	abcd330e 	.word	0xabcd330e
 80825b0:	e66d1234 	.word	0xe66d1234
 80825b4:	0005deec 	.word	0x0005deec

080825b8 <strcmp>:
 80825b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80825bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80825c0:	2a01      	cmp	r2, #1
 80825c2:	bf28      	it	cs
 80825c4:	429a      	cmpcs	r2, r3
 80825c6:	d0f7      	beq.n	80825b8 <strcmp>
 80825c8:	1ad0      	subs	r0, r2, r3
 80825ca:	4770      	bx	lr

080825cc <strcpy>:
 80825cc:	4603      	mov	r3, r0
 80825ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80825d2:	f803 2b01 	strb.w	r2, [r3], #1
 80825d6:	2a00      	cmp	r2, #0
 80825d8:	d1f9      	bne.n	80825ce <strcpy+0x2>
 80825da:	4770      	bx	lr

080825dc <strlen>:
 80825dc:	4603      	mov	r3, r0
 80825de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80825e2:	2a00      	cmp	r2, #0
 80825e4:	d1fb      	bne.n	80825de <strlen+0x2>
 80825e6:	1a18      	subs	r0, r3, r0
 80825e8:	3801      	subs	r0, #1
 80825ea:	4770      	bx	lr

080825ec <strncpy>:
 80825ec:	4603      	mov	r3, r0
 80825ee:	b510      	push	{r4, lr}
 80825f0:	3901      	subs	r1, #1
 80825f2:	b132      	cbz	r2, 8082602 <strncpy+0x16>
 80825f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80825f8:	3a01      	subs	r2, #1
 80825fa:	f803 4b01 	strb.w	r4, [r3], #1
 80825fe:	2c00      	cmp	r4, #0
 8082600:	d1f7      	bne.n	80825f2 <strncpy+0x6>
 8082602:	2100      	movs	r1, #0
 8082604:	441a      	add	r2, r3
 8082606:	4293      	cmp	r3, r2
 8082608:	d100      	bne.n	808260c <strncpy+0x20>
 808260a:	bd10      	pop	{r4, pc}
 808260c:	f803 1b01 	strb.w	r1, [r3], #1
 8082610:	e7f9      	b.n	8082606 <strncpy+0x1a>

08082612 <link_code_end>:
	...

08082614 <dynalib_user>:
 8082614:	004d 0808 008d 0808 00b5 0808 00b9 0808     M...............
 8082624:	0000 0000 6f4c 706f 2320 203a 2000 6954     ....Loop #: . Ti
 8082634:	656d 203a 2500 2d59 6d25 252d 2064 4825     me: .%Y-%m-%d %H
 8082644:	253a 3a4d 5325 2000 6142 7474 4f53 3a43     :%M:%S. BattSOC:
 8082654:	0020 3d3d 3d3d 3d3d 203d 4553 2054 5055      .======= SET UP
 8082664:	3d20 3d3d 3d3d 3d3d 3d3d 3d3d 7700 7269      ===========.wir
 8082674:	6e69 0067 7953 7473 6d65 7320 656c 7065     ing.System sleep
 8082684:	6320 6e6f 6966 7567 6172 6974 6e6f 6920      configuration i
 8082694:	2073 6e69 6176 696c 2e64 6100 7070 5a00     s invalid..app.Z
 80826a4:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80826b4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80826c4:	7361 7463 6d69 0065                         asctime.

080826cc <_ZTV9IPAddress>:
	...
 80826d4:	1075 0808 1065 0808 1067 0808               u...e...g...

080826e0 <_ZTV9USBSerial>:
	...
 80826e8:	1109 0808 116f 0808 1147 0808 0b67 0808     ....o...G...g...
 80826f8:	1139 0808 110b 0808 111b 0808 1169 0808     9...........i...
 8082708:	112b 0808 1105 0808                         +.......

08082710 <_ZTVN5spark13CellularClassE>:
	...
 8082718:	1307 0808 12fd 0808 12f3 0808 126d 0808     ............m...
 8082728:	12e7 0808 12db 0808 12cf 0808 12c7 0808     ................
 8082738:	12bd 0808 12b3 0808 1277 0808               ........w...

08082744 <_ZTV11USARTSerial>:
	...
 808274c:	1341 0808 13a9 0808 1385 0808 0b67 0808     A...........g...
 808275c:	1355 0808 1371 0808 1363 0808 137f 0808     U...q...c.......
 808276c:	1343 0808 1347 0808                         C...G...

08082774 <_ZTVN5spark12NetworkClassE>:
	...
 808277c:	1469 0808 1473 0808 147d 0808 1487 0808     i...s...}.......
 808278c:	1491 0808 149d 0808 14a9 0808 14b5 0808     ................
 808279c:	14bd 0808 14c7 0808 14d1 0808               ............

080827a8 <_ZSt7nothrow>:
 80827a8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80827b8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080827c9 <day_name.4782>:
 80827c9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80827d9:	6972 6153                                    riSat

080827de <mon_name.4783>:
 80827de:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80827ee:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80827fe:	4476 6365                                   vDec

08082802 <link_const_variable_data_end>:
	...

08082804 <link_constructors_location>:
 8082804:	08080805 	.word	0x08080805
 8082808:	08080c21 	.word	0x08080c21
 808280c:	08080eb1 	.word	0x08080eb1
 8082810:	08080ee5 	.word	0x08080ee5
 8082814:	08081311 	.word	0x08081311
 8082818:	08081519 	.word	0x08081519
 808281c:	0808152d 	.word	0x0808152d
